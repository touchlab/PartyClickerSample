//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoDatabaseDatabaseStatement.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScope.h"
#include "OrgGreenrobotGreendaoInternalDaoConfig.h"
#include "OrgGreenrobotGreendaoInternalSqlUtils.h"
#include "OrgGreenrobotGreendaoProperty.h"
#include "PDDaoSession.h"
#include "PDParty.h"
#include "PDPartyDao.h"
#include "PDPerson.h"
#include "PDPersonDao.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface PDPersonDao () {
 @public
  PDDaoSession *daoSession_;
  NSString *selectDeep_;
}

@end

J2OBJC_FIELD_SETTER(PDPersonDao, daoSession_, PDDaoSession *)
J2OBJC_FIELD_SETTER(PDPersonDao, selectDeep_, NSString *)

NSString *PDPersonDao_TABLENAME = @"PERSON";

@implementation PDPersonDao

- (instancetype)initWithOrgGreenrobotGreendaoInternalDaoConfig:(OrgGreenrobotGreendaoInternalDaoConfig *)config {
  PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(self, config);
  return self;
}

- (instancetype)initWithOrgGreenrobotGreendaoInternalDaoConfig:(OrgGreenrobotGreendaoInternalDaoConfig *)config
                                              withPDDaoSession:(PDDaoSession *)daoSession {
  PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_(self, config, daoSession);
  return self;
}

+ (void)createTableWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                                 withBoolean:(jboolean)ifNotExists {
  PDPersonDao_createTableWithOrgGreenrobotGreendaoDatabaseDatabase_withBoolean_(db, ifNotExists);
}

+ (void)dropTableWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                               withBoolean:(jboolean)ifExists {
  PDPersonDao_dropTableWithOrgGreenrobotGreendaoDatabaseDatabase_withBoolean_(db, ifExists);
}

- (void)bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                                                              withId:(PDPerson *)entity {
  [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) clearBindings];
  JavaLangLong *id_ = [((PDPerson *) nil_chk(entity)) getId];
  if (id_ != nil) {
    [stmt bindLongWithInt:1 withLong:[id_ longLongValue]];
  }
  JavaUtilDate *recorded = [entity getRecorded];
  if (recorded != nil) {
    [stmt bindLongWithInt:2 withLong:[recorded getTime]];
  }
  [stmt bindLongWithInt:3 withLong:[entity getVal]];
  [stmt bindLongWithInt:4 withLong:[entity getPartyId]];
}

- (void)bindValuesWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)stmt
                                                    withId:(PDPerson *)entity {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt)) clearBindings];
  JavaLangLong *id_ = [((PDPerson *) nil_chk(entity)) getId];
  if (id_ != nil) {
    [stmt bindLongWithInt:1 withLong:[id_ longLongValue]];
  }
  JavaUtilDate *recorded = [entity getRecorded];
  if (recorded != nil) {
    [stmt bindLongWithInt:2 withLong:[recorded getTime]];
  }
  [stmt bindLongWithInt:3 withLong:[entity getVal]];
  [stmt bindLongWithInt:4 withLong:[entity getPartyId]];
}

- (void)attachEntityWithId:(PDPerson *)entity {
  [super attachEntityWithId:entity];
  [((PDPerson *) nil_chk(entity)) __setDaoSessionWithPDDaoSession:daoSession_];
}

- (JavaLangLong *)readKeyWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                           withInt:(jint)offset {
  return [((id<AndroidDatabaseCursor>) nil_chk(cursor)) isNullWithInt:offset + 0] ? nil : JavaLangLong_valueOfWithLong_([cursor getLongWithInt:offset + 0]);
}

- (PDPerson *)readEntityWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                          withInt:(jint)offset {
  PDPerson *entity = create_PDPerson_initWithJavaLangLong_withJavaUtilDate_withShort_withLong_([((id<AndroidDatabaseCursor>) nil_chk(cursor)) isNullWithInt:offset + 0] ? nil : JavaLangLong_valueOfWithLong_([cursor getLongWithInt:offset + 0]), [cursor isNullWithInt:offset + 1] ? nil : create_JavaUtilDate_initWithLong_([cursor getLongWithInt:offset + 1]), [cursor getShortWithInt:offset + 2], [cursor getLongWithInt:offset + 3]);
  return entity;
}

- (void)readEntityWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withId:(PDPerson *)entity
                                    withInt:(jint)offset {
  [((PDPerson *) nil_chk(entity)) setIdWithJavaLangLong:[((id<AndroidDatabaseCursor>) nil_chk(cursor)) isNullWithInt:offset + 0] ? nil : JavaLangLong_valueOfWithLong_([cursor getLongWithInt:offset + 0])];
  [entity setRecordedWithJavaUtilDate:[cursor isNullWithInt:offset + 1] ? nil : create_JavaUtilDate_initWithLong_([cursor getLongWithInt:offset + 1])];
  [entity setValWithShort:[cursor getShortWithInt:offset + 2]];
  [entity setPartyIdWithLong:[cursor getLongWithInt:offset + 3]];
}

- (JavaLangLong *)updateKeyAfterInsertWithId:(PDPerson *)entity
                                    withLong:(jlong)rowId {
  [((PDPerson *) nil_chk(entity)) setIdWithJavaLangLong:JavaLangLong_valueOfWithLong_(rowId)];
  return JavaLangLong_valueOfWithLong_(rowId);
}

- (JavaLangLong *)getKeyWithId:(PDPerson *)entity {
  if (entity != nil) {
    return [entity getId];
  }
  else {
    return nil;
  }
}

- (jboolean)hasKeyWithId:(PDPerson *)entity {
  return [((PDPerson *) nil_chk(entity)) getId] != nil;
}

- (jboolean)isEntityUpdateable {
  return true;
}

- (NSString *)getSelectDeep {
  if (selectDeep_ == nil) {
    JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(@"SELECT ");
    OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, @"T", [self getAllColumns]);
    [builder appendWithChar:','];
    OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, @"T0", [((PDPartyDao *) nil_chk([((PDDaoSession *) nil_chk(daoSession_)) getPartyDao])) getAllColumns]);
    [builder appendWithNSString:@" FROM PERSON T"];
    [builder appendWithNSString:@" LEFT JOIN PARTY T0 ON T.\"PARTY_ID\"=T0.\"_id\""];
    [builder appendWithChar:' '];
    JreStrongAssign(&selectDeep_, [builder description]);
  }
  return selectDeep_;
}

- (PDPerson *)loadCurrentDeepWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                           withBoolean:(jboolean)lock {
  PDPerson *entity = [self loadCurrentWithAndroidDatabaseCursor:cursor withInt:0 withBoolean:lock];
  jint offset = ((IOSObjectArray *) nil_chk([self getAllColumns]))->size_;
  PDParty *party = [self loadCurrentOtherWithOrgGreenrobotGreendaoAbstractDao:[((PDDaoSession *) nil_chk(daoSession_)) getPartyDao] withAndroidDatabaseCursor:cursor withInt:offset];
  if (party != nil) {
    [((PDPerson *) nil_chk(entity)) setPartyWithPDParty:party];
  }
  return entity;
}

- (PDPerson *)loadDeepWithJavaLangLong:(JavaLangLong *)key {
  [self assertSinglePk];
  if (key == nil) {
    return nil;
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_([self getSelectDeep]);
  [builder appendWithNSString:@"WHERE "];
  OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, @"T", [self getPkColumns]);
  NSString *sql = [builder description];
  IOSObjectArray *keyArray = [IOSObjectArray arrayWithObjects:(id[]){ [key description] } count:1 type:NSString_class_()];
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:sql withNSStringArray:keyArray];
  @try {
    jboolean available = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
    if (!available) {
      return nil;
    }
    else if (![cursor isLast]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Expected unique result, but count was ", [cursor getCount]));
    }
    return [self loadCurrentDeepWithAndroidDatabaseCursor:cursor withBoolean:true];
  }
  @finally {
    [cursor close];
  }
}

- (id<JavaUtilList>)loadAllDeepFromCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  jint count = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getCount];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(count);
  if ([cursor moveToFirst]) {
    if (identityScope_ != nil) {
      [identityScope_ lock];
      [identityScope_ reserveRoomWithInt:count];
    }
    @try {
      do {
        [list addWithId:[self loadCurrentDeepWithAndroidDatabaseCursor:cursor withBoolean:false]];
      }
      while ([cursor moveToNext]);
    }
    @finally {
      if (identityScope_ != nil) {
        [identityScope_ unlock];
      }
    }
  }
  return list;
}

- (id<JavaUtilList>)loadDeepAllAndCloseCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  @try {
    return [self loadAllDeepFromCursorWithAndroidDatabaseCursor:cursor];
  }
  @finally {
    [((id<AndroidDatabaseCursor>) nil_chk(cursor)) close];
  }
}

- (id<JavaUtilList>)queryDeepWithNSString:(NSString *)where
                        withNSStringArray:(IOSObjectArray *)selectionArg {
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:JreStrcat("$$", [self getSelectDeep], where) withNSStringArray:selectionArg];
  return [self loadDeepAllAndCloseCursorWithAndroidDatabaseCursor:cursor];
}

- (void)dealloc {
  RELEASE_(daoSession_);
  RELEASE_(selectDeep_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LPDPerson;", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x14, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LPDPerson;", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "LPDPerson;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 25, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x81, 26, 27, -1, 28, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoInternalDaoConfig:);
  methods[1].selector = @selector(initWithOrgGreenrobotGreendaoInternalDaoConfig:withPDDaoSession:);
  methods[2].selector = @selector(createTableWithOrgGreenrobotGreendaoDatabaseDatabase:withBoolean:);
  methods[3].selector = @selector(dropTableWithOrgGreenrobotGreendaoDatabaseDatabase:withBoolean:);
  methods[4].selector = @selector(bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:withId:);
  methods[5].selector = @selector(bindValuesWithAndroidDatabaseSqliteSQLiteStatement:withId:);
  methods[6].selector = @selector(attachEntityWithId:);
  methods[7].selector = @selector(readKeyWithAndroidDatabaseCursor:withInt:);
  methods[8].selector = @selector(readEntityWithAndroidDatabaseCursor:withInt:);
  methods[9].selector = @selector(readEntityWithAndroidDatabaseCursor:withId:withInt:);
  methods[10].selector = @selector(updateKeyAfterInsertWithId:withLong:);
  methods[11].selector = @selector(getKeyWithId:);
  methods[12].selector = @selector(hasKeyWithId:);
  methods[13].selector = @selector(isEntityUpdateable);
  methods[14].selector = @selector(getSelectDeep);
  methods[15].selector = @selector(loadCurrentDeepWithAndroidDatabaseCursor:withBoolean:);
  methods[16].selector = @selector(loadDeepWithJavaLangLong:);
  methods[17].selector = @selector(loadAllDeepFromCursorWithAndroidDatabaseCursor:);
  methods[18].selector = @selector(loadDeepAllAndCloseCursorWithAndroidDatabaseCursor:);
  methods[19].selector = @selector(queryDeepWithNSString:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TABLENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "daoSession_", "LPDDaoSession;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectDeep_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoInternalDaoConfig;", "LOrgGreenrobotGreendaoInternalDaoConfig;LPDDaoSession;", "createTable", "LOrgGreenrobotGreendaoDatabaseDatabase;Z", "dropTable", "bindValues", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;LPDPerson;", "LAndroidDatabaseSqliteSQLiteStatement;LPDPerson;", "attachEntity", "LPDPerson;", "readKey", "LAndroidDatabaseCursor;I", "readEntity", "LAndroidDatabaseCursor;LPDPerson;I", "updateKeyAfterInsert", "LPDPerson;J", "getKey", "hasKey", "loadCurrentDeep", "LAndroidDatabaseCursor;Z", "loadDeep", "LJavaLangLong;", "loadAllDeepFromCursor", "LAndroidDatabaseCursor;", "(Landroid/database/Cursor;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/Person;>;", "loadDeepAllAndCloseCursor", "queryDeep", "LNSString;[LNSString;", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/Person;>;", &PDPersonDao_TABLENAME, "LPDPersonDao_Properties;", "Lorg/greenrobot/greendao/AbstractDao<Lcom/kgalligan/partyclicker/data/Person;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _PDPersonDao = { "PersonDao", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x1, 20, 3, -1, 30, -1, 31, -1 };
  return &_PDPersonDao;
}

@end

void PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(PDPersonDao *self, OrgGreenrobotGreendaoInternalDaoConfig *config) {
  OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(self, config);
}

PDPersonDao *new_PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoInternalDaoConfig *config) {
  J2OBJC_NEW_IMPL(PDPersonDao, initWithOrgGreenrobotGreendaoInternalDaoConfig_, config)
}

PDPersonDao *create_PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoInternalDaoConfig *config) {
  J2OBJC_CREATE_IMPL(PDPersonDao, initWithOrgGreenrobotGreendaoInternalDaoConfig_, config)
}

void PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_(PDPersonDao *self, OrgGreenrobotGreendaoInternalDaoConfig *config, PDDaoSession *daoSession) {
  OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withOrgGreenrobotGreendaoAbstractDaoSession_(self, config, daoSession);
  JreStrongAssign(&self->daoSession_, daoSession);
}

PDPersonDao *new_PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_(OrgGreenrobotGreendaoInternalDaoConfig *config, PDDaoSession *daoSession) {
  J2OBJC_NEW_IMPL(PDPersonDao, initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_, config, daoSession)
}

PDPersonDao *create_PDPersonDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_(OrgGreenrobotGreendaoInternalDaoConfig *config, PDDaoSession *daoSession) {
  J2OBJC_CREATE_IMPL(PDPersonDao, initWithOrgGreenrobotGreendaoInternalDaoConfig_withPDDaoSession_, config, daoSession)
}

void PDPersonDao_createTableWithOrgGreenrobotGreendaoDatabaseDatabase_withBoolean_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, jboolean ifNotExists) {
  PDPersonDao_initialize();
  NSString *constraint = ifNotExists ? @"IF NOT EXISTS " : @"";
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) execSQLWithNSString:JreStrcat("$$$", @"CREATE TABLE ", constraint, @"\"PERSON\" (\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,\"RECORDED\" INTEGER,\"VAL\" INTEGER NOT NULL ,\"PARTY_ID\" INTEGER NOT NULL );")];
}

void PDPersonDao_dropTableWithOrgGreenrobotGreendaoDatabaseDatabase_withBoolean_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, jboolean ifExists) {
  PDPersonDao_initialize();
  NSString *sql = JreStrcat("$$$", @"DROP TABLE ", (ifExists ? @"IF EXISTS " : @""), @"\"PERSON\"");
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) execSQLWithNSString:sql];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDPersonDao)

J2OBJC_INITIALIZED_DEFN(PDPersonDao_Properties)

OrgGreenrobotGreendaoProperty *PDPersonDao_Properties_Id;
OrgGreenrobotGreendaoProperty *PDPersonDao_Properties_Recorded;
OrgGreenrobotGreendaoProperty *PDPersonDao_Properties_Val;
OrgGreenrobotGreendaoProperty *PDPersonDao_Properties_PartyId;

@implementation PDPersonDao_Properties

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PDPersonDao_Properties_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Id", "LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "Recorded", "LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "Val", "LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "PartyId", "LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { &PDPersonDao_Properties_Id, &PDPersonDao_Properties_Recorded, &PDPersonDao_Properties_Val, &PDPersonDao_Properties_PartyId, "LPDPersonDao;" };
  static const J2ObjcClassInfo _PDPersonDao_Properties = { "Properties", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x9, 1, 4, 4, -1, -1, -1, -1 };
  return &_PDPersonDao_Properties;
}

+ (void)initialize {
  if (self == [PDPersonDao_Properties class]) {
    JreStrongAssignAndConsume(&PDPersonDao_Properties_Id, new_OrgGreenrobotGreendaoProperty_initWithInt_withIOSClass_withNSString_withBoolean_withNSString_(0, JavaLangLong_class_(), @"id", true, @"_id"));
    JreStrongAssignAndConsume(&PDPersonDao_Properties_Recorded, new_OrgGreenrobotGreendaoProperty_initWithInt_withIOSClass_withNSString_withBoolean_withNSString_(1, JavaUtilDate_class_(), @"recorded", false, @"RECORDED"));
    JreStrongAssignAndConsume(&PDPersonDao_Properties_Val, new_OrgGreenrobotGreendaoProperty_initWithInt_withIOSClass_withNSString_withBoolean_withNSString_(2, [IOSClass shortClass], @"val", false, @"VAL"));
    JreStrongAssignAndConsume(&PDPersonDao_Properties_PartyId, new_OrgGreenrobotGreendaoProperty_initWithInt_withIOSClass_withNSString_withBoolean_withNSString_(3, [IOSClass longClass], @"partyId", false, @"PARTY_ID"));
    J2OBJC_SET_INITIALIZED(PDPersonDao_Properties)
  }
}

@end

void PDPersonDao_Properties_init(PDPersonDao_Properties *self) {
  NSObject_init(self);
}

PDPersonDao_Properties *new_PDPersonDao_Properties_init() {
  J2OBJC_NEW_IMPL(PDPersonDao_Properties, init)
}

PDPersonDao_Properties *create_PDPersonDao_Properties_init() {
  J2OBJC_CREATE_IMPL(PDPersonDao_Properties, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDPersonDao_Properties)
