//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDAutoValue_Party.h"
#include "PDParty.h"
#include "java/lang/NullPointerException.h"

@interface PDAutoValue_Party () {
 @public
  jlong id__;
  NSString *name_;
  jlong created_;
}

@end

J2OBJC_FIELD_SETTER(PDAutoValue_Party, name_, NSString *)

@implementation PDAutoValue_Party

- (instancetype)initWithLong:(jlong)id_
                withNSString:(NSString *)name
                    withLong:(jlong)created {
  PDAutoValue_Party_initWithLong_withNSString_withLong_(self, id_, name, created);
  return self;
}

- (jlong)id__ {
  return id__;
}

- (NSString *)name {
  return name_;
}

- (jlong)created {
  return created_;
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if ([o isKindOfClass:[PDParty class]]) {
    PDParty *that = (PDParty *) cast_chk(o, [PDParty class]);
    return (self->id__ == [((PDParty *) nil_chk(that)) id__]) && ([((NSString *) nil_chk(self->name_)) isEqual:[that name]]) && (self->created_ == [that created]);
  }
  return false;
}

- (NSUInteger)hash {
  jint h = 1;
  h *= 1000003;
  h ^= (JreURShift64(self->id__, 32)) ^ self->id__;
  h *= 1000003;
  h ^= ((jint) [((NSString *) nil_chk(self->name_)) hash]);
  h *= 1000003;
  h ^= (JreURShift64(self->created_, 32)) ^ self->created_;
  return h;
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withNSString:withLong:);
  methods[1].selector = @selector(id__);
  methods[2].selector = @selector(name);
  methods[3].selector = @selector(created);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "J", .constantValue.asLong = 0, 0x12, 1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "created_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLNSString;J", "id", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _PDAutoValue_Party = { "AutoValue_Party", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x10, 6, 3, -1, -1, -1, -1, -1 };
  return &_PDAutoValue_Party;
}

@end

void PDAutoValue_Party_initWithLong_withNSString_withLong_(PDAutoValue_Party *self, jlong id_, NSString *name, jlong created) {
  PDParty_init(self);
  self->id__ = id_;
  if (name == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Null name");
  }
  JreStrongAssign(&self->name_, name);
  self->created_ = created;
}

PDAutoValue_Party *new_PDAutoValue_Party_initWithLong_withNSString_withLong_(jlong id_, NSString *name, jlong created) {
  J2OBJC_NEW_IMPL(PDAutoValue_Party, initWithLong_withNSString_withLong_, id_, name, created)
}

PDAutoValue_Party *create_PDAutoValue_Party_initWithLong_withNSString_withLong_(jlong id_, NSString *name, jlong created) {
  J2OBJC_CREATE_IMPL(PDAutoValue_Party, initWithLong_withNSString_withLong_, id_, name, created)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDAutoValue_Party)
