//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDaoLog.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoDbUtils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"

@implementation OrgGreenrobotGreendaoDbUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoDbUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)executeSqlStatementsInTxWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                                        withNSStringArray:(IOSObjectArray *)statements {
  return OrgGreenrobotGreendaoDbUtils_executeSqlStatementsInTxWithOrgGreenrobotGreendaoDatabaseDatabase_withNSStringArray_(db, statements);
}

+ (jint)executeSqlStatementsWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                                    withNSStringArray:(IOSObjectArray *)statements {
  return OrgGreenrobotGreendaoDbUtils_executeSqlStatementsWithOrgGreenrobotGreendaoDatabaseDatabase_withNSStringArray_(db, statements);
}

+ (jint)copyAllBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OrgGreenrobotGreendaoDbUtils_copyAllBytesWithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (IOSByteArray *)readAllBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OrgGreenrobotGreendaoDbUtils_readAllBytesWithJavaIoInputStream_(inArg);
}

+ (void)logTableDumpWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)tablename {
  OrgGreenrobotGreendaoDbUtils_logTableDumpWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, tablename);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeSqlStatementsInTxWithOrgGreenrobotGreendaoDatabaseDatabase:withNSStringArray:);
  methods[2].selector = @selector(executeSqlStatementsWithOrgGreenrobotGreendaoDatabaseDatabase:withNSStringArray:);
  methods[3].selector = @selector(copyAllBytesWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[4].selector = @selector(readAllBytesWithJavaIoInputStream:);
  methods[5].selector = @selector(logTableDumpWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "executeSqlStatementsInTx", "LOrgGreenrobotGreendaoDatabaseDatabase;[LNSString;", "executeSqlStatements", "copyAllBytes", "LJavaIoInputStream;LJavaIoOutputStream;", "LJavaIoIOException;", "readAllBytes", "LJavaIoInputStream;", "logTableDump", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoDbUtils = { "DbUtils", "org.greenrobot.greendao", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoDbUtils;
}

@end

void OrgGreenrobotGreendaoDbUtils_init(OrgGreenrobotGreendaoDbUtils *self) {
  NSObject_init(self);
}

OrgGreenrobotGreendaoDbUtils *new_OrgGreenrobotGreendaoDbUtils_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoDbUtils, init)
}

OrgGreenrobotGreendaoDbUtils *create_OrgGreenrobotGreendaoDbUtils_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoDbUtils, init)
}

jint OrgGreenrobotGreendaoDbUtils_executeSqlStatementsInTxWithOrgGreenrobotGreendaoDatabaseDatabase_withNSStringArray_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, IOSObjectArray *statements) {
  OrgGreenrobotGreendaoDbUtils_initialize();
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) beginTransaction];
  @try {
    jint count = OrgGreenrobotGreendaoDbUtils_executeSqlStatementsWithOrgGreenrobotGreendaoDatabaseDatabase_withNSStringArray_(db, statements);
    [db setTransactionSuccessful];
    return count;
  }
  @finally {
    [db endTransaction];
  }
}

jint OrgGreenrobotGreendaoDbUtils_executeSqlStatementsWithOrgGreenrobotGreendaoDatabaseDatabase_withNSStringArray_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, IOSObjectArray *statements) {
  OrgGreenrobotGreendaoDbUtils_initialize();
  jint count = 0;
  {
    IOSObjectArray *a__ = statements;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *line = *b__++;
      line = [((NSString *) nil_chk(line)) java_trim];
      if ([((NSString *) nil_chk(line)) java_length] > 0) {
        [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) execSQLWithNSString:line];
        count++;
      }
    }
  }
  return count;
}

jint OrgGreenrobotGreendaoDbUtils_copyAllBytesWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  OrgGreenrobotGreendaoDbUtils_initialize();
  jint byteCount = 0;
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:4096];
  while (true) {
    jint read = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buffer];
    if (read == -1) {
      break;
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:read];
    byteCount += read;
  }
  return byteCount;
}

IOSByteArray *OrgGreenrobotGreendaoDbUtils_readAllBytesWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OrgGreenrobotGreendaoDbUtils_initialize();
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_init();
  OrgGreenrobotGreendaoDbUtils_copyAllBytesWithJavaIoInputStream_withJavaIoOutputStream_(inArg, out);
  return [out toByteArray];
}

void OrgGreenrobotGreendaoDbUtils_logTableDumpWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tablename) {
  OrgGreenrobotGreendaoDbUtils_initialize();
  id<AndroidDatabaseCursor> cursor = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) queryWithNSString:tablename withNSStringArray:nil withNSString:nil withNSStringArray:nil withNSString:nil withNSString:nil withNSString:nil];
  @try {
    NSString *dump = AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(cursor);
    OrgGreenrobotGreendaoDaoLog_dWithNSString_(dump);
  }
  @finally {
    [((id<AndroidDatabaseCursor>) nil_chk(cursor)) close];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoDbUtils)
