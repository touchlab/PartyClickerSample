//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCrossProcessCursor.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoAbstractDaoSession.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoDaoLog.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoDatabaseDatabaseStatement.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScope.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong.h"
#include "OrgGreenrobotGreendaoInternalDaoConfig.h"
#include "OrgGreenrobotGreendaoInternalFastCursor.h"
#include "OrgGreenrobotGreendaoInternalTableStatements.h"
#include "OrgGreenrobotGreendaoProperty.h"
#include "OrgGreenrobotGreendaoQueryQuery.h"
#include "OrgGreenrobotGreendaoQueryQueryBuilder.h"
#include "OrgGreenrobotGreendaoRxRxDao.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface OrgGreenrobotGreendaoAbstractDao () {
 @public
  volatile_id rxDao_;
  volatile_id rxDaoPlain_;
}

- (void)executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                                                       withJavaLangIterable:(id<JavaLangIterable>)entities
                                                                withBoolean:(jboolean)setPrimaryKey;

- (jlong)executeInsertWithId:(id)entity
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                 withBoolean:(jboolean)setKeyAndAttach;

- (jlong)insertInsideTxWithId:(id)entity
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt;

- (void)loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                             withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                            withJavaUtilList:(id<JavaUtilList>)list;

- (AndroidDatabaseCursorWindow *)moveToNextUnlockedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

- (void)deleteByKeyInsideSynchronizedWithId:(id)key
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt;

- (void)deleteInTxInternalWithJavaLangIterable:(id<JavaLangIterable>)entities
                          withJavaLangIterable:(id<JavaLangIterable>)keys;

@end

J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDao, rxDao_, OrgGreenrobotGreendaoRxRxDao *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDao, rxDaoPlain_, OrgGreenrobotGreendaoRxRxDao *)

__attribute__((unused)) static void OrgGreenrobotGreendaoAbstractDao_executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement_withJavaLangIterable_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt, id<JavaLangIterable> entities, jboolean setPrimaryKey);

__attribute__((unused)) static jlong OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id entity, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt, jboolean setKeyAndAttach);

__attribute__((unused)) static jlong OrgGreenrobotGreendaoAbstractDao_insertInsideTxWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(OrgGreenrobotGreendaoAbstractDao *self, id entity, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt);

__attribute__((unused)) static void OrgGreenrobotGreendaoAbstractDao_loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor_withAndroidDatabaseCursorWindow_withJavaUtilList_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor, AndroidDatabaseCursorWindow *window, id<JavaUtilList> list);

__attribute__((unused)) static AndroidDatabaseCursorWindow *OrgGreenrobotGreendaoAbstractDao_moveToNextUnlockedWithAndroidDatabaseCursor_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor);

__attribute__((unused)) static id OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor, jint offset, jboolean lock);

__attribute__((unused)) static void OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(OrgGreenrobotGreendaoAbstractDao *self, id key, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt);

__attribute__((unused)) static void OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(OrgGreenrobotGreendaoAbstractDao *self, id<JavaLangIterable> entities, id<JavaLangIterable> keys);

__attribute__((unused)) static void OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id key, id entity, jboolean lock);

@implementation OrgGreenrobotGreendaoAbstractDao

- (instancetype)initWithOrgGreenrobotGreendaoInternalDaoConfig:(OrgGreenrobotGreendaoInternalDaoConfig *)config {
  OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(self, config);
  return self;
}

- (instancetype)initWithOrgGreenrobotGreendaoInternalDaoConfig:(OrgGreenrobotGreendaoInternalDaoConfig *)config
                   withOrgGreenrobotGreendaoAbstractDaoSession:(OrgGreenrobotGreendaoAbstractDaoSession *)daoSession {
  OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withOrgGreenrobotGreendaoAbstractDaoSession_(self, config, daoSession);
  return self;
}

- (OrgGreenrobotGreendaoAbstractDaoSession *)getSession {
  return session_;
}

- (OrgGreenrobotGreendaoInternalTableStatements *)getStatements {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->statements_;
}

- (NSString *)getTablename {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->tablename_;
}

- (IOSObjectArray *)getProperties {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->properties_;
}

- (OrgGreenrobotGreendaoProperty *)getPkProperty {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->pkProperty_;
}

- (IOSObjectArray *)getAllColumns {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->allColumns_;
}

- (IOSObjectArray *)getPkColumns {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->pkColumns_;
}

- (IOSObjectArray *)getNonPkColumns {
  return ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->nonPkColumns_;
}

- (id)load__WithId:(id)key {
  [self assertSinglePk];
  if (key == nil) {
    return nil;
  }
  if (identityScope_ != nil) {
    id entity = [identityScope_ getWithId:key];
    if (entity != nil) {
      return entity;
    }
  }
  NSString *sql = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectByKey];
  IOSObjectArray *keyArray = [IOSObjectArray arrayWithObjects:(id[]){ [key description] } count:1 type:NSString_class_()];
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:sql withNSStringArray:keyArray];
  return [self loadUniqueAndCloseCursorWithAndroidDatabaseCursor:cursor];
}

- (id)loadByRowIdWithLong:(jlong)rowId {
  IOSObjectArray *idArray = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_toStringWithLong_(rowId) } count:1 type:NSString_class_()];
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:[((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectByRowId] withNSStringArray:idArray];
  return [self loadUniqueAndCloseCursorWithAndroidDatabaseCursor:cursor];
}

- (id)loadUniqueAndCloseCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  @try {
    return [self loadUniqueWithAndroidDatabaseCursor:cursor];
  }
  @finally {
    [((id<AndroidDatabaseCursor>) nil_chk(cursor)) close];
  }
}

- (id)loadUniqueWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  jboolean available = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
  if (!available) {
    return nil;
  }
  else if (![cursor isLast]) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("$I", @"Expected unique result, but count was ", [cursor getCount]));
  }
  return OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(self, cursor, 0, true);
}

- (id<JavaUtilList>)loadAll {
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:[((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectAll] withNSStringArray:nil];
  return [self loadAllAndCloseCursorWithAndroidDatabaseCursor:cursor];
}

- (jboolean)detachWithId:(id)entity {
  if (identityScope_ != nil) {
    id key = [self getKeyVerifiedWithId:entity];
    return [identityScope_ detachWithId:key withId:entity];
  }
  else {
    return false;
  }
}

- (void)detachAll {
  if (identityScope_ != nil) {
    [identityScope_ clear];
  }
}

- (id<JavaUtilList>)loadAllAndCloseCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  @try {
    return [self loadAllFromCursorWithAndroidDatabaseCursor:cursor];
  }
  @finally {
    [((id<AndroidDatabaseCursor>) nil_chk(cursor)) close];
  }
}

- (void)insertInTxWithJavaLangIterable:(id<JavaLangIterable>)entities {
  [self insertInTxWithJavaLangIterable:entities withBoolean:[self isEntityUpdateable]];
}

- (void)insertInTxWithNSObjectArray:(IOSObjectArray *)entities {
  [self insertInTxWithJavaLangIterable:JavaUtilArrays_asListWithNSObjectArray_(entities) withBoolean:[self isEntityUpdateable]];
}

- (void)insertInTxWithJavaLangIterable:(id<JavaLangIterable>)entities
                           withBoolean:(jboolean)setPrimaryKey {
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getInsertStatement];
  OrgGreenrobotGreendaoAbstractDao_executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement_withJavaLangIterable_withBoolean_(self, stmt, entities, setPrimaryKey);
}

- (void)insertOrReplaceInTxWithJavaLangIterable:(id<JavaLangIterable>)entities
                                    withBoolean:(jboolean)setPrimaryKey {
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getInsertOrReplaceStatement];
  OrgGreenrobotGreendaoAbstractDao_executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement_withJavaLangIterable_withBoolean_(self, stmt, entities, setPrimaryKey);
}

- (void)insertOrReplaceInTxWithJavaLangIterable:(id<JavaLangIterable>)entities {
  [self insertOrReplaceInTxWithJavaLangIterable:entities withBoolean:[self isEntityUpdateable]];
}

- (void)insertOrReplaceInTxWithNSObjectArray:(IOSObjectArray *)entities {
  [self insertOrReplaceInTxWithJavaLangIterable:JavaUtilArrays_asListWithNSObjectArray_(entities) withBoolean:[self isEntityUpdateable]];
}

- (void)executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                                                       withJavaLangIterable:(id<JavaLangIterable>)entities
                                                                withBoolean:(jboolean)setPrimaryKey {
  OrgGreenrobotGreendaoAbstractDao_executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement_withJavaLangIterable_withBoolean_(self, stmt, entities, setPrimaryKey);
}

- (jlong)insertWithId:(id)entity {
  return OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(self, entity, [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getInsertStatement], true);
}

- (jlong)insertWithoutSettingPkWithId:(id)entity {
  return OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(self, entity, [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getInsertOrReplaceStatement], false);
}

- (jlong)insertOrReplaceWithId:(id)entity {
  return OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(self, entity, [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getInsertOrReplaceStatement], true);
}

- (jlong)executeInsertWithId:(id)entity
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                 withBoolean:(jboolean)setKeyAndAttach {
  return OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(self, entity, stmt, setKeyAndAttach);
}

- (jlong)insertInsideTxWithId:(id)entity
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt {
  return OrgGreenrobotGreendaoAbstractDao_insertInsideTxWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, entity, stmt);
}

- (void)updateKeyAfterInsertAndAttachWithId:(id)entity
                                   withLong:(jlong)rowId
                                withBoolean:(jboolean)lock {
  if (rowId != -1) {
    id key = [self updateKeyAfterInsertWithId:entity withLong:rowId];
    OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, lock);
  }
  else {
    OrgGreenrobotGreendaoDaoLog_wWithNSString_(@"Could not insert row (executeInsert returned -1)");
  }
}

- (void)saveWithId:(id)entity {
  if ([self hasKeyWithId:entity]) {
    [self updateWithId:entity];
  }
  else {
    [self insertWithId:entity];
  }
}

- (void)saveInTxWithNSObjectArray:(IOSObjectArray *)entities {
  [self saveInTxWithJavaLangIterable:JavaUtilArrays_asListWithNSObjectArray_(entities)];
}

- (void)saveInTxWithJavaLangIterable:(id<JavaLangIterable>)entities {
  jint updateCount = 0;
  jint insertCount = 0;
  for (id __strong entity in nil_chk(entities)) {
    if ([self hasKeyWithId:entity]) {
      updateCount++;
    }
    else {
      insertCount++;
    }
  }
  if (updateCount > 0 && insertCount > 0) {
    id<JavaUtilList> toUpdate = create_JavaUtilArrayList_initWithInt_(updateCount);
    id<JavaUtilList> toInsert = create_JavaUtilArrayList_initWithInt_(insertCount);
    for (id __strong entity in entities) {
      if ([self hasKeyWithId:entity]) {
        [toUpdate addWithId:entity];
      }
      else {
        [toInsert addWithId:entity];
      }
    }
    [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) beginTransaction];
    @try {
      [self updateInTxWithJavaLangIterable:toUpdate];
      [self insertInTxWithJavaLangIterable:toInsert];
      [db_ setTransactionSuccessful];
    }
    @finally {
      [db_ endTransaction];
    }
  }
  else if (insertCount > 0) {
    [self insertInTxWithJavaLangIterable:entities];
  }
  else if (updateCount > 0) {
    [self updateInTxWithJavaLangIterable:entities];
  }
}

- (id<JavaUtilList>)loadAllFromCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  jint count = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getCount];
  if (count == 0) {
    return create_JavaUtilArrayList_init();
  }
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(count);
  AndroidDatabaseCursorWindow *window = nil;
  jboolean useFastCursor = false;
  if ([AndroidDatabaseCrossProcessCursor_class_() isInstance:cursor]) {
    window = [((id<AndroidDatabaseCrossProcessCursor>) cast_check(cursor, AndroidDatabaseCrossProcessCursor_class_())) getWindow];
    if (window != nil) {
      if ([window getNumRows] == count) {
        cursor = create_OrgGreenrobotGreendaoInternalFastCursor_initWithAndroidDatabaseCursorWindow_(window);
        useFastCursor = true;
      }
      else {
        OrgGreenrobotGreendaoDaoLog_dWithNSString_(JreStrcat("$ICI", @"Window vs. result size: ", [window getNumRows], '/', count));
      }
    }
  }
  if ([cursor moveToFirst]) {
    if (identityScope_ != nil) {
      [identityScope_ lock];
      [identityScope_ reserveRoomWithInt:count];
    }
    @try {
      if (!useFastCursor && window != nil && identityScope_ != nil) {
        OrgGreenrobotGreendaoAbstractDao_loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor_withAndroidDatabaseCursorWindow_withJavaUtilList_(self, cursor, window, list);
      }
      else {
        do {
          [list addWithId:OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(self, cursor, 0, false)];
        }
        while ([cursor moveToNext]);
      }
    }
    @finally {
      if (identityScope_ != nil) {
        [identityScope_ unlock];
      }
    }
  }
  return list;
}

- (void)loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                             withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                            withJavaUtilList:(id<JavaUtilList>)list {
  OrgGreenrobotGreendaoAbstractDao_loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor_withAndroidDatabaseCursorWindow_withJavaUtilList_(self, cursor, window, list);
}

- (AndroidDatabaseCursorWindow *)moveToNextUnlockedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return OrgGreenrobotGreendaoAbstractDao_moveToNextUnlockedWithAndroidDatabaseCursor_(self, cursor);
}

- (id)loadCurrentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                   withInt:(jint)offset
                               withBoolean:(jboolean)lock {
  return OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(self, cursor, offset, lock);
}

- (id)loadCurrentOtherWithOrgGreenrobotGreendaoAbstractDao:(OrgGreenrobotGreendaoAbstractDao *)dao
                                 withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                   withInt:(jint)offset {
  return OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(nil_chk(dao), cursor, offset, true);
}

- (id<JavaUtilList>)queryRawWithNSString:(NSString *)where
                       withNSStringArray:(IOSObjectArray *)selectionArg {
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:JreStrcat("$$", [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectAll], where) withNSStringArray:selectionArg];
  return [self loadAllAndCloseCursorWithAndroidDatabaseCursor:cursor];
}

- (OrgGreenrobotGreendaoQueryQuery *)queryRawCreateWithNSString:(NSString *)where
                                              withNSObjectArray:(IOSObjectArray *)selectionArg {
  id<JavaUtilList> argList = JavaUtilArrays_asListWithNSObjectArray_(selectionArg);
  return [self queryRawCreateListArgsWithNSString:where withJavaUtilCollection:argList];
}

- (OrgGreenrobotGreendaoQueryQuery *)queryRawCreateListArgsWithNSString:(NSString *)where
                                                 withJavaUtilCollection:(id<JavaUtilCollection>)selectionArg {
  return OrgGreenrobotGreendaoQueryQuery_internalCreateWithOrgGreenrobotGreendaoAbstractDao_withNSString_withNSObjectArray_(self, JreStrcat("$$", [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectAll], where), [((id<JavaUtilCollection>) nil_chk(selectionArg)) toArray]);
}

- (void)deleteAll {
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) execSQLWithNSString:JreStrcat("$$C", @"DELETE FROM '", ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->tablename_, '\'')];
  if (identityScope_ != nil) {
    [identityScope_ clear];
  }
}

- (void)delete__WithId:(id)entity {
  [self assertSinglePk];
  id key = [self getKeyVerifiedWithId:entity];
  [self deleteByKeyWithId:key];
}

- (void)deleteByKeyWithId:(id)key {
  [self assertSinglePk];
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getDeleteStatement];
  if ([((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) isDbLockedByCurrentThread]) {
    @synchronized(stmt) {
      OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, key, stmt);
    }
  }
  else {
    [db_ beginTransaction];
    @try {
      @synchronized(stmt) {
        OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, key, stmt);
      }
      [db_ setTransactionSuccessful];
    }
    @finally {
      [db_ endTransaction];
    }
  }
  if (identityScope_ != nil) {
    [identityScope_ removeWithId:key];
  }
}

- (void)deleteByKeyInsideSynchronizedWithId:(id)key
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt {
  OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, key, stmt);
}

- (void)deleteInTxInternalWithJavaLangIterable:(id<JavaLangIterable>)entities
                          withJavaLangIterable:(id<JavaLangIterable>)keys {
  OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(self, entities, keys);
}

- (void)deleteInTxWithJavaLangIterable:(id<JavaLangIterable>)entities {
  OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(self, entities, nil);
}

- (void)deleteInTxWithNSObjectArray:(IOSObjectArray *)entities {
  OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(self, JavaUtilArrays_asListWithNSObjectArray_(entities), nil);
}

- (void)deleteByKeyInTxWithJavaLangIterable:(id<JavaLangIterable>)keys {
  OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(self, nil, keys);
}

- (void)deleteByKeyInTxWithNSObjectArray:(IOSObjectArray *)keys {
  OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(self, nil, JavaUtilArrays_asListWithNSObjectArray_(keys));
}

- (void)refreshWithId:(id)entity {
  [self assertSinglePk];
  id key = [self getKeyVerifiedWithId:entity];
  NSString *sql = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getSelectByKey];
  IOSObjectArray *keyArray = [IOSObjectArray arrayWithObjects:(id[]){ [nil_chk(key) description] } count:1 type:NSString_class_()];
  id<AndroidDatabaseCursor> cursor = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) rawQueryWithNSString:sql withNSStringArray:keyArray];
  @try {
    jboolean available = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
    if (!available) {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("$@$@", @"Entity does not exist in the database anymore: ", [nil_chk(entity) java_getClass], @" with key ", key));
    }
    else if (![cursor isLast]) {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("$I", @"Expected unique result, but count was ", [cursor getCount]));
    }
    [self readEntityWithAndroidDatabaseCursor:cursor withId:entity withInt:0];
    OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, true);
  }
  @finally {
    [cursor close];
  }
}

- (void)updateWithId:(id)entity {
  [self assertSinglePk];
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getUpdateStatement];
  if ([((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) isDbLockedByCurrentThread]) {
    @synchronized(stmt) {
      if (isStandardSQLite_) {
        [self updateInsideSynchronizedWithId:entity withAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *) cast_chk([((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) getRawStatement], [AndroidDatabaseSqliteSQLiteStatement class]) withBoolean:true];
      }
      else {
        [self updateInsideSynchronizedWithId:entity withOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withBoolean:true];
      }
    }
  }
  else {
    [db_ beginTransaction];
    @try {
      @synchronized(stmt) {
        [self updateInsideSynchronizedWithId:entity withOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withBoolean:true];
      }
      [db_ setTransactionSuccessful];
    }
    @finally {
      [db_ endTransaction];
    }
  }
}

- (OrgGreenrobotGreendaoQueryQueryBuilder *)queryBuilder {
  return OrgGreenrobotGreendaoQueryQueryBuilder_internalCreateWithOrgGreenrobotGreendaoAbstractDao_(self);
}

- (void)updateInsideSynchronizedWithId:(id)entity
withOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                           withBoolean:(jboolean)lock {
  [self bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withId:entity];
  jint index = ((IOSObjectArray *) nil_chk(((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->allColumns_))->size_ + 1;
  id key = [self getKeyWithId:entity];
  if ([key isKindOfClass:[JavaLangLong class]]) {
    [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) bindLongWithInt:index withLong:[((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(key, [JavaLangLong class]))) longLongValue]];
  }
  else if (key == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Cannot update entity without key - was it inserted before?");
  }
  else {
    [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) bindStringWithInt:index withNSString:[key description]];
  }
  [stmt execute];
  OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, lock);
}

- (void)updateInsideSynchronizedWithId:(id)entity
withAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)stmt
                           withBoolean:(jboolean)lock {
  [self bindValuesWithAndroidDatabaseSqliteSQLiteStatement:stmt withId:entity];
  jint index = ((IOSObjectArray *) nil_chk(((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->allColumns_))->size_ + 1;
  id key = [self getKeyWithId:entity];
  if ([key isKindOfClass:[JavaLangLong class]]) {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt)) bindLongWithInt:index withLong:[((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(key, [JavaLangLong class]))) longLongValue]];
  }
  else if (key == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Cannot update entity without key - was it inserted before?");
  }
  else {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt)) bindStringWithInt:index withNSString:[key description]];
  }
  [stmt execute];
  OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, lock);
}

- (void)attachEntityWithId:(id)key
                    withId:(id)entity
               withBoolean:(jboolean)lock {
  OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, lock);
}

- (void)attachEntityWithId:(id)entity {
}

- (void)updateInTxWithJavaLangIterable:(id<JavaLangIterable>)entities {
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getUpdateStatement];
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) beginTransaction];
  JavaLangRuntimeException *txEx = nil;
  @try {
    @synchronized(stmt) {
      if (identityScope_ != nil) {
        [identityScope_ lock];
      }
      @try {
        if (isStandardSQLite_) {
          AndroidDatabaseSqliteSQLiteStatement *rawStmt = (AndroidDatabaseSqliteSQLiteStatement *) cast_chk([((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) getRawStatement], [AndroidDatabaseSqliteSQLiteStatement class]);
          for (id __strong entity in nil_chk(entities)) {
            [self updateInsideSynchronizedWithId:entity withAndroidDatabaseSqliteSQLiteStatement:rawStmt withBoolean:false];
          }
        }
        else {
          for (id __strong entity in nil_chk(entities)) {
            [self updateInsideSynchronizedWithId:entity withOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withBoolean:false];
          }
        }
      }
      @finally {
        if (identityScope_ != nil) {
          [identityScope_ unlock];
        }
      }
    }
    [db_ setTransactionSuccessful];
  }
  @catch (JavaLangRuntimeException *e) {
    txEx = e;
  }
  @finally {
    @try {
      [db_ endTransaction];
    }
    @catch (JavaLangRuntimeException *e) {
      if (txEx != nil) {
        OrgGreenrobotGreendaoDaoLog_wWithNSString_withNSException_(@"Could not end transaction (rethrowing initial exception)", e);
        @throw txEx;
      }
      else {
        @throw e;
      }
    }
  }
  if (txEx != nil) {
    @throw txEx;
  }
}

- (void)updateInTxWithNSObjectArray:(IOSObjectArray *)entities {
  [self updateInTxWithJavaLangIterable:JavaUtilArrays_asListWithNSObjectArray_(entities)];
}

- (void)assertSinglePk {
  if (((IOSObjectArray *) nil_chk(((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config_))->pkColumns_))->size_ != 1) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("@$$$", self, @" (", config_->tablename_, @") does not have a single-column primary key"));
  }
}

- (jlong)count {
  return [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk([((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(statements_)) getCountStatement])) simpleQueryForLong];
}

- (id)getKeyVerifiedWithId:(id)entity {
  id key = [self getKeyWithId:entity];
  if (key == nil) {
    if (entity == nil) {
      @throw create_JavaLangNullPointerException_initWithNSString_(@"Entity may not be null");
    }
    else {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Entity has no key");
    }
  }
  else {
    return key;
  }
}

- (OrgGreenrobotGreendaoRxRxDao *)rxPlain {
  if (JreLoadVolatileId(&rxDaoPlain_) == nil) {
    JreVolatileStrongAssign(&rxDaoPlain_, create_OrgGreenrobotGreendaoRxRxDao_initWithOrgGreenrobotGreendaoAbstractDao_(self));
  }
  return JreLoadVolatileId(&rxDaoPlain_);
}

- (OrgGreenrobotGreendaoRxRxDao *)rx {
  if (JreLoadVolatileId(&rxDao_) == nil) {
    JreVolatileStrongAssign(&rxDao_, create_OrgGreenrobotGreendaoRxRxDao_initWithOrgGreenrobotGreendaoAbstractDao_withRxScheduler_(self, RxSchedulersSchedulers_io()));
  }
  return JreLoadVolatileId(&rxDao_);
}

- (id<OrgGreenrobotGreendaoDatabaseDatabase>)getDatabase {
  return db_;
}

- (id)readEntityWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                  withInt:(jint)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)readKeyWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                               withInt:(jint)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)readEntityWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withId:(id)entity
                                    withInt:(jint)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:(id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)stmt
                                                              withId:(id)entity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bindValuesWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)stmt
                                                    withId:(id)entity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)updateKeyAfterInsertWithId:(id)entity
                        withLong:(jlong)rowId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getKeyWithId:(id)entity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasKeyWithId:(id)entity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEntityUpdateable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)__javaClone:(OrgGreenrobotGreendaoAbstractDao *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&rxDao_, &original->rxDao_);
  JreCloneVolatileStrong(&rxDaoPlain_, &original->rxDaoPlain_);
}

- (void)dealloc {
  RELEASE_(config_);
  RELEASE_(db_);
  RELEASE_(identityScope_);
  RELEASE_(identityScopeLong_);
  RELEASE_(statements_);
  RELEASE_(session_);
  JreReleaseVolatile(&rxDao_);
  JreReleaseVolatile(&rxDaoPlain_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAbstractDaoSession;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoInternalTableStatements;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgGreenrobotGreendaoProperty;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoProperty;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x4, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x4, 11, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, 13, 3, -1, 14, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 15, 9, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x81, 17, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 17, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x81, 24, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, 27, -1, -1 },
    { NULL, "J", 0x1, 28, 3, -1, 29, -1, -1 },
    { NULL, "J", 0x1, 30, 3, -1, 29, -1, -1 },
    { NULL, "J", 0x1, 31, 3, -1, 29, -1, -1 },
    { NULL, "J", 0x2, 32, 33, -1, 34, -1, -1 },
    { NULL, "J", 0x2, 35, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x4, 38, 39, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 3, -1, 42, -1, -1 },
    { NULL, "V", 0x81, 43, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 43, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 44, 9, -1, 16, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, 47, -1, -1 },
    { NULL, "LAndroidDatabaseCursorWindow;", 0x2, 48, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x14, 49, 50, -1, 51, -1, -1 },
    { NULL, "LNSObject;", 0x14, 52, 53, -1, 54, -1, -1 },
    { NULL, "LJavaUtilList;", 0x81, 55, 56, -1, 57, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryQuery;", 0x81, 58, 59, -1, 60, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryQuery;", 0x1, 61, 62, -1, 63, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 3, -1, 42, -1, -1 },
    { NULL, "V", 0x1, 65, 3, -1, 66, -1, -1 },
    { NULL, "V", 0x2, 67, 36, -1, 68, -1, -1 },
    { NULL, "V", 0x2, 69, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x1, 72, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x81, 72, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 73, 18, -1, 74, -1, -1 },
    { NULL, "V", 0x81, 73, 20, -1, 75, -1, -1 },
    { NULL, "V", 0x1, 76, 3, -1, 42, -1, -1 },
    { NULL, "V", 0x1, 77, 3, -1, 42, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryQueryBuilder;", 0x1, -1, -1, -1, 78, -1, -1 },
    { NULL, "V", 0x4, 79, 33, -1, 80, -1, -1 },
    { NULL, "V", 0x4, 79, 81, -1, 82, -1, -1 },
    { NULL, "V", 0x14, 83, 84, -1, 85, -1, -1 },
    { NULL, "V", 0x4, 83, 3, -1, 42, -1, -1 },
    { NULL, "V", 0x1, 86, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x81, 86, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 87, 3, -1, 88, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoRxRxDao;", 0x1, -1, -1, -1, 89, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoRxRxDao;", 0x1, -1, -1, -1, 89, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 90, 91, -1, 92, -1, -1 },
    { NULL, "LNSObject;", 0x404, 93, 91, -1, 94, -1, -1 },
    { NULL, "V", 0x404, 90, 95, -1, 96, -1, -1 },
    { NULL, "V", 0x404, 97, 98, -1, 99, -1, -1 },
    { NULL, "V", 0x404, 97, 100, -1, 101, -1, -1 },
    { NULL, "LNSObject;", 0x404, 102, 103, -1, 104, -1, -1 },
    { NULL, "LNSObject;", 0x404, 105, 3, -1, 88, -1, -1 },
    { NULL, "Z", 0x404, 106, 3, -1, 14, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoInternalDaoConfig:);
  methods[1].selector = @selector(initWithOrgGreenrobotGreendaoInternalDaoConfig:withOrgGreenrobotGreendaoAbstractDaoSession:);
  methods[2].selector = @selector(getSession);
  methods[3].selector = @selector(getStatements);
  methods[4].selector = @selector(getTablename);
  methods[5].selector = @selector(getProperties);
  methods[6].selector = @selector(getPkProperty);
  methods[7].selector = @selector(getAllColumns);
  methods[8].selector = @selector(getPkColumns);
  methods[9].selector = @selector(getNonPkColumns);
  methods[10].selector = @selector(load__WithId:);
  methods[11].selector = @selector(loadByRowIdWithLong:);
  methods[12].selector = @selector(loadUniqueAndCloseCursorWithAndroidDatabaseCursor:);
  methods[13].selector = @selector(loadUniqueWithAndroidDatabaseCursor:);
  methods[14].selector = @selector(loadAll);
  methods[15].selector = @selector(detachWithId:);
  methods[16].selector = @selector(detachAll);
  methods[17].selector = @selector(loadAllAndCloseCursorWithAndroidDatabaseCursor:);
  methods[18].selector = @selector(insertInTxWithJavaLangIterable:);
  methods[19].selector = @selector(insertInTxWithNSObjectArray:);
  methods[20].selector = @selector(insertInTxWithJavaLangIterable:withBoolean:);
  methods[21].selector = @selector(insertOrReplaceInTxWithJavaLangIterable:withBoolean:);
  methods[22].selector = @selector(insertOrReplaceInTxWithJavaLangIterable:);
  methods[23].selector = @selector(insertOrReplaceInTxWithNSObjectArray:);
  methods[24].selector = @selector(executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:withJavaLangIterable:withBoolean:);
  methods[25].selector = @selector(insertWithId:);
  methods[26].selector = @selector(insertWithoutSettingPkWithId:);
  methods[27].selector = @selector(insertOrReplaceWithId:);
  methods[28].selector = @selector(executeInsertWithId:withOrgGreenrobotGreendaoDatabaseDatabaseStatement:withBoolean:);
  methods[29].selector = @selector(insertInsideTxWithId:withOrgGreenrobotGreendaoDatabaseDatabaseStatement:);
  methods[30].selector = @selector(updateKeyAfterInsertAndAttachWithId:withLong:withBoolean:);
  methods[31].selector = @selector(saveWithId:);
  methods[32].selector = @selector(saveInTxWithNSObjectArray:);
  methods[33].selector = @selector(saveInTxWithJavaLangIterable:);
  methods[34].selector = @selector(loadAllFromCursorWithAndroidDatabaseCursor:);
  methods[35].selector = @selector(loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor:withAndroidDatabaseCursorWindow:withJavaUtilList:);
  methods[36].selector = @selector(moveToNextUnlockedWithAndroidDatabaseCursor:);
  methods[37].selector = @selector(loadCurrentWithAndroidDatabaseCursor:withInt:withBoolean:);
  methods[38].selector = @selector(loadCurrentOtherWithOrgGreenrobotGreendaoAbstractDao:withAndroidDatabaseCursor:withInt:);
  methods[39].selector = @selector(queryRawWithNSString:withNSStringArray:);
  methods[40].selector = @selector(queryRawCreateWithNSString:withNSObjectArray:);
  methods[41].selector = @selector(queryRawCreateListArgsWithNSString:withJavaUtilCollection:);
  methods[42].selector = @selector(deleteAll);
  methods[43].selector = @selector(delete__WithId:);
  methods[44].selector = @selector(deleteByKeyWithId:);
  methods[45].selector = @selector(deleteByKeyInsideSynchronizedWithId:withOrgGreenrobotGreendaoDatabaseDatabaseStatement:);
  methods[46].selector = @selector(deleteInTxInternalWithJavaLangIterable:withJavaLangIterable:);
  methods[47].selector = @selector(deleteInTxWithJavaLangIterable:);
  methods[48].selector = @selector(deleteInTxWithNSObjectArray:);
  methods[49].selector = @selector(deleteByKeyInTxWithJavaLangIterable:);
  methods[50].selector = @selector(deleteByKeyInTxWithNSObjectArray:);
  methods[51].selector = @selector(refreshWithId:);
  methods[52].selector = @selector(updateWithId:);
  methods[53].selector = @selector(queryBuilder);
  methods[54].selector = @selector(updateInsideSynchronizedWithId:withOrgGreenrobotGreendaoDatabaseDatabaseStatement:withBoolean:);
  methods[55].selector = @selector(updateInsideSynchronizedWithId:withAndroidDatabaseSqliteSQLiteStatement:withBoolean:);
  methods[56].selector = @selector(attachEntityWithId:withId:withBoolean:);
  methods[57].selector = @selector(attachEntityWithId:);
  methods[58].selector = @selector(updateInTxWithJavaLangIterable:);
  methods[59].selector = @selector(updateInTxWithNSObjectArray:);
  methods[60].selector = @selector(assertSinglePk);
  methods[61].selector = @selector(count);
  methods[62].selector = @selector(getKeyVerifiedWithId:);
  methods[63].selector = @selector(rxPlain);
  methods[64].selector = @selector(rx);
  methods[65].selector = @selector(getDatabase);
  methods[66].selector = @selector(readEntityWithAndroidDatabaseCursor:withInt:);
  methods[67].selector = @selector(readKeyWithAndroidDatabaseCursor:withInt:);
  methods[68].selector = @selector(readEntityWithAndroidDatabaseCursor:withId:withInt:);
  methods[69].selector = @selector(bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:withId:);
  methods[70].selector = @selector(bindValuesWithAndroidDatabaseSqliteSQLiteStatement:withId:);
  methods[71].selector = @selector(updateKeyAfterInsertWithId:withLong:);
  methods[72].selector = @selector(getKeyWithId:);
  methods[73].selector = @selector(hasKeyWithId:);
  methods[74].selector = @selector(isEntityUpdateable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "config_", "LOrgGreenrobotGreendaoInternalDaoConfig;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "db_", "LOrgGreenrobotGreendaoDatabaseDatabase;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "isStandardSQLite_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "identityScope_", "LOrgGreenrobotGreendaoIdentityscopeIdentityScope;", .constantValue.asLong = 0, 0x14, -1, -1, 107, -1 },
    { "identityScopeLong_", "LOrgGreenrobotGreendaoIdentityscopeIdentityScopeLong;", .constantValue.asLong = 0, 0x14, -1, -1, 108, -1 },
    { "statements_", "LOrgGreenrobotGreendaoInternalTableStatements;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "session_", "LOrgGreenrobotGreendaoAbstractDaoSession;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "pkOrdinal_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "rxDao_", "LOrgGreenrobotGreendaoRxRxDao;", .constantValue.asLong = 0, 0x42, -1, -1, 109, -1 },
    { "rxDaoPlain_", "LOrgGreenrobotGreendaoRxRxDao;", .constantValue.asLong = 0, 0x42, -1, -1, 109, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoInternalDaoConfig;", "LOrgGreenrobotGreendaoInternalDaoConfig;LOrgGreenrobotGreendaoAbstractDaoSession;", "load", "LNSObject;", "(TK;)TT;", "loadByRowId", "J", "(J)TT;", "loadUniqueAndCloseCursor", "LAndroidDatabaseCursor;", "(Landroid/database/Cursor;)TT;", "loadUnique", "()Ljava/util/List<TT;>;", "detach", "(TT;)Z", "loadAllAndCloseCursor", "(Landroid/database/Cursor;)Ljava/util/List<TT;>;", "insertInTx", "LJavaLangIterable;", "(Ljava/lang/Iterable<TT;>;)V", "[LNSObject;", "([TT;)V", "LJavaLangIterable;Z", "(Ljava/lang/Iterable<TT;>;Z)V", "insertOrReplaceInTx", "executeInsertInTx", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;LJavaLangIterable;Z", "(Lorg/greenrobot/greendao/database/DatabaseStatement;Ljava/lang/Iterable<TT;>;Z)V", "insert", "(TT;)J", "insertWithoutSettingPk", "insertOrReplace", "executeInsert", "LNSObject;LOrgGreenrobotGreendaoDatabaseDatabaseStatement;Z", "(TT;Lorg/greenrobot/greendao/database/DatabaseStatement;Z)J", "insertInsideTx", "LNSObject;LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", "(TT;Lorg/greenrobot/greendao/database/DatabaseStatement;)J", "updateKeyAfterInsertAndAttach", "LNSObject;JZ", "(TT;JZ)V", "save", "(TT;)V", "saveInTx", "loadAllFromCursor", "loadAllUnlockOnWindowBounds", "LAndroidDatabaseCursor;LAndroidDatabaseCursorWindow;LJavaUtilList;", "(Landroid/database/Cursor;Landroid/database/CursorWindow;Ljava/util/List<TT;>;)V", "moveToNextUnlocked", "loadCurrent", "LAndroidDatabaseCursor;IZ", "(Landroid/database/Cursor;IZ)TT;", "loadCurrentOther", "LOrgGreenrobotGreendaoAbstractDao;LAndroidDatabaseCursor;I", "<O:Ljava/lang/Object;>(Lorg/greenrobot/greendao/AbstractDao<TO;*>;Landroid/database/Cursor;I)TO;", "queryRaw", "LNSString;[LNSString;", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List<TT;>;", "queryRawCreate", "LNSString;[LNSObject;", "(Ljava/lang/String;[Ljava/lang/Object;)Lorg/greenrobot/greendao/query/Query<TT;>;", "queryRawCreateListArgs", "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<Ljava/lang/Object;>;)Lorg/greenrobot/greendao/query/Query<TT;>;", "delete", "deleteByKey", "(TK;)V", "deleteByKeyInsideSynchronized", "(TK;Lorg/greenrobot/greendao/database/DatabaseStatement;)V", "deleteInTxInternal", "LJavaLangIterable;LJavaLangIterable;", "(Ljava/lang/Iterable<TT;>;Ljava/lang/Iterable<TK;>;)V", "deleteInTx", "deleteByKeyInTx", "(Ljava/lang/Iterable<TK;>;)V", "([TK;)V", "refresh", "update", "()Lorg/greenrobot/greendao/query/QueryBuilder<TT;>;", "updateInsideSynchronized", "(TT;Lorg/greenrobot/greendao/database/DatabaseStatement;Z)V", "LNSObject;LAndroidDatabaseSqliteSQLiteStatement;Z", "(TT;Landroid/database/sqlite/SQLiteStatement;Z)V", "attachEntity", "LNSObject;LNSObject;Z", "(TK;TT;Z)V", "updateInTx", "getKeyVerified", "(TT;)TK;", "()Lorg/greenrobot/greendao/rx/RxDao<TT;TK;>;", "readEntity", "LAndroidDatabaseCursor;I", "(Landroid/database/Cursor;I)TT;", "readKey", "(Landroid/database/Cursor;I)TK;", "LAndroidDatabaseCursor;LNSObject;I", "(Landroid/database/Cursor;TT;I)V", "bindValues", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;LNSObject;", "(Lorg/greenrobot/greendao/database/DatabaseStatement;TT;)V", "LAndroidDatabaseSqliteSQLiteStatement;LNSObject;", "(Landroid/database/sqlite/SQLiteStatement;TT;)V", "updateKeyAfterInsert", "LNSObject;J", "(TT;J)TK;", "getKey", "hasKey", "Lorg/greenrobot/greendao/identityscope/IdentityScope<TK;TT;>;", "Lorg/greenrobot/greendao/identityscope/IdentityScopeLong<TT;>;", "Lorg/greenrobot/greendao/rx/RxDao<TT;TK;>;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoAbstractDao = { "AbstractDao", "org.greenrobot.greendao", ptrTable, methods, fields, 7, 0x401, 75, 10, -1, -1, -1, 110, -1 };
  return &_OrgGreenrobotGreendaoAbstractDao;
}

@end

void OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoAbstractDao *self, OrgGreenrobotGreendaoInternalDaoConfig *config) {
  OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withOrgGreenrobotGreendaoAbstractDaoSession_(self, config, nil);
}

void OrgGreenrobotGreendaoAbstractDao_initWithOrgGreenrobotGreendaoInternalDaoConfig_withOrgGreenrobotGreendaoAbstractDaoSession_(OrgGreenrobotGreendaoAbstractDao *self, OrgGreenrobotGreendaoInternalDaoConfig *config, OrgGreenrobotGreendaoAbstractDaoSession *daoSession) {
  NSObject_init(self);
  JreStrongAssign(&self->config_, config);
  JreStrongAssign(&self->session_, daoSession);
  JreStrongAssign(&self->db_, ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(config))->db_);
  self->isStandardSQLite_ = [[((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(self->db_)) getRawDatabase] isKindOfClass:[AndroidDatabaseSqliteSQLiteDatabase class]];
  JreStrongAssign(&self->identityScope_, [config getIdentityScope]);
  if ([self->identityScope_ isKindOfClass:[OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong class]]) {
    JreStrongAssign(&self->identityScopeLong_, (OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong *) cast_chk(self->identityScope_, [OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong class]));
  }
  else {
    JreStrongAssign(&self->identityScopeLong_, nil);
  }
  JreStrongAssign(&self->statements_, config->statements_);
  self->pkOrdinal_ = config->pkProperty_ != nil ? config->pkProperty_->ordinal_ : -1;
}

void OrgGreenrobotGreendaoAbstractDao_executeInsertInTxWithOrgGreenrobotGreendaoDatabaseDatabaseStatement_withJavaLangIterable_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt, id<JavaLangIterable> entities, jboolean setPrimaryKey) {
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(self->db_)) beginTransaction];
  @try {
    @synchronized(stmt) {
      if (self->identityScope_ != nil) {
        [self->identityScope_ lock];
      }
      @try {
        if (self->isStandardSQLite_) {
          AndroidDatabaseSqliteSQLiteStatement *rawStmt = (AndroidDatabaseSqliteSQLiteStatement *) cast_chk([((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) getRawStatement], [AndroidDatabaseSqliteSQLiteStatement class]);
          for (id __strong entity in nil_chk(entities)) {
            [self bindValuesWithAndroidDatabaseSqliteSQLiteStatement:rawStmt withId:entity];
            if (setPrimaryKey) {
              jlong rowId = [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(rawStmt)) executeInsert];
              [self updateKeyAfterInsertAndAttachWithId:entity withLong:rowId withBoolean:false];
            }
            else {
              [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(rawStmt)) execute];
            }
          }
        }
        else {
          for (id __strong entity in nil_chk(entities)) {
            [self bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withId:entity];
            if (setPrimaryKey) {
              jlong rowId = [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) executeInsert];
              [self updateKeyAfterInsertAndAttachWithId:entity withLong:rowId withBoolean:false];
            }
            else {
              [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) execute];
            }
          }
        }
      }
      @finally {
        if (self->identityScope_ != nil) {
          [self->identityScope_ unlock];
        }
      }
    }
    [self->db_ setTransactionSuccessful];
  }
  @finally {
    [self->db_ endTransaction];
  }
}

jlong OrgGreenrobotGreendaoAbstractDao_executeInsertWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id entity, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt, jboolean setKeyAndAttach) {
  jlong rowId;
  if ([((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(self->db_)) isDbLockedByCurrentThread]) {
    rowId = OrgGreenrobotGreendaoAbstractDao_insertInsideTxWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, entity, stmt);
  }
  else {
    [self->db_ beginTransaction];
    @try {
      rowId = OrgGreenrobotGreendaoAbstractDao_insertInsideTxWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, entity, stmt);
      [self->db_ setTransactionSuccessful];
    }
    @finally {
      [self->db_ endTransaction];
    }
  }
  if (setKeyAndAttach) {
    [self updateKeyAfterInsertAndAttachWithId:entity withLong:rowId withBoolean:true];
  }
  return rowId;
}

jlong OrgGreenrobotGreendaoAbstractDao_insertInsideTxWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(OrgGreenrobotGreendaoAbstractDao *self, id entity, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt) {
  @synchronized(stmt) {
    if (self->isStandardSQLite_) {
      AndroidDatabaseSqliteSQLiteStatement *rawStmt = (AndroidDatabaseSqliteSQLiteStatement *) cast_chk([((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) getRawStatement], [AndroidDatabaseSqliteSQLiteStatement class]);
      [self bindValuesWithAndroidDatabaseSqliteSQLiteStatement:rawStmt withId:entity];
      return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(rawStmt)) executeInsert];
    }
    else {
      [self bindValuesWithOrgGreenrobotGreendaoDatabaseDatabaseStatement:stmt withId:entity];
      return [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) executeInsert];
    }
  }
}

void OrgGreenrobotGreendaoAbstractDao_loadAllUnlockOnWindowBoundsWithAndroidDatabaseCursor_withAndroidDatabaseCursorWindow_withJavaUtilList_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor, AndroidDatabaseCursorWindow *window, id<JavaUtilList> list) {
  jint windowEnd = [((AndroidDatabaseCursorWindow *) nil_chk(window)) getStartPosition] + [window getNumRows];
  for (jint row = 0; ; row++) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(self, cursor, 0, false)];
    row++;
    if (row >= windowEnd) {
      window = OrgGreenrobotGreendaoAbstractDao_moveToNextUnlockedWithAndroidDatabaseCursor_(self, cursor);
      if (window == nil) {
        break;
      }
      windowEnd = [window getStartPosition] + [window getNumRows];
    }
    else {
      if (![((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToNext]) {
        break;
      }
    }
  }
}

AndroidDatabaseCursorWindow *OrgGreenrobotGreendaoAbstractDao_moveToNextUnlockedWithAndroidDatabaseCursor_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor) {
  [((id<OrgGreenrobotGreendaoIdentityscopeIdentityScope>) nil_chk(self->identityScope_)) unlock];
  @try {
    if ([((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToNext]) {
      return [((id<AndroidDatabaseCrossProcessCursor>) cast_check(cursor, AndroidDatabaseCrossProcessCursor_class_())) getWindow];
    }
    else {
      return nil;
    }
  }
  @finally {
    [self->identityScope_ lock];
  }
}

id OrgGreenrobotGreendaoAbstractDao_loadCurrentWithAndroidDatabaseCursor_withInt_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id<AndroidDatabaseCursor> cursor, jint offset, jboolean lock) {
  if (self->identityScopeLong_ != nil) {
    if (offset != 0) {
      if ([((id<AndroidDatabaseCursor>) nil_chk(cursor)) isNullWithInt:self->pkOrdinal_ + offset]) {
        return nil;
      }
    }
    jlong key = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getLongWithInt:self->pkOrdinal_ + offset];
    id entity = lock ? [self->identityScopeLong_ get2WithLong:key] : [self->identityScopeLong_ get2NoLockWithLong:key];
    if (entity != nil) {
      return entity;
    }
    else {
      entity = [self readEntityWithAndroidDatabaseCursor:cursor withInt:offset];
      [self attachEntityWithId:entity];
      if (lock) {
        [self->identityScopeLong_ put2WithLong:key withId:entity];
      }
      else {
        [self->identityScopeLong_ put2NoLockWithLong:key withId:entity];
      }
      return entity;
    }
  }
  else if (self->identityScope_ != nil) {
    id key = [self readKeyWithAndroidDatabaseCursor:cursor withInt:offset];
    if (offset != 0 && key == nil) {
      return nil;
    }
    id entity = lock ? [self->identityScope_ getWithId:key] : [self->identityScope_ getNoLockWithId:key];
    if (entity != nil) {
      return entity;
    }
    else {
      entity = [self readEntityWithAndroidDatabaseCursor:cursor withInt:offset];
      OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(self, key, entity, lock);
      return entity;
    }
  }
  else {
    if (offset != 0) {
      id key = [self readKeyWithAndroidDatabaseCursor:cursor withInt:offset];
      if (key == nil) {
        return nil;
      }
    }
    id entity = [self readEntityWithAndroidDatabaseCursor:cursor withInt:offset];
    [self attachEntityWithId:entity];
    return entity;
  }
}

void OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(OrgGreenrobotGreendaoAbstractDao *self, id key, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt) {
  if ([key isKindOfClass:[JavaLangLong class]]) {
    [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) bindLongWithInt:1 withLong:[((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(key, [JavaLangLong class]))) longLongValue]];
  }
  else if (key == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Cannot delete entity, key is null");
  }
  else {
    [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(stmt)) bindStringWithInt:1 withNSString:[key description]];
  }
  [stmt execute];
}

void OrgGreenrobotGreendaoAbstractDao_deleteInTxInternalWithJavaLangIterable_withJavaLangIterable_(OrgGreenrobotGreendaoAbstractDao *self, id<JavaLangIterable> entities, id<JavaLangIterable> keys) {
  [self assertSinglePk];
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> stmt = [((OrgGreenrobotGreendaoInternalTableStatements *) nil_chk(self->statements_)) getDeleteStatement];
  id<JavaUtilList> keysToRemoveFromIdentityScope = nil;
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(self->db_)) beginTransaction];
  @try {
    @synchronized(stmt) {
      if (self->identityScope_ != nil) {
        [self->identityScope_ lock];
        keysToRemoveFromIdentityScope = create_JavaUtilArrayList_init();
      }
      @try {
        if (entities != nil) {
          for (id __strong entity in entities) {
            id key = [self getKeyVerifiedWithId:entity];
            OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, key, stmt);
            if (keysToRemoveFromIdentityScope != nil) {
              [keysToRemoveFromIdentityScope addWithId:key];
            }
          }
        }
        if (keys != nil) {
          for (id __strong key in keys) {
            OrgGreenrobotGreendaoAbstractDao_deleteByKeyInsideSynchronizedWithId_withOrgGreenrobotGreendaoDatabaseDatabaseStatement_(self, key, stmt);
            if (keysToRemoveFromIdentityScope != nil) {
              [keysToRemoveFromIdentityScope addWithId:key];
            }
          }
        }
      }
      @finally {
        if (self->identityScope_ != nil) {
          [self->identityScope_ unlock];
        }
      }
    }
    [self->db_ setTransactionSuccessful];
    if (keysToRemoveFromIdentityScope != nil && self->identityScope_ != nil) {
      [self->identityScope_ removeWithJavaLangIterable:keysToRemoveFromIdentityScope];
    }
  }
  @finally {
    [self->db_ endTransaction];
  }
}

void OrgGreenrobotGreendaoAbstractDao_attachEntityWithId_withId_withBoolean_(OrgGreenrobotGreendaoAbstractDao *self, id key, id entity, jboolean lock) {
  [self attachEntityWithId:entity];
  if (self->identityScope_ != nil && key != nil) {
    if (lock) {
      [self->identityScope_ putWithId:key withId:entity];
    }
    else {
      [self->identityScope_ putNoLockWithId:key withId:entity];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoAbstractDao)
