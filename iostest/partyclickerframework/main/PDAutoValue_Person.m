//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDAutoValue_Person.h"
#include "PDPerson.h"

@interface PDAutoValue_Person () {
 @public
  jlong id__;
  jlong recorded_;
  jlong val_;
  jlong party_;
}

@end

@implementation PDAutoValue_Person

- (instancetype)initWithLong:(jlong)id_
                    withLong:(jlong)recorded
                    withLong:(jlong)val
                    withLong:(jlong)party {
  PDAutoValue_Person_initWithLong_withLong_withLong_withLong_(self, id_, recorded, val, party);
  return self;
}

- (jlong)id__ {
  return id__;
}

- (jlong)recorded {
  return recorded_;
}

- (jlong)val {
  return val_;
}

- (jlong)party {
  return party_;
}

- (NSString *)description {
  return JreStrcat("$J$J$J$JC", @"Person{id=", id__, @", recorded=", recorded_, @", val=", val_, @", party=", party_, '}');
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if ([o isKindOfClass:[PDPerson class]]) {
    PDPerson *that = (PDPerson *) cast_chk(o, [PDPerson class]);
    return (self->id__ == [((PDPerson *) nil_chk(that)) id__]) && (self->recorded_ == [that recorded]) && (self->val_ == [that val]) && (self->party_ == [that party]);
  }
  return false;
}

- (NSUInteger)hash {
  jint h = 1;
  h *= 1000003;
  h ^= (JreURShift64(self->id__, 32)) ^ self->id__;
  h *= 1000003;
  h ^= (JreURShift64(self->recorded_, 32)) ^ self->recorded_;
  h *= 1000003;
  h ^= (JreURShift64(self->val_, 32)) ^ self->val_;
  h *= 1000003;
  h ^= (JreURShift64(self->party_, 32)) ^ self->party_;
  return h;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withLong:withLong:withLong:);
  methods[1].selector = @selector(id__);
  methods[2].selector = @selector(recorded);
  methods[3].selector = @selector(val);
  methods[4].selector = @selector(party);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "J", .constantValue.asLong = 0, 0x12, 1, -1, -1, -1 },
    { "recorded_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "val_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "party_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJJJ", "id", "toString", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _PDAutoValue_Person = { "AutoValue_Person", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x10, 8, 4, -1, -1, -1, -1, -1 };
  return &_PDAutoValue_Person;
}

@end

void PDAutoValue_Person_initWithLong_withLong_withLong_withLong_(PDAutoValue_Person *self, jlong id_, jlong recorded, jlong val, jlong party) {
  PDPerson_init(self);
  self->id__ = id_;
  self->recorded_ = recorded;
  self->val_ = val;
  self->party_ = party;
}

PDAutoValue_Person *new_PDAutoValue_Person_initWithLong_withLong_withLong_withLong_(jlong id_, jlong recorded, jlong val, jlong party) {
  J2OBJC_NEW_IMPL(PDAutoValue_Person, initWithLong_withLong_withLong_withLong_, id_, recorded, val, party)
}

PDAutoValue_Person *create_PDAutoValue_Person_initWithLong_withLong_withLong_withLong_(jlong id_, jlong recorded, jlong val, jlong party) {
  J2OBJC_CREATE_IMPL(PDAutoValue_Person, initWithLong_withLong_withLong_withLong_, id_, recorded, val, party)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDAutoValue_Person)
