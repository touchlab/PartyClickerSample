//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoRxRxUtils.h"
#include "RxFunctionsFunc0.h"
#include "RxObservable.h"
#include "java/lang/Exception.h"
#include "java/util/concurrent/Callable.h"

@interface OrgGreenrobotGreendaoRxRxUtils_1 : NSObject < RxFunctionsFunc0 > {
 @public
  id<JavaUtilConcurrentCallable> val$callable_;
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0;

- (RxObservable *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGreenrobotGreendaoRxRxUtils_1)

__attribute__((unused)) static void OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxUtils_1 *self, id<JavaUtilConcurrentCallable> capture$0);

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxUtils_1 *new_OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxUtils_1 *create_OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0);

@implementation OrgGreenrobotGreendaoRxRxUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoRxRxUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxObservable *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return OrgGreenrobotGreendaoRxRxUtils_fromCallableWithJavaUtilConcurrentCallable_(callable);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x8, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromCallableWithJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fromCallable", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Lrx/Observable<TT;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxUtils = { "RxUtils", "org.greenrobot.greendao.rx", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoRxRxUtils;
}

@end

void OrgGreenrobotGreendaoRxRxUtils_init(OrgGreenrobotGreendaoRxRxUtils *self) {
  NSObject_init(self);
}

OrgGreenrobotGreendaoRxRxUtils *new_OrgGreenrobotGreendaoRxRxUtils_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxUtils, init)
}

OrgGreenrobotGreendaoRxRxUtils *create_OrgGreenrobotGreendaoRxRxUtils_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxUtils, init)
}

RxObservable *OrgGreenrobotGreendaoRxRxUtils_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  OrgGreenrobotGreendaoRxRxUtils_initialize();
  return RxObservable_deferWithRxFunctionsFunc0_(create_OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(callable));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoRxRxUtils)

@implementation OrgGreenrobotGreendaoRxRxUtils_1

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0 {
  OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(self, capture$0);
  return self;
}

- (RxObservable *)call {
  id result;
  @try {
    result = [((id<JavaUtilConcurrentCallable>) nil_chk(val$callable_)) call];
  }
  @catch (JavaLangException *e) {
    return RxObservable_errorWithNSException_(e);
  }
  return RxObservable_justWithId_(result);
}

- (void)dealloc {
  RELEASE_(val$callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<TT;>;", "Ljava/util/concurrent/Callable<TT;>;", "LOrgGreenrobotGreendaoRxRxUtils;", "fromCallableWithJavaUtilConcurrentCallable:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxUtils_1 = { "", "org.greenrobot.greendao.rx", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_OrgGreenrobotGreendaoRxRxUtils_1;
}

@end

void OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxUtils_1 *self, id<JavaUtilConcurrentCallable> capture$0) {
  JreStrongAssign(&self->val$callable_, capture$0);
  NSObject_init(self);
}

OrgGreenrobotGreendaoRxRxUtils_1 *new_OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxUtils_1, initWithJavaUtilConcurrentCallable_, capture$0)
}

OrgGreenrobotGreendaoRxRxUtils_1 *create_OrgGreenrobotGreendaoRxRxUtils_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxUtils_1, initWithJavaUtilConcurrentCallable_, capture$0)
}
