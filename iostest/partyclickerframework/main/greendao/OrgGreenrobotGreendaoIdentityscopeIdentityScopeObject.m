//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject.h"
#include "java/lang/Iterable.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/HashMap.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@interface OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject () {
 @public
  JavaUtilHashMap *map_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject, map_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject, lock_, JavaUtilConcurrentLocksReentrantLock *)

@implementation OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getWithId:(id)key {
  JavaLangRefReference *ref;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    ref = [((JavaUtilHashMap *) nil_chk(map_)) getWithId:key];
  }
  @finally {
    [lock_ unlock];
  }
  if (ref != nil) {
    return [ref get];
  }
  else {
    return nil;
  }
}

- (id)getNoLockWithId:(id)key {
  JavaLangRefReference *ref = [((JavaUtilHashMap *) nil_chk(map_)) getWithId:key];
  if (ref != nil) {
    return [ref get];
  }
  else {
    return nil;
  }
}

- (void)putWithId:(id)key
           withId:(id)entity {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:create_JavaLangRefWeakReference_initWithId_(entity)];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)putNoLockWithId:(id)key
                 withId:(id)entity {
  [((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:create_JavaLangRefWeakReference_initWithId_(entity)];
}

- (jboolean)detachWithId:(id)key
                  withId:(id)entity {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    if ([self getWithId:key] == entity && entity != nil) {
      [self removeWithId:key];
      return true;
    }
    else {
      return false;
    }
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)removeWithId:(id)key {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((JavaUtilHashMap *) nil_chk(map_)) removeWithId:key];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)removeWithJavaLangIterable:(id<JavaLangIterable>)keys {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    for (id __strong key in nil_chk(keys)) {
      [((JavaUtilHashMap *) nil_chk(map_)) removeWithId:key];
    }
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)clear {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((JavaUtilHashMap *) nil_chk(map_)) clear];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)lock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
}

- (void)unlock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) unlock];
}

- (void)reserveRoomWithInt:(jint)count {
}

- (void)dealloc {
  RELEASE_(map_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithId:);
  methods[2].selector = @selector(getNoLockWithId:);
  methods[3].selector = @selector(putWithId:withId:);
  methods[4].selector = @selector(putNoLockWithId:withId:);
  methods[5].selector = @selector(detachWithId:withId:);
  methods[6].selector = @selector(removeWithId:);
  methods[7].selector = @selector(removeWithJavaLangIterable:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(lock);
  methods[10].selector = @selector(unlock);
  methods[11].selector = @selector(reserveRoomWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LNSObject;", "(TK;)TT;", "getNoLock", "put", "LNSObject;LNSObject;", "(TK;TT;)V", "putNoLock", "detach", "(TK;TT;)Z", "remove", "(TK;)V", "LJavaLangIterable;", "(Ljava/lang/Iterable<TK;>;)V", "reserveRoom", "I", "Ljava/util/HashMap<TK;Ljava/lang/ref/Reference<TT;>;>;", "<K:Ljava/lang/Object;T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/greenrobot/greendao/identityscope/IdentityScope<TK;TT;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject = { "IdentityScopeObject", "org.greenrobot.greendao.identityscope", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, 17, -1 };
  return &_OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject;
}

@end

void OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject_init(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
}

OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject *new_OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject, init)
}

OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject *create_OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject)
