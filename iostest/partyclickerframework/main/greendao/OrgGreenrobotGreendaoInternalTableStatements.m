//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoDatabaseDatabaseStatement.h"
#include "OrgGreenrobotGreendaoInternalSqlUtils.h"
#include "OrgGreenrobotGreendaoInternalTableStatements.h"
#include "java/lang/StringBuilder.h"

@interface OrgGreenrobotGreendaoInternalTableStatements () {
 @public
  id<OrgGreenrobotGreendaoDatabaseDatabase> db_;
  NSString *tablename_;
  IOSObjectArray *allColumns_;
  IOSObjectArray *pkColumns_;
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> insertStatement_;
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> insertOrReplaceStatement_;
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> updateStatement_;
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> deleteStatement_;
  id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> countStatement_;
  volatile_id selectAll_;
  volatile_id selectByKey_;
  volatile_id selectByRowId_;
  volatile_id selectKeys_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, db_, id<OrgGreenrobotGreendaoDatabaseDatabase>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, tablename_, NSString *)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, allColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, pkColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, insertStatement_, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, insertOrReplaceStatement_, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, updateStatement_, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, deleteStatement_, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, countStatement_, id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, selectAll_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, selectByKey_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, selectByRowId_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoInternalTableStatements, selectKeys_, NSString *)

@implementation OrgGreenrobotGreendaoInternalTableStatements

- (instancetype)initWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                                 withNSString:(NSString *)tablename
                                            withNSStringArray:(IOSObjectArray *)allColumns
                                            withNSStringArray:(IOSObjectArray *)pkColumns {
  OrgGreenrobotGreendaoInternalTableStatements_initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_(self, db, tablename, allColumns, pkColumns);
  return self;
}

- (id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)getInsertStatement {
  if (insertStatement_ == nil) {
    NSString *sql = OrgGreenrobotGreendaoInternalSqlUtils_createSqlInsertWithNSString_withNSString_withNSStringArray_(@"INSERT INTO ", tablename_, allColumns_);
    id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> newInsertStatement = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) compileStatementWithNSString:sql];
    @synchronized(self) {
      if (insertStatement_ == nil) {
        JreStrongAssign(&insertStatement_, newInsertStatement);
      }
    }
    if (insertStatement_ != newInsertStatement) {
      [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(newInsertStatement)) close];
    }
  }
  return insertStatement_;
}

- (id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)getInsertOrReplaceStatement {
  if (insertOrReplaceStatement_ == nil) {
    NSString *sql = OrgGreenrobotGreendaoInternalSqlUtils_createSqlInsertWithNSString_withNSString_withNSStringArray_(@"INSERT OR REPLACE INTO ", tablename_, allColumns_);
    id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> newInsertOrReplaceStatement = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) compileStatementWithNSString:sql];
    @synchronized(self) {
      if (insertOrReplaceStatement_ == nil) {
        JreStrongAssign(&insertOrReplaceStatement_, newInsertOrReplaceStatement);
      }
    }
    if (insertOrReplaceStatement_ != newInsertOrReplaceStatement) {
      [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(newInsertOrReplaceStatement)) close];
    }
  }
  return insertOrReplaceStatement_;
}

- (id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)getDeleteStatement {
  if (deleteStatement_ == nil) {
    NSString *sql = OrgGreenrobotGreendaoInternalSqlUtils_createSqlDeleteWithNSString_withNSStringArray_(tablename_, pkColumns_);
    id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> newDeleteStatement = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) compileStatementWithNSString:sql];
    @synchronized(self) {
      if (deleteStatement_ == nil) {
        JreStrongAssign(&deleteStatement_, newDeleteStatement);
      }
    }
    if (deleteStatement_ != newDeleteStatement) {
      [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(newDeleteStatement)) close];
    }
  }
  return deleteStatement_;
}

- (id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)getUpdateStatement {
  if (updateStatement_ == nil) {
    NSString *sql = OrgGreenrobotGreendaoInternalSqlUtils_createSqlUpdateWithNSString_withNSStringArray_withNSStringArray_(tablename_, allColumns_, pkColumns_);
    id<OrgGreenrobotGreendaoDatabaseDatabaseStatement> newUpdateStatement = [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) compileStatementWithNSString:sql];
    @synchronized(self) {
      if (updateStatement_ == nil) {
        JreStrongAssign(&updateStatement_, newUpdateStatement);
      }
    }
    if (updateStatement_ != newUpdateStatement) {
      [((id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>) nil_chk(newUpdateStatement)) close];
    }
  }
  return updateStatement_;
}

- (id<OrgGreenrobotGreendaoDatabaseDatabaseStatement>)getCountStatement {
  if (countStatement_ == nil) {
    NSString *sql = OrgGreenrobotGreendaoInternalSqlUtils_createSqlCountWithNSString_(tablename_);
    JreStrongAssign(&countStatement_, [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) compileStatementWithNSString:sql]);
  }
  return countStatement_;
}

- (NSString *)getSelectAll {
  if (JreLoadVolatileId(&selectAll_) == nil) {
    JreVolatileStrongAssign(&selectAll_, OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectWithNSString_withNSString_withNSStringArray_withBoolean_(tablename_, @"T", allColumns_, false));
  }
  return JreLoadVolatileId(&selectAll_);
}

- (NSString *)getSelectKeys {
  if (JreLoadVolatileId(&selectKeys_) == nil) {
    JreVolatileStrongAssign(&selectKeys_, OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectWithNSString_withNSString_withNSStringArray_withBoolean_(tablename_, @"T", pkColumns_, false));
  }
  return JreLoadVolatileId(&selectKeys_);
}

- (NSString *)getSelectByKey {
  if (JreLoadVolatileId(&selectByKey_) == nil) {
    JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_([self getSelectAll]);
    [builder appendWithNSString:@"WHERE "];
    OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, @"T", pkColumns_);
    JreVolatileStrongAssign(&selectByKey_, [builder description]);
  }
  return JreLoadVolatileId(&selectByKey_);
}

- (NSString *)getSelectByRowId {
  if (JreLoadVolatileId(&selectByRowId_) == nil) {
    JreVolatileStrongAssign(&selectByRowId_, JreStrcat("$$", [self getSelectAll], @"WHERE ROWID=?"));
  }
  return JreLoadVolatileId(&selectByRowId_);
}

- (void)__javaClone:(OrgGreenrobotGreendaoInternalTableStatements *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&selectAll_, &original->selectAll_);
  JreCloneVolatileStrong(&selectByKey_, &original->selectByKey_);
  JreCloneVolatileStrong(&selectByRowId_, &original->selectByRowId_);
  JreCloneVolatileStrong(&selectKeys_, &original->selectKeys_);
}

- (void)dealloc {
  RELEASE_(db_);
  RELEASE_(tablename_);
  RELEASE_(allColumns_);
  RELEASE_(pkColumns_);
  RELEASE_(insertStatement_);
  RELEASE_(insertOrReplaceStatement_);
  RELEASE_(updateStatement_);
  RELEASE_(deleteStatement_);
  RELEASE_(countStatement_);
  JreReleaseVolatile(&selectAll_);
  JreReleaseVolatile(&selectByKey_);
  JreReleaseVolatile(&selectByRowId_);
  JreReleaseVolatile(&selectKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoDatabaseDatabase:withNSString:withNSStringArray:withNSStringArray:);
  methods[1].selector = @selector(getInsertStatement);
  methods[2].selector = @selector(getInsertOrReplaceStatement);
  methods[3].selector = @selector(getDeleteStatement);
  methods[4].selector = @selector(getUpdateStatement);
  methods[5].selector = @selector(getCountStatement);
  methods[6].selector = @selector(getSelectAll);
  methods[7].selector = @selector(getSelectKeys);
  methods[8].selector = @selector(getSelectByKey);
  methods[9].selector = @selector(getSelectByRowId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "db_", "LOrgGreenrobotGreendaoDatabaseDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tablename_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "allColumns_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pkColumns_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "insertStatement_", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "insertOrReplaceStatement_", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "updateStatement_", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deleteStatement_", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countStatement_", "LOrgGreenrobotGreendaoDatabaseDatabaseStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectAll_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "selectByKey_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "selectByRowId_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "selectKeys_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoDatabaseDatabase;LNSString;[LNSString;[LNSString;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoInternalTableStatements = { "TableStatements", "org.greenrobot.greendao.internal", ptrTable, methods, fields, 7, 0x1, 10, 13, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoInternalTableStatements;
}

@end

void OrgGreenrobotGreendaoInternalTableStatements_initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_(OrgGreenrobotGreendaoInternalTableStatements *self, id<OrgGreenrobotGreendaoDatabaseDatabase> db, NSString *tablename, IOSObjectArray *allColumns, IOSObjectArray *pkColumns) {
  NSObject_init(self);
  JreStrongAssign(&self->db_, db);
  JreStrongAssign(&self->tablename_, tablename);
  JreStrongAssign(&self->allColumns_, allColumns);
  JreStrongAssign(&self->pkColumns_, pkColumns);
}

OrgGreenrobotGreendaoInternalTableStatements *new_OrgGreenrobotGreendaoInternalTableStatements_initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, NSString *tablename, IOSObjectArray *allColumns, IOSObjectArray *pkColumns) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoInternalTableStatements, initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_, db, tablename, allColumns, pkColumns)
}

OrgGreenrobotGreendaoInternalTableStatements *create_OrgGreenrobotGreendaoInternalTableStatements_initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, NSString *tablename, IOSObjectArray *allColumns, IOSObjectArray *pkColumns) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoInternalTableStatements, initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_, db, tablename, allColumns, pkColumns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoInternalTableStatements)
