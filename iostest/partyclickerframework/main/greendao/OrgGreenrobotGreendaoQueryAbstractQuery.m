//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoInternalQueryDaoAccess.h"
#include "OrgGreenrobotGreendaoQueryAbstractQuery.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/util/Date.h"

@implementation OrgGreenrobotGreendaoQueryAbstractQuery

+ (IOSObjectArray *)toStringArrayWithNSObjectArray:(IOSObjectArray *)values {
  return OrgGreenrobotGreendaoQueryAbstractQuery_toStringArrayWithNSObjectArray_(values);
}

- (instancetype)initWithOrgGreenrobotGreendaoAbstractDao:(OrgGreenrobotGreendaoAbstractDao *)dao
                                            withNSString:(NSString *)sql
                                       withNSStringArray:(IOSObjectArray *)parameters {
  OrgGreenrobotGreendaoQueryAbstractQuery_initWithOrgGreenrobotGreendaoAbstractDao_withNSString_withNSStringArray_(self, dao, sql, parameters);
  return self;
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)setParameterWithInt:(jint)index
                                                          withId:(id)parameter {
  [self checkThread];
  if (parameter != nil) {
    IOSObjectArray_Set(nil_chk(parameters_), index, [parameter description]);
  }
  else {
    IOSObjectArray_Set(nil_chk(parameters_), index, nil);
  }
  return self;
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)setParameterWithInt:(jint)index
                                                withJavaUtilDate:(JavaUtilDate *)parameter {
  JavaLangLong *converted = parameter != nil ? JavaLangLong_valueOfWithLong_([parameter getTime]) : nil;
  return [self setParameterWithInt:index withId:converted];
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)setParameterWithInt:(jint)index
                                             withJavaLangBoolean:(JavaLangBoolean *)parameter {
  JavaLangInteger *converted = parameter != nil ? JavaLangInteger_valueOfWithInt_(([parameter booleanValue] ? 1 : 0)) : nil;
  return [self setParameterWithInt:index withId:converted];
}

- (void)checkThread {
  if (JavaLangThread_currentThread() != ownerThread_) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Method may be called only in owner thread, use forCurrentThread to get an instance for this thread");
  }
}

- (void)dealloc {
  RELEASE_(dao_);
  RELEASE_(daoAccess_);
  RELEASE_(sql_);
  RELEASE_(parameters_);
  RELEASE_(ownerThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSString;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x1, 4, 7, -1, 8, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x1, 4, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toStringArrayWithNSObjectArray:);
  methods[1].selector = @selector(initWithOrgGreenrobotGreendaoAbstractDao:withNSString:withNSStringArray:);
  methods[2].selector = @selector(setParameterWithInt:withId:);
  methods[3].selector = @selector(setParameterWithInt:withJavaUtilDate:);
  methods[4].selector = @selector(setParameterWithInt:withJavaLangBoolean:);
  methods[5].selector = @selector(checkThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dao_", "LOrgGreenrobotGreendaoAbstractDao;", .constantValue.asLong = 0, 0x14, -1, -1, 11, -1 },
    { "daoAccess_", "LOrgGreenrobotGreendaoInternalQueryDaoAccess;", .constantValue.asLong = 0, 0x14, -1, -1, 12, -1 },
    { "sql_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "parameters_", "[LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "ownerThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toStringArray", "[LNSObject;", "LOrgGreenrobotGreendaoAbstractDao;LNSString;[LNSString;", "(Lorg/greenrobot/greendao/AbstractDao<TT;*>;Ljava/lang/String;[Ljava/lang/String;)V", "setParameter", "ILNSObject;", "(ILjava/lang/Object;)Lorg/greenrobot/greendao/query/AbstractQuery<TT;>;", "ILJavaUtilDate;", "(ILjava/util/Date;)Lorg/greenrobot/greendao/query/AbstractQuery<TT;>;", "ILJavaLangBoolean;", "(ILjava/lang/Boolean;)Lorg/greenrobot/greendao/query/AbstractQuery<TT;>;", "Lorg/greenrobot/greendao/AbstractDao<TT;*>;", "Lorg/greenrobot/greendao/InternalQueryDaoAccess<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoQueryAbstractQuery = { "AbstractQuery", "org.greenrobot.greendao.query", ptrTable, methods, fields, 7, 0x400, 6, 5, -1, -1, -1, 13, -1 };
  return &_OrgGreenrobotGreendaoQueryAbstractQuery;
}

@end

IOSObjectArray *OrgGreenrobotGreendaoQueryAbstractQuery_toStringArrayWithNSObjectArray_(IOSObjectArray *values) {
  OrgGreenrobotGreendaoQueryAbstractQuery_initialize();
  jint length = ((IOSObjectArray *) nil_chk(values))->size_;
  IOSObjectArray *strings = [IOSObjectArray arrayWithLength:length type:NSString_class_()];
  for (jint i = 0; i < length; i++) {
    id object = IOSObjectArray_Get(values, i);
    if (object != nil) {
      IOSObjectArray_Set(strings, i, [object description]);
    }
    else {
      IOSObjectArray_Set(strings, i, nil);
    }
  }
  return strings;
}

void OrgGreenrobotGreendaoQueryAbstractQuery_initWithOrgGreenrobotGreendaoAbstractDao_withNSString_withNSStringArray_(OrgGreenrobotGreendaoQueryAbstractQuery *self, OrgGreenrobotGreendaoAbstractDao *dao, NSString *sql, IOSObjectArray *parameters) {
  NSObject_init(self);
  JreStrongAssign(&self->dao_, dao);
  JreStrongAssignAndConsume(&self->daoAccess_, new_OrgGreenrobotGreendaoInternalQueryDaoAccess_initWithOrgGreenrobotGreendaoAbstractDao_(dao));
  JreStrongAssign(&self->sql_, sql);
  JreStrongAssign(&self->parameters_, parameters);
  JreStrongAssign(&self->ownerThread_, JavaLangThread_currentThread());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoQueryAbstractQuery)
