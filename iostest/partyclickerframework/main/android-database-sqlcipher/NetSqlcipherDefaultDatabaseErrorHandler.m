//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDefaultDatabaseErrorHandler.h"
#include "android/util/Log.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"

@interface NetSqlcipherDefaultDatabaseErrorHandler () {
 @public
  NSString *TAG_;
}

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName;

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDefaultDatabaseErrorHandler, TAG_, NSString *)

__attribute__((unused)) static void NetSqlcipherDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(NetSqlcipherDefaultDatabaseErrorHandler *self, NSString *fileName);

@implementation NetSqlcipherDefaultDatabaseErrorHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDefaultDatabaseErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCorruptionWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)dbObj {
  AndroidUtilLog_eWithNSString_withNSString_(TAG_, JreStrcat("$$", @"Corruption reported by sqlite on database, deleting: ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(dbObj)) getPath]));
  if ([dbObj isOpen]) {
    AndroidUtilLog_eWithNSString_withNSString_(TAG_, @"Database object for corrupted database is already open, closing");
    @try {
      [dbObj close];
    }
    @catch (JavaLangException *e) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(TAG_, @"Exception closing Database object for corrupted database, ignored", e);
    }
  }
  NetSqlcipherDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, [dbObj getPath]);
}

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName {
  NetSqlcipherDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, fileName);
}

- (void)dealloc {
  RELEASE_(TAG_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCorruptionWithNetSqlcipherDatabaseSQLiteDatabase:);
  methods[2].selector = @selector(deleteDatabaseFileWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onCorruption", "LNetSqlcipherDatabaseSQLiteDatabase;", "deleteDatabaseFile", "LNSString;" };
  static const J2ObjcClassInfo _NetSqlcipherDefaultDatabaseErrorHandler = { "DefaultDatabaseErrorHandler", "net.sqlcipher", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDefaultDatabaseErrorHandler;
}

@end

void NetSqlcipherDefaultDatabaseErrorHandler_init(NetSqlcipherDefaultDatabaseErrorHandler *self) {
  NSObject_init(self);
  JreStrongAssign(&self->TAG_, [[self java_getClass] getSimpleName]);
}

NetSqlcipherDefaultDatabaseErrorHandler *new_NetSqlcipherDefaultDatabaseErrorHandler_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherDefaultDatabaseErrorHandler, init)
}

NetSqlcipherDefaultDatabaseErrorHandler *create_NetSqlcipherDefaultDatabaseErrorHandler_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherDefaultDatabaseErrorHandler, init)
}

void NetSqlcipherDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(NetSqlcipherDefaultDatabaseErrorHandler *self, NSString *fileName) {
  if ([((NSString *) nil_chk(fileName)) java_equalsIgnoreCase:@":memory:"] || [((NSString *) nil_chk([fileName java_trim])) java_length] == 0) {
    return;
  }
  AndroidUtilLog_eWithNSString_withNSString_(self->TAG_, JreStrcat("$$", @"deleting the database file: ", fileName));
  @try {
    [create_JavaIoFile_initWithNSString_(fileName) delete__];
  }
  @catch (JavaLangException *e) {
    AndroidUtilLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$$", @"delete failed: ", [((JavaLangException *) nil_chk(e)) getMessage]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDefaultDatabaseErrorHandler)
