//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetSqlcipherDatabaseUtils")
#ifdef RESTRICT_NetSqlcipherDatabaseUtils
#define INCLUDE_ALL_NetSqlcipherDatabaseUtils 0
#else
#define INCLUDE_ALL_NetSqlcipherDatabaseUtils 1
#endif
#undef RESTRICT_NetSqlcipherDatabaseUtils

#if !defined (NetSqlcipherDatabaseUtils_) && (INCLUDE_ALL_NetSqlcipherDatabaseUtils || defined(INCLUDE_NetSqlcipherDatabaseUtils))
#define NetSqlcipherDatabaseUtils_

@class AndroidContentContentValues;
@class AndroidDatabaseCursorWindow;
@class AndroidOsParcel;
@class IOSObjectArray;
@class JavaIoPrintStream;
@class JavaLangException;
@class JavaLangStringBuilder;
@class NetSqlcipherDatabaseSQLiteDatabase;
@class NetSqlcipherDatabaseSQLiteProgram;
@class NetSqlcipherDatabaseSQLiteStatement;
@class NetSqlcipherDatabaseUtils_InsertHelper;
@protocol NetSqlcipherCursor;

@interface NetSqlcipherDatabaseUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString;

+ (void)appendValueToSqlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                           withId:(id)value;

+ (void)bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram:(NetSqlcipherDatabaseSQLiteProgram *)prog
                                                         withInt:(jint)index
                                                          withId:(id)value;

+ (NSString *)concatenateWhereWithNSString:(NSString *)a
                              withNSString:(NSString *)b;

+ (void)cursorDoubleToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key;

+ (void)cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column;

+ (void)cursorDoubleToCursorValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                            withNSString:(NSString *)field
                         withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorFillWindowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                       withInt:(jint)position
               withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

+ (void)cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                  withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                     withNSString:(NSString *)column;

+ (void)cursorIntToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                          withNSString:(NSString *)field
                       withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorIntToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                          withNSString:(NSString *)field
                       withAndroidContentContentValues:(AndroidContentContentValues *)values
                                          withNSString:(NSString *)key;

+ (void)cursorIntToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                   withNSString:(NSString *)column;

+ (void)cursorLongToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                           withNSString:(NSString *)field
                        withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorLongToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                           withNSString:(NSString *)field
                        withAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withNSString:(NSString *)key;

+ (void)cursorLongToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                 withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                    withNSString:(NSString *)column;

+ (void)cursorRowToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                       withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorShortToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                  withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                     withNSString:(NSString *)column;

+ (void)cursorStringToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorStringToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key;

+ (void)cursorStringToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column;

+ (void)cursorStringToInsertHelperWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                            withNSString:(NSString *)field
              withNetSqlcipherDatabaseUtils_InsertHelper:(NetSqlcipherDatabaseUtils_InsertHelper *)inserter
                                                 withInt:(jint)index;

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor;

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                       withJavaIoPrintStream:(JavaIoPrintStream *)stream;

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                   withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (NSString *)dumpCurrentRowToStringWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor;

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor;

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                   withJavaIoPrintStream:(JavaIoPrintStream *)stream;

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (NSString *)dumpCursorToStringWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor;

+ (NSString *)getCollationKeyWithNSString:(NSString *)name;

+ (NSString *)getHexCollationKeyWithNSString:(NSString *)name;

+ (jint)getTypeOfObjectWithId:(id)obj;

+ (jlong)longForQueryWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                               withNSString:(NSString *)query
                                          withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (jlong)longForQueryWithNetSqlcipherDatabaseSQLiteStatement:(NetSqlcipherDatabaseSQLiteStatement *)prog
                                           withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (jlong)queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                                  withNSString:(NSString *)table;

+ (void)readExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply;

+ (void)readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply;

+ (NSString *)sqlEscapeStringWithNSString:(NSString *)value;

+ (NSString *)stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                                      withNSString:(NSString *)query
                                                 withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (NSString *)stringForQueryWithNetSqlcipherDatabaseSQLiteStatement:(NetSqlcipherDatabaseSQLiteStatement *)prog
                                                  withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (void)writeExceptionToParcelWithAndroidOsParcel:(AndroidOsParcel *)reply
                            withJavaLangException:(JavaLangException *)e;

@end

J2OBJC_STATIC_INIT(NetSqlcipherDatabaseUtils)

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_init(NetSqlcipherDatabaseUtils *self);

FOUNDATION_EXPORT NetSqlcipherDatabaseUtils *new_NetSqlcipherDatabaseUtils_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseUtils *create_NetSqlcipherDatabaseUtils_init();

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_writeExceptionToParcelWithAndroidOsParcel_withJavaLangException_(AndroidOsParcel *reply, JavaLangException *e);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_(AndroidOsParcel *reply);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel_(AndroidOsParcel *reply);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(NetSqlcipherDatabaseSQLiteProgram *prog, jint index, id value);

FOUNDATION_EXPORT jint NetSqlcipherDatabaseUtils_getTypeOfObjectWithId_(id obj);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_sqlEscapeStringWithNSString_(NSString *value);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sql, id value);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_concatenateWhereWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_getCollationKeyWithNSString_(NSString *name);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_getHexCollationKeyWithNSString_(NSString *name);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaIoPrintStream_(id<NetSqlcipherCursor> cursor, JavaIoPrintStream *stream);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaLangStringBuilder_(id<NetSqlcipherCursor> cursor, JavaLangStringBuilder *sb);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_dumpCursorToStringWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaIoPrintStream_(id<NetSqlcipherCursor> cursor, JavaIoPrintStream *stream);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaLangStringBuilder_(id<NetSqlcipherCursor> cursor, JavaLangStringBuilder *sb);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_dumpCurrentRowToStringWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorStringToInsertHelperWithNetSqlcipherCursor_withNSString_withNetSqlcipherDatabaseUtils_InsertHelper_withInt_(id<NetSqlcipherCursor> cursor, NSString *field, NetSqlcipherDatabaseUtils_InsertHelper *inserter, jint index);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorDoubleToCursorValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorRowToContentValuesWithNetSqlcipherCursor_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values);

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseUtils_queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *table);

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(NetSqlcipherDatabaseSQLiteStatement *prog, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT NSString *NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(NetSqlcipherDatabaseSQLiteStatement *prog, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorStringToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorLongToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorShortToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorIntToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_cursorFillWindowWithNetSqlcipherCursor_withInt_withAndroidDatabaseCursorWindow_(id<NetSqlcipherCursor> cursor, jint position, AndroidDatabaseCursorWindow *window);

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseUtils)

#endif

#if !defined (NetSqlcipherDatabaseUtils_InsertHelper_) && (INCLUDE_ALL_NetSqlcipherDatabaseUtils || defined(INCLUDE_NetSqlcipherDatabaseUtils_InsertHelper))
#define NetSqlcipherDatabaseUtils_InsertHelper_

@class AndroidContentContentValues;
@class IOSByteArray;
@class NetSqlcipherDatabaseSQLiteDatabase;

@interface NetSqlcipherDatabaseUtils_InsertHelper : NSObject

#pragma mark Public

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)tableName;

- (void)bindWithInt:(jint)index
        withBoolean:(jboolean)value;

- (void)bindWithInt:(jint)index
      withByteArray:(IOSByteArray *)value;

- (void)bindWithInt:(jint)index
         withDouble:(jdouble)value;

- (void)bindWithInt:(jint)index
          withFloat:(jfloat)value;

- (void)bindWithInt:(jint)index
            withInt:(jint)value;

- (void)bindWithInt:(jint)index
           withLong:(jlong)value;

- (void)bindWithInt:(jint)index
       withNSString:(NSString *)value;

- (void)bindNullWithInt:(jint)index;

- (void)close;

- (jlong)execute;

- (jint)getColumnIndexWithNSString:(NSString *)key;

- (jlong)insertWithAndroidContentContentValues:(AndroidContentContentValues *)values;

- (void)prepareForInsert;

- (void)prepareForReplace;

- (jlong)replaceWithAndroidContentContentValues:(AndroidContentContentValues *)values;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseUtils_InsertHelper)

inline jint NetSqlcipherDatabaseUtils_InsertHelper_get_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX();
#define NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX 1
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseUtils_InsertHelper, TABLE_INFO_PRAGMA_COLUMNNAME_INDEX, jint)

inline jint NetSqlcipherDatabaseUtils_InsertHelper_get_TABLE_INFO_PRAGMA_DEFAULT_INDEX();
#define NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX 4
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseUtils_InsertHelper, TABLE_INFO_PRAGMA_DEFAULT_INDEX, jint)

FOUNDATION_EXPORT void NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseUtils_InsertHelper *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName);

FOUNDATION_EXPORT NetSqlcipherDatabaseUtils_InsertHelper *new_NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseUtils_InsertHelper *create_NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName);

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseUtils_InsertHelper)

#endif

#pragma pop_macro("INCLUDE_ALL_NetSqlcipherDatabaseUtils")
