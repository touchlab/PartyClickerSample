//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherCursor.h"
#include "NetSqlcipherDatabaseSQLiteCursor.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDirectCursorDriver.h"
#include "NetSqlcipherDatabaseSQLiteQuery.h"

@interface NetSqlcipherDatabaseSQLiteDirectCursorDriver () {
 @public
  NSString *mEditTable_;
  NetSqlcipherDatabaseSQLiteDatabase *mDatabase_;
  __unsafe_unretained id<NetSqlcipherCursor> mCursor_;
  NSString *mSql_;
  NetSqlcipherDatabaseSQLiteQuery *mQuery_;
}

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDirectCursorDriver, mEditTable_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDirectCursorDriver, mDatabase_, NetSqlcipherDatabaseSQLiteDatabase *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDirectCursorDriver, mSql_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDirectCursorDriver, mQuery_, NetSqlcipherDatabaseSQLiteQuery *)

@implementation NetSqlcipherDatabaseSQLiteDirectCursorDriver

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)sql
                                              withNSString:(NSString *)editTable {
  NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(self, db, sql, editTable);
  return self;
}

- (id<NetSqlcipherCursor>)queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                                  withNSObjectArray:(IOSObjectArray *)args {
  NetSqlcipherDatabaseSQLiteQuery *query = create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(mDatabase_, mSql_, 0, args);
  @try {
    [query bindArgumentsWithNSObjectArray:args];
    if (factory == nil) {
      mCursor_ = create_NetSqlcipherDatabaseSQLiteCursor_initWithNetSqlcipherDatabaseSQLiteDatabase_withNetSqlcipherDatabaseSQLiteCursorDriver_withNSString_withNetSqlcipherDatabaseSQLiteQuery_(mDatabase_, self, mEditTable_, query);
    }
    else {
      mCursor_ = [factory newCursorWithNetSqlcipherDatabaseSQLiteDatabase:mDatabase_ withNetSqlcipherDatabaseSQLiteCursorDriver:self withNSString:mEditTable_ withNetSqlcipherDatabaseSQLiteQuery:query];
    }
    JreStrongAssign(&mQuery_, query);
    query = nil;
    return mCursor_;
  }
  @finally {
    if (query != nil) [query close];
  }
}

- (id<NetSqlcipherCursor>)queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                                  withNSStringArray:(IOSObjectArray *)selectionArgs {
  NetSqlcipherDatabaseSQLiteQuery *query = create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(mDatabase_, mSql_, 0, selectionArgs);
  @try {
    jint numArgs = selectionArgs == nil ? 0 : selectionArgs->size_;
    for (jint i = 0; i < numArgs; i++) {
      [query bindStringWithInt:i + 1 withNSString:IOSObjectArray_Get(nil_chk(selectionArgs), i)];
    }
    if (factory == nil) {
      mCursor_ = create_NetSqlcipherDatabaseSQLiteCursor_initWithNetSqlcipherDatabaseSQLiteDatabase_withNetSqlcipherDatabaseSQLiteCursorDriver_withNSString_withNetSqlcipherDatabaseSQLiteQuery_(mDatabase_, self, mEditTable_, query);
    }
    else {
      mCursor_ = [factory newCursorWithNetSqlcipherDatabaseSQLiteDatabase:mDatabase_ withNetSqlcipherDatabaseSQLiteCursorDriver:self withNSString:mEditTable_ withNetSqlcipherDatabaseSQLiteQuery:query];
    }
    JreStrongAssign(&mQuery_, query);
    query = nil;
    return mCursor_;
  }
  @finally {
    if (query != nil) [query close];
  }
}

- (void)cursorClosed {
  mCursor_ = nil;
}

- (void)setBindArgumentsWithNSStringArray:(IOSObjectArray *)bindArgs {
  jint numArgs = ((IOSObjectArray *) nil_chk(bindArgs))->size_;
  for (jint i = 0; i < numArgs; i++) {
    [((NetSqlcipherDatabaseSQLiteQuery *) nil_chk(mQuery_)) bindStringWithInt:i + 1 withNSString:IOSObjectArray_Get(bindArgs, i)];
  }
}

- (void)cursorDeactivated {
}

- (void)cursorRequeriedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDirectCursorDriver: ", mSql_);
}

- (void)__javaClone:(NetSqlcipherDatabaseSQLiteDirectCursorDriver *)original {
  [super __javaClone:original];
  [mCursor_ release];
}

- (void)dealloc {
  RELEASE_(mEditTable_);
  RELEASE_(mDatabase_);
  RELEASE_(mSql_);
  RELEASE_(mQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:withNSString:);
  methods[1].selector = @selector(queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNSObjectArray:);
  methods[2].selector = @selector(queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNSStringArray:);
  methods[3].selector = @selector(cursorClosed);
  methods[4].selector = @selector(setBindArgumentsWithNSStringArray:);
  methods[5].selector = @selector(cursorDeactivated);
  methods[6].selector = @selector(cursorRequeriedWithAndroidDatabaseCursor:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mEditTable_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDatabase_", "LNetSqlcipherDatabaseSQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursor_", "LNetSqlcipherCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mQuery_", "LNetSqlcipherDatabaseSQLiteQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;LNSString;", "query", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;[LNSObject;", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;[LNSString;", "setBindArguments", "[LNSString;", "cursorRequeried", "LAndroidDatabaseCursor;", "toString" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDirectCursorDriver = { "SQLiteDirectCursorDriver", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDirectCursorDriver;
}

@end

void NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDirectCursorDriver *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  NSObject_init(self);
  JreStrongAssign(&self->mDatabase_, db);
  JreStrongAssign(&self->mEditTable_, editTable);
  JreStrongAssign(&self->mSql_, sql);
}

NetSqlcipherDatabaseSQLiteDirectCursorDriver *new_NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDirectCursorDriver, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_, db, sql, editTable)
}

NetSqlcipherDatabaseSQLiteDirectCursorDriver *create_NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDirectCursorDriver, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_, db, sql, editTable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDirectCursorDriver)
