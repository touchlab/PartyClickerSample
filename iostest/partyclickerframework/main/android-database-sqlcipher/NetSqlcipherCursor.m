//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "NetSqlcipherCursor.h"

@interface NetSqlcipherCursor : NSObject

@end

@implementation NetSqlcipherCursor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTypeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIELD_TYPE_NULL", "I", .constantValue.asInt = NetSqlcipherCursor_FIELD_TYPE_NULL, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_INTEGER", "I", .constantValue.asInt = NetSqlcipherCursor_FIELD_TYPE_INTEGER, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_FLOAT", "I", .constantValue.asInt = NetSqlcipherCursor_FIELD_TYPE_FLOAT, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_STRING", "I", .constantValue.asInt = NetSqlcipherCursor_FIELD_TYPE_STRING, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_BLOB", "I", .constantValue.asInt = NetSqlcipherCursor_FIELD_TYPE_BLOB, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getType", "I" };
  static const J2ObjcClassInfo _NetSqlcipherCursor = { "Cursor", "net.sqlcipher", ptrTable, methods, fields, 7, 0x609, 1, 5, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherCursor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetSqlcipherCursor)
