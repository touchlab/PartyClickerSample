//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContext.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseErrorHandler.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDatabaseHook.h"
#include "NetSqlcipherDatabaseSQLiteException.h"
#include "NetSqlcipherDatabaseSQLiteOpenHelper.h"
#include "NetSqlcipherDefaultDatabaseErrorHandler.h"
#include "android/util/Log.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface NetSqlcipherDatabaseSQLiteOpenHelper () {
 @public
  AndroidContentContext *mContext_;
  NSString *mName_;
  id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> mFactory_;
  jint mNewVersion_;
  id<NetSqlcipherDatabaseSQLiteDatabaseHook> mHook_;
  id<NetSqlcipherDatabaseErrorHandler> mErrorHandler_;
  NetSqlcipherDatabaseSQLiteDatabase *mDatabase_;
  jboolean mIsInitializing_;
}

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mContext_, AndroidContentContext *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mName_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mFactory_, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mHook_, id<NetSqlcipherDatabaseSQLiteDatabaseHook>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mErrorHandler_, id<NetSqlcipherDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteOpenHelper, mDatabase_, NetSqlcipherDatabaseSQLiteDatabase *)

inline NSString *NetSqlcipherDatabaseSQLiteOpenHelper_get_TAG();
static NSString *NetSqlcipherDatabaseSQLiteOpenHelper_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteOpenHelper, TAG, NSString *)

J2OBJC_INITIALIZED_DEFN(NetSqlcipherDatabaseSQLiteOpenHelper)

@implementation NetSqlcipherDatabaseSQLiteOpenHelper

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_ {
  NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(self, context, name, factory, version_);
  return self;
}

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_
   withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook {
  NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(self, context, name, factory, version_, hook);
  return self;
}

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_
   withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook
         withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(self, context, name, factory, version_, hook, errorHandler);
  return self;
}

- (NetSqlcipherDatabaseSQLiteDatabase *)getWritableDatabaseWithNSString:(NSString *)password {
  @synchronized(self) {
    return [self getWritableDatabaseWithCharArray:password == nil ? nil : [password java_toCharArray]];
  }
}

- (NetSqlcipherDatabaseSQLiteDatabase *)getWritableDatabaseWithCharArray:(IOSCharArray *)password {
  @synchronized(self) {
    if (mDatabase_ != nil && [mDatabase_ isOpen] && ![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isReadOnly]) {
      return mDatabase_;
    }
    if (mIsInitializing_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"getWritableDatabase called recursively");
    }
    jboolean success = false;
    NetSqlcipherDatabaseSQLiteDatabase *db = nil;
    if (mDatabase_ != nil) [mDatabase_ lock];
    @try {
      mIsInitializing_ = true;
      if (mName_ == nil) {
        db = NetSqlcipherDatabaseSQLiteDatabase_createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withCharArray_(nil, password);
      }
      else {
        NSString *path = [((JavaIoFile *) nil_chk([((AndroidContentContext *) nil_chk(mContext_)) getDatabasePathWithNSString:mName_])) getPath];
        JavaIoFile *dbPathFile = create_JavaIoFile_initWithNSString_(path);
        if (![dbPathFile exists]) [((JavaIoFile *) nil_chk([dbPathFile getParentFile])) mkdirs];
        db = NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, mFactory_, mHook_, mErrorHandler_);
      }
      jint version_ = [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) getVersion];
      if (version_ != mNewVersion_) {
        [db beginTransaction];
        @try {
          if (version_ == 0) {
            [self onCreateWithNetSqlcipherDatabaseSQLiteDatabase:db];
          }
          else {
            [self onUpgradeWithNetSqlcipherDatabaseSQLiteDatabase:db withInt:version_ withInt:mNewVersion_];
          }
          [db setVersionWithInt:mNewVersion_];
          [db setTransactionSuccessful];
        }
        @finally {
          [db endTransaction];
        }
      }
      [self onOpenWithNetSqlcipherDatabaseSQLiteDatabase:db];
      success = true;
      return db;
    }
    @finally {
      mIsInitializing_ = false;
      if (success) {
        if (mDatabase_ != nil) {
          @try {
            [mDatabase_ close];
          }
          @catch (JavaLangException *e) {
          }
          [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
        }
        JreStrongAssign(&mDatabase_, db);
      }
      else {
        if (mDatabase_ != nil) [mDatabase_ unlock];
        if (db != nil) [db close];
      }
    }
  }
}

- (NetSqlcipherDatabaseSQLiteDatabase *)getReadableDatabaseWithNSString:(NSString *)password {
  @synchronized(self) {
    return [self getReadableDatabaseWithCharArray:password == nil ? nil : [password java_toCharArray]];
  }
}

- (NetSqlcipherDatabaseSQLiteDatabase *)getReadableDatabaseWithCharArray:(IOSCharArray *)password {
  @synchronized(self) {
    if (mDatabase_ != nil && [mDatabase_ isOpen]) {
      return mDatabase_;
    }
    if (mIsInitializing_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"getReadableDatabase called recursively");
    }
    @try {
      return [self getWritableDatabaseWithCharArray:password];
    }
    @catch (NetSqlcipherDatabaseSQLiteException *e) {
      if (mName_ == nil) @throw e;
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Couldn't open ", mName_, @" for writing (will try read-only):"), e);
    }
    NetSqlcipherDatabaseSQLiteDatabase *db = nil;
    @try {
      mIsInitializing_ = true;
      NSString *path = [((JavaIoFile *) nil_chk([((AndroidContentContext *) nil_chk(mContext_)) getDatabasePathWithNSString:mName_])) getPath];
      JavaIoFile *databasePath = create_JavaIoFile_initWithNSString_(path);
      JavaIoFile *databasesDirectory = create_JavaIoFile_initWithNSString_([((JavaIoFile *) nil_chk([mContext_ getDatabasePathWithNSString:mName_])) getParent]);
      if (![databasesDirectory exists]) {
        [databasesDirectory mkdirs];
      }
      if (![databasePath exists]) {
        mIsInitializing_ = false;
        db = [self getWritableDatabaseWithCharArray:password];
        mIsInitializing_ = true;
        [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) close];
      }
      db = NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(path, password, mFactory_, NetSqlcipherDatabaseSQLiteDatabase_OPEN_READONLY);
      if ([((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) getVersion] != mNewVersion_) {
        @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(JreStrcat("$I$I$$", @"Can't upgrade read-only database from version ", [db getVersion], @" to ", mNewVersion_, @": ", path));
      }
      [self onOpenWithNetSqlcipherDatabaseSQLiteDatabase:db];
      AndroidUtilLog_wWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Opened ", mName_, @" in read-only mode"));
      JreStrongAssign(&mDatabase_, db);
      return mDatabase_;
    }
    @finally {
      mIsInitializing_ = false;
      if (db != nil && db != mDatabase_) [db close];
    }
  }
}

- (void)close {
  @synchronized(self) {
    if (mIsInitializing_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Closed during initialization");
    if (mDatabase_ != nil && [mDatabase_ isOpen]) {
      [mDatabase_ close];
      JreStrongAssign(&mDatabase_, nil);
    }
  }
}

- (void)onCreateWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpgradeWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                                withInt:(jint)oldVersion
                                                withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onOpenWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db {
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mName_);
  RELEASE_(mFactory_);
  RELEASE_(mHook_);
  RELEASE_(mErrorHandler_);
  RELEASE_(mDatabase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x21, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x21, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x21, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:);
  methods[1].selector = @selector(initWithAndroidContentContext:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[2].selector = @selector(initWithAndroidContentContext:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[3].selector = @selector(getWritableDatabaseWithNSString:);
  methods[4].selector = @selector(getWritableDatabaseWithCharArray:);
  methods[5].selector = @selector(getReadableDatabaseWithNSString:);
  methods[6].selector = @selector(getReadableDatabaseWithCharArray:);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(onCreateWithNetSqlcipherDatabaseSQLiteDatabase:);
  methods[9].selector = @selector(onUpgradeWithNetSqlcipherDatabaseSQLiteDatabase:withInt:withInt:);
  methods[10].selector = @selector(onOpenWithNetSqlcipherDatabaseSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "mContext_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mFactory_", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNewVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHook_", "LNetSqlcipherDatabaseSQLiteDatabaseHook;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mErrorHandler_", "LNetSqlcipherDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDatabase_", "LNetSqlcipherDatabaseSQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsInitializing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;I", "LAndroidContentContext;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;", "LAndroidContentContext;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "getWritableDatabase", "LNSString;", "[C", "getReadableDatabase", "onCreate", "LNetSqlcipherDatabaseSQLiteDatabase;", "onUpgrade", "LNetSqlcipherDatabaseSQLiteDatabase;II", "onOpen", &NetSqlcipherDatabaseSQLiteOpenHelper_TAG };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteOpenHelper = { "SQLiteOpenHelper", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x401, 11, 9, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteOpenHelper;
}

+ (void)initialize {
  if (self == [NetSqlcipherDatabaseSQLiteOpenHelper class]) {
    JreStrongAssign(&NetSqlcipherDatabaseSQLiteOpenHelper_TAG, [NetSqlcipherDatabaseSQLiteOpenHelper_class_() getSimpleName]);
    J2OBJC_SET_INITIALIZED(NetSqlcipherDatabaseSQLiteOpenHelper)
  }
}

@end

void NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NetSqlcipherDatabaseSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint version_) {
  NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(self, context, name, factory, version_, nil, create_NetSqlcipherDefaultDatabaseErrorHandler_init());
}

void NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NetSqlcipherDatabaseSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint version_, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook) {
  NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(self, context, name, factory, version_, hook, create_NetSqlcipherDefaultDatabaseErrorHandler_init());
}

void NetSqlcipherDatabaseSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(NetSqlcipherDatabaseSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint version_, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->mDatabase_, nil);
  self->mIsInitializing_ = false;
  if (version_ < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Version must be >= 1, was ", version_));
  if (errorHandler == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"DatabaseErrorHandler param value can't be null.");
  }
  JreStrongAssign(&self->mContext_, context);
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mFactory_, factory);
  self->mNewVersion_ = version_;
  JreStrongAssign(&self->mHook_, hook);
  JreStrongAssign(&self->mErrorHandler_, errorHandler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteOpenHelper)
