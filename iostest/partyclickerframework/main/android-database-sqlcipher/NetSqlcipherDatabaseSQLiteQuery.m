//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherCursorWindow.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDatabaseCorruptException.h"
#include "NetSqlcipherDatabaseSQLiteDebug.h"
#include "NetSqlcipherDatabaseSQLiteMisuseException.h"
#include "NetSqlcipherDatabaseSQLiteProgram.h"
#include "NetSqlcipherDatabaseSQLiteQuery.h"
#include "android/os/SystemClock.h"
#include "android/util/Log.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"

@interface NetSqlcipherDatabaseSQLiteQuery () {
 @public
  jint mOffsetIndex_;
  IOSObjectArray *mBindArgs_;
  IOSObjectArray *mObjectBindArgs_;
}

- (jint)native_fill_windowWithNetSqlcipherCursorWindow:(NetSqlcipherCursorWindow *)window
                                               withInt:(jint)startPos
                                               withInt:(jint)offsetParam
                                               withInt:(jint)maxRead
                                               withInt:(jint)lastPos;

- (jint)native_column_count;

- (NSString *)native_column_nameWithInt:(jint)columnIndex;

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteQuery, mBindArgs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteQuery, mObjectBindArgs_, IOSObjectArray *)

inline NSString *NetSqlcipherDatabaseSQLiteQuery_get_TAG();
static NSString *NetSqlcipherDatabaseSQLiteQuery_TAG = @"Cursor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteQuery, TAG, NSString *)

jint NetSqlcipherDatabaseSQLiteQuery_native_fill_windowWithNetSqlcipherCursorWindow_withInt_withInt_withInt_withInt_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherCursorWindow *window, jint startPos, jint offsetParam, jint maxRead, jint lastPos);

jint NetSqlcipherDatabaseSQLiteQuery_native_column_count(NetSqlcipherDatabaseSQLiteQuery *self);

NSString *NetSqlcipherDatabaseSQLiteQuery_native_column_nameWithInt_(NetSqlcipherDatabaseSQLiteQuery *self, jint columnIndex);

@implementation NetSqlcipherDatabaseSQLiteQuery

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)query
                                                   withInt:(jint)offsetIndex
                                         withNSStringArray:(IOSObjectArray *)bindArgs {
  NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(self, db, query, offsetIndex, bindArgs);
  return self;
}

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)query
                                                   withInt:(jint)offsetIndex
                                         withNSObjectArray:(IOSObjectArray *)bindArgs {
  NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(self, db, query, offsetIndex, bindArgs);
  return self;
}

- (jint)fillWindowWithNetSqlcipherCursorWindow:(NetSqlcipherCursorWindow *)window
                                       withInt:(jint)maxRead
                                       withInt:(jint)lastPos {
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  @try {
    [self acquireReference];
    @try {
      [((NetSqlcipherCursorWindow *) nil_chk(window)) acquireReference];
      jint numRows = NetSqlcipherDatabaseSQLiteQuery_native_fill_windowWithNetSqlcipherCursorWindow_withInt_withInt_withInt_withInt_(self, window, [window getStartPosition], mOffsetIndex_, maxRead, lastPos);
      if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_STATEMENTS)) {
        AndroidUtilLog_dWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteQuery_TAG, JreStrcat("$$", @"fillWindow(): ", mSql_));
      }
      return numRows;
    }
    @catch (JavaLangIllegalStateException *e) {
      return 0;
    }
    @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
      [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) onCorruption];
      @throw e;
    }
    @finally {
      [window releaseReference];
    }
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (jint)columnCountLocked {
  [self acquireReference];
  @try {
    return NetSqlcipherDatabaseSQLiteQuery_native_column_count(self);
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)columnNameLockedWithInt:(jint)columnIndex {
  [self acquireReference];
  @try {
    return NetSqlcipherDatabaseSQLiteQuery_native_column_nameWithInt_(self, columnIndex);
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteQuery: ", mSql_);
}

- (void)requery {
  if (mBindArgs_ != nil) {
    jint len = mBindArgs_->size_;
    @try {
      if (mObjectBindArgs_ != nil) {
        [self bindArgumentsWithNSObjectArray:mObjectBindArgs_];
      }
      else {
        for (jint i = 0; i < len; i++) {
          [super bindStringWithInt:i + 1 withNSString:IOSObjectArray_Get(nil_chk(mBindArgs_), i)];
        }
      }
    }
    @catch (NetSqlcipherDatabaseSQLiteMisuseException *e) {
      JavaLangStringBuilder *errMsg = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("$$", @"mSql ", mSql_));
      for (jint i = 0; i < len; i++) {
        [errMsg appendWithNSString:@" "];
        [errMsg appendWithNSString:IOSObjectArray_Get(nil_chk(mBindArgs_), i)];
      }
      [errMsg appendWithNSString:@" "];
      JavaLangIllegalStateException *leakProgram = create_JavaLangIllegalStateException_initWithNSString_withNSException_([errMsg description], e);
      @throw leakProgram;
    }
  }
}

- (void)bindNullWithInt:(jint)index {
  IOSObjectArray_Set(nil_chk(mBindArgs_), index - 1, nil);
  if (!mClosed_) [super bindNullWithInt:index];
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  IOSObjectArray_Set(nil_chk(mBindArgs_), index - 1, JavaLangLong_toStringWithLong_(value));
  if (!mClosed_) [super bindLongWithInt:index withLong:value];
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  IOSObjectArray_Set(nil_chk(mBindArgs_), index - 1, JavaLangDouble_toStringWithDouble_(value));
  if (!mClosed_) [super bindDoubleWithInt:index withDouble:value];
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  IOSObjectArray_Set(nil_chk(mBindArgs_), index - 1, value);
  if (!mClosed_) [super bindStringWithInt:index withNSString:value];
}

- (void)bindArgumentsWithNSObjectArray:(IOSObjectArray *)args {
  if (args != nil && args->size_ > 0) {
    for (jint i = 0; i < args->size_; i++) {
      id value = IOSObjectArray_Get(args, i);
      if (value == nil) {
        [self bindNullWithInt:i + 1];
      }
      else if ([value isKindOfClass:[JavaLangDouble class]]) {
        [self bindDoubleWithInt:i + 1 withDouble:[(JavaLangDouble *) cast_chk(value, [JavaLangDouble class]) doubleValue]];
      }
      else if ([value isKindOfClass:[JavaLangFloat class]]) {
        jfloat number = [((NSNumber *) cast_chk(value, [NSNumber class])) floatValue];
        [self bindDoubleWithInt:i + 1 withDouble:[JavaLangDouble_valueOfWithDouble_(number) doubleValue]];
      }
      else if ([value isKindOfClass:[JavaLangLong class]]) {
        [self bindLongWithInt:i + 1 withLong:[(JavaLangLong *) cast_chk(value, [JavaLangLong class]) longLongValue]];
      }
      else if ([value isKindOfClass:[JavaLangInteger class]]) {
        jint number = [((NSNumber *) cast_chk(value, [NSNumber class])) intValue];
        [self bindLongWithInt:i + 1 withLong:[JavaLangLong_valueOfWithLong_(number) longLongValue]];
      }
      else if ([value isKindOfClass:[JavaLangBoolean class]]) {
        [self bindLongWithInt:i + 1 withLong:[(JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]) booleanValue] ? 1 : 0];
      }
      else if ([value isKindOfClass:[IOSByteArray class]]) {
        [self bindBlobWithInt:i + 1 withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
      }
      else {
        [self bindStringWithInt:i + 1 withNSString:[value description]];
      }
    }
  }
}

- (jint)native_fill_windowWithNetSqlcipherCursorWindow:(NetSqlcipherCursorWindow *)window
                                               withInt:(jint)startPos
                                               withInt:(jint)offsetParam
                                               withInt:(jint)maxRead
                                               withInt:(jint)lastPos {
  return NetSqlcipherDatabaseSQLiteQuery_native_fill_windowWithNetSqlcipherCursorWindow_withInt_withInt_withInt_withInt_(self, window, startPos, offsetParam, maxRead, lastPos);
}

- (jint)native_column_count {
  return NetSqlcipherDatabaseSQLiteQuery_native_column_count(self);
}

- (NSString *)native_column_nameWithInt:(jint)columnIndex {
  return NetSqlcipherDatabaseSQLiteQuery_native_column_nameWithInt_(self, columnIndex);
}

- (void)dealloc {
  RELEASE_(mBindArgs_);
  RELEASE_(mObjectBindArgs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x112, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x112, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x112, 18, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:withInt:withNSStringArray:);
  methods[1].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:withInt:withNSObjectArray:);
  methods[2].selector = @selector(fillWindowWithNetSqlcipherCursorWindow:withInt:withInt:);
  methods[3].selector = @selector(columnCountLocked);
  methods[4].selector = @selector(columnNameLockedWithInt:);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(requery);
  methods[7].selector = @selector(bindNullWithInt:);
  methods[8].selector = @selector(bindLongWithInt:withLong:);
  methods[9].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[10].selector = @selector(bindStringWithInt:withNSString:);
  methods[11].selector = @selector(bindArgumentsWithNSObjectArray:);
  methods[12].selector = @selector(native_fill_windowWithNetSqlcipherCursorWindow:withInt:withInt:withInt:withInt:);
  methods[13].selector = @selector(native_column_count);
  methods[14].selector = @selector(native_column_nameWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "mOffsetIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mObjectBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;I[LNSString;", "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;I[LNSObject;", "fillWindow", "LNetSqlcipherCursorWindow;II", "columnNameLocked", "I", "toString", "bindNull", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindArguments", "[LNSObject;", "native_fill_window", "LNetSqlcipherCursorWindow;IIII", "native_column_name", &NetSqlcipherDatabaseSQLiteQuery_TAG };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteQuery = { "SQLiteQuery", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteQuery;
}

@end

void NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  NetSqlcipherDatabaseSQLiteProgram_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, db, query);
  self->mOffsetIndex_ = offsetIndex;
  JreStrongAssign(&self->mBindArgs_, bindArgs);
}

NetSqlcipherDatabaseSQLiteQuery *new_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteQuery, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_, db, query, offsetIndex, bindArgs)
}

NetSqlcipherDatabaseSQLiteQuery *create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteQuery, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_, db, query, offsetIndex, bindArgs)
}

void NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  NetSqlcipherDatabaseSQLiteProgram_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, db, query);
  self->mOffsetIndex_ = offsetIndex;
  JreStrongAssign(&self->mObjectBindArgs_, bindArgs);
  jint length = self->mObjectBindArgs_ != nil ? self->mObjectBindArgs_->size_ : 0;
  JreStrongAssignAndConsume(&self->mBindArgs_, [IOSObjectArray newArrayWithLength:length type:NSString_class_()]);
}

NetSqlcipherDatabaseSQLiteQuery *new_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteQuery, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_, db, query, offsetIndex, bindArgs)
}

NetSqlcipherDatabaseSQLiteQuery *create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteQuery, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_, db, query, offsetIndex, bindArgs)
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteQuery_native_1fill_1window(JNIEnv *_env_, jobject self, jobject window, jint startPos, jint offsetParam, jint maxRead, jint lastPos);

jint NetSqlcipherDatabaseSQLiteQuery_native_fill_windowWithNetSqlcipherCursorWindow_withInt_withInt_withInt_withInt_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherCursorWindow *window, jint startPos, jint offsetParam, jint maxRead, jint lastPos) {
  return Java_net_sqlcipher_database_SQLiteQuery_native_1fill_1window(&J2ObjC_JNIEnv, self, window, startPos, offsetParam, maxRead, lastPos);
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteQuery_native_1column_1count(JNIEnv *_env_, jobject self);

jint NetSqlcipherDatabaseSQLiteQuery_native_column_count(NetSqlcipherDatabaseSQLiteQuery *self) {
  return Java_net_sqlcipher_database_SQLiteQuery_native_1column_1count(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jstring Java_net_sqlcipher_database_SQLiteQuery_native_1column_1name(JNIEnv *_env_, jobject self, jint columnIndex);

NSString *NetSqlcipherDatabaseSQLiteQuery_native_column_nameWithInt_(NetSqlcipherDatabaseSQLiteQuery *self, jint columnIndex) {
  return (NSString *) Java_net_sqlcipher_database_SQLiteQuery_native_1column_1name(&J2ObjC_JNIEnv, self, columnIndex);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteQuery)
