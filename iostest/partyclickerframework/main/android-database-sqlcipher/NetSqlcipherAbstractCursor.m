//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidDatabaseDataSetObservable.h"
#include "AndroidDatabaseDataSetObserver.h"
#include "AndroidOsBundle.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherAbstractCursor.h"
#include "NetSqlcipherCursorIndexOutOfBoundsException.h"
#include "NetSqlcipherCursorWindow.h"
#include "NetSqlcipherDatabaseUtils.h"
#include "android/util/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface NetSqlcipherAbstractCursor () {
 @public
  AndroidOsBundle *mExtras_;
  id mSelfObserverLock_;
}

@end

J2OBJC_FIELD_SETTER(NetSqlcipherAbstractCursor, mExtras_, AndroidOsBundle *)
J2OBJC_FIELD_SETTER(NetSqlcipherAbstractCursor, mSelfObserverLock_, id)

inline NSString *NetSqlcipherAbstractCursor_get_TAG();
static NSString *NetSqlcipherAbstractCursor_TAG = @"Cursor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherAbstractCursor, TAG, NSString *)

__attribute__((unused)) static jboolean NetSqlcipherAbstractCursor_moveToPositionWithInt_(NetSqlcipherAbstractCursor *self, jint position);

@implementation NetSqlcipherAbstractCursor

- (jint)getCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getColumnNames {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getStringWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jshort)getShortWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getIntWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getLongWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jfloat)getFloatWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getDoubleWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isNullWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getTypeWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"getBlob is not supported");
}

- (NetSqlcipherCursorWindow *)getWindow {
  return nil;
}

- (jint)getColumnCount {
  return ((IOSObjectArray *) nil_chk([self getColumnNames]))->size_;
}

- (void)deactivate {
  [self deactivateInternal];
}

- (void)deactivateInternal {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyInvalidated];
}

- (jboolean)requery {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyChanged];
  return true;
}

- (jboolean)isClosed {
  return mClosed_;
}

- (void)close {
  mClosed_ = true;
  [self deactivateInternal];
}

- (jboolean)commitUpdatesWithJavaUtilMap:(id<JavaUtilMap>)values {
  return false;
}

- (jboolean)deleteRow {
  return false;
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  return true;
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  NSString *result = [self getStringWithInt:columnIndex];
  if (result != nil) {
    IOSCharArray *data = ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->data_;
    if (data == nil || data->size_ < [result java_length]) {
      JreStrongAssign(&buffer->data_, [result java_toCharArray]);
    }
    else {
      [result java_getChars:0 sourceEnd:[result java_length] destination:data destinationBegin:0];
    }
    buffer->sizeCopied_ = [result java_length];
  }
  else {
    ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->sizeCopied_ = 0;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherAbstractCursor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getPosition {
  return mPos_;
}

- (jboolean)moveToPositionWithInt:(jint)position {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, position);
}

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  NetSqlcipherDatabaseUtils_cursorFillWindowWithNetSqlcipherCursor_withInt_withAndroidDatabaseCursorWindow_(self, position, window);
}

- (jboolean)moveWithInt:(jint)offset {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, mPos_ + offset);
}

- (jboolean)moveToFirst {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, 0);
}

- (jboolean)moveToLast {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, [self getCount] - 1);
}

- (jboolean)moveToNext {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, mPos_ + 1);
}

- (jboolean)moveToPrevious {
  return NetSqlcipherAbstractCursor_moveToPositionWithInt_(self, mPos_ - 1);
}

- (jboolean)isFirst {
  return mPos_ == 0 && [self getCount] != 0;
}

- (jboolean)isLast {
  jint cnt = [self getCount];
  return mPos_ == (cnt - 1) && cnt != 0;
}

- (jboolean)isBeforeFirst {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == -1;
}

- (jboolean)isAfterLast {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == [self getCount];
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  jint periodIndex = [((NSString *) nil_chk(columnName)) java_lastIndexOf:'.'];
  if (periodIndex != -1) {
    JavaLangException *e = create_JavaLangException_init();
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherAbstractCursor_TAG, JreStrcat("$$", @"requesting column name with table name -- ", columnName), e);
    columnName = [columnName java_substring:periodIndex + 1];
  }
  IOSObjectArray *columnNames = [self getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) java_equalsIgnoreCase:columnName]) {
      return i;
    }
  }
  {
    if ([self getCount] > 0) {
      AndroidUtilLog_wWithNSString_withNSString_(@"AbstractCursor", JreStrcat("$$", @"Unknown column ", columnName));
    }
  }
  return -1;
}

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName {
  jint index = [self getColumnIndexWithNSString:columnName];
  if (index < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", columnName, @"' does not exist"));
  }
  return index;
}

- (NSString *)getColumnNameWithInt:(jint)columnIndex {
  return IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex);
}

- (jboolean)updateBlobWithInt:(jint)columnIndex
                withByteArray:(IOSByteArray *)value {
  return [self updateWithInt:columnIndex withId:value];
}

- (jboolean)updateStringWithInt:(jint)columnIndex
                   withNSString:(NSString *)value {
  return [self updateWithInt:columnIndex withId:value];
}

- (jboolean)updateShortWithInt:(jint)columnIndex
                     withShort:(jshort)value {
  return [self updateWithInt:columnIndex withId:JavaLangShort_valueOfWithShort_(value)];
}

- (jboolean)updateIntWithInt:(jint)columnIndex
                     withInt:(jint)value {
  return [self updateWithInt:columnIndex withId:JavaLangInteger_valueOfWithInt_(value)];
}

- (jboolean)updateLongWithInt:(jint)columnIndex
                     withLong:(jlong)value {
  return [self updateWithInt:columnIndex withId:JavaLangLong_valueOfWithLong_(value)];
}

- (jboolean)updateFloatWithInt:(jint)columnIndex
                     withFloat:(jfloat)value {
  return [self updateWithInt:columnIndex withId:JavaLangFloat_valueOfWithFloat_(value)];
}

- (jboolean)updateDoubleWithInt:(jint)columnIndex
                     withDouble:(jdouble)value {
  return [self updateWithInt:columnIndex withId:JavaLangDouble_valueOfWithDouble_(value)];
}

- (jboolean)updateToNullWithInt:(jint)columnIndex {
  return [self updateWithInt:columnIndex withId:nil];
}

- (jboolean)updateWithInt:(jint)columnIndex
                   withId:(id)obj {
  if (![self supportsUpdates]) {
    return false;
  }
  JavaLangLong *rowid = JavaLangLong_valueOfWithLong_([self getLongWithInt:mRowIdColumnIndex_]);
  if (rowid == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"null rowid. mRowIdColumnIndex = ", mRowIdColumnIndex_));
  }
  @synchronized(mUpdatedRows_) {
    id<JavaUtilMap> row = [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) getWithId:rowid];
    if (row == nil) {
      row = create_JavaUtilHashMap_init();
      [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) putWithId:rowid withId:row];
    }
    [row putWithId:IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex) withId:obj];
  }
  return true;
}

- (jboolean)hasUpdates {
  @synchronized(mUpdatedRows_) {
    return [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) size] > 0;
  }
}

- (void)abortUpdates {
  @synchronized(mUpdatedRows_) {
    [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) clear];
  }
}

- (jboolean)commitUpdates {
  return [self commitUpdatesWithJavaUtilMap:nil];
}

- (jboolean)supportsUpdates {
  return mRowIdColumnIndex_ != -1;
}

- (void)notifyDataSetChange {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyChanged];
}

- (AndroidDatabaseDataSetObservable *)getDataSetObservable {
  return mDataSetObservable_;
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) registerObserverWithId:observer];
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) unregisterObserverWithId:observer];
}

- (void)onChangeWithBoolean:(jboolean)selfChange {
  @synchronized(mSelfObserverLock_) {
  }
}

- (jboolean)getWantsAllOnMoveCalls {
  return false;
}

- (void)setExtrasWithAndroidOsBundle:(AndroidOsBundle *)extras {
  JreStrongAssign(&mExtras_, (extras == nil) ? JreLoadStatic(AndroidOsBundle, EMPTY) : extras);
}

- (AndroidOsBundle *)getExtras {
  return mExtras_;
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  return JreLoadStatic(AndroidOsBundle, EMPTY);
}

- (jboolean)isFieldUpdatedWithInt:(jint)columnIndex {
  if (mRowIdColumnIndex_ != -1 && [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) size] > 0) {
    id<JavaUtilMap> updates = [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) getWithId:mCurrentRowID_];
    if (updates != nil && [updates containsKeyWithId:IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex)]) {
      return true;
    }
  }
  return false;
}

- (id)getUpdatedFieldWithInt:(jint)columnIndex {
  id<JavaUtilMap> updates = [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) getWithId:mCurrentRowID_];
  return [((id<JavaUtilMap>) nil_chk(updates)) getWithId:IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex)];
}

- (void)checkPosition {
  if (-1 == mPos_ || [self getCount] == mPos_) {
    @throw create_NetSqlcipherCursorIndexOutOfBoundsException_initWithInt_withInt_(mPos_, [self getCount]);
  }
}

- (void)java_finalize {
}

- (void)dealloc {
  JreCheckFinalize(self, [NetSqlcipherAbstractCursor class]);
  RELEASE_(mDataSetObservable_);
  RELEASE_(mExtras_);
  RELEASE_(mUpdatedRows_);
  RELEASE_(mCurrentRowID_);
  RELEASE_(mSelfObserverLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 5, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 8, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursorWindow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 20, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseDataSetObservable;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 44, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 48, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 49, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 50, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 51, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getCount);
  methods[1].selector = @selector(getColumnNames);
  methods[2].selector = @selector(getStringWithInt:);
  methods[3].selector = @selector(getShortWithInt:);
  methods[4].selector = @selector(getIntWithInt:);
  methods[5].selector = @selector(getLongWithInt:);
  methods[6].selector = @selector(getFloatWithInt:);
  methods[7].selector = @selector(getDoubleWithInt:);
  methods[8].selector = @selector(isNullWithInt:);
  methods[9].selector = @selector(getTypeWithInt:);
  methods[10].selector = @selector(getBlobWithInt:);
  methods[11].selector = @selector(getWindow);
  methods[12].selector = @selector(getColumnCount);
  methods[13].selector = @selector(deactivate);
  methods[14].selector = @selector(deactivateInternal);
  methods[15].selector = @selector(requery);
  methods[16].selector = @selector(isClosed);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(commitUpdatesWithJavaUtilMap:);
  methods[19].selector = @selector(deleteRow);
  methods[20].selector = @selector(onMoveWithInt:withInt:);
  methods[21].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[22].selector = @selector(init);
  methods[23].selector = @selector(getPosition);
  methods[24].selector = @selector(moveToPositionWithInt:);
  methods[25].selector = @selector(fillWindowWithInt:withAndroidDatabaseCursorWindow:);
  methods[26].selector = @selector(moveWithInt:);
  methods[27].selector = @selector(moveToFirst);
  methods[28].selector = @selector(moveToLast);
  methods[29].selector = @selector(moveToNext);
  methods[30].selector = @selector(moveToPrevious);
  methods[31].selector = @selector(isFirst);
  methods[32].selector = @selector(isLast);
  methods[33].selector = @selector(isBeforeFirst);
  methods[34].selector = @selector(isAfterLast);
  methods[35].selector = @selector(getColumnIndexWithNSString:);
  methods[36].selector = @selector(getColumnIndexOrThrowWithNSString:);
  methods[37].selector = @selector(getColumnNameWithInt:);
  methods[38].selector = @selector(updateBlobWithInt:withByteArray:);
  methods[39].selector = @selector(updateStringWithInt:withNSString:);
  methods[40].selector = @selector(updateShortWithInt:withShort:);
  methods[41].selector = @selector(updateIntWithInt:withInt:);
  methods[42].selector = @selector(updateLongWithInt:withLong:);
  methods[43].selector = @selector(updateFloatWithInt:withFloat:);
  methods[44].selector = @selector(updateDoubleWithInt:withDouble:);
  methods[45].selector = @selector(updateToNullWithInt:);
  methods[46].selector = @selector(updateWithInt:withId:);
  methods[47].selector = @selector(hasUpdates);
  methods[48].selector = @selector(abortUpdates);
  methods[49].selector = @selector(commitUpdates);
  methods[50].selector = @selector(supportsUpdates);
  methods[51].selector = @selector(notifyDataSetChange);
  methods[52].selector = @selector(getDataSetObservable);
  methods[53].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[54].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[55].selector = @selector(onChangeWithBoolean:);
  methods[56].selector = @selector(getWantsAllOnMoveCalls);
  methods[57].selector = @selector(setExtrasWithAndroidOsBundle:);
  methods[58].selector = @selector(getExtras);
  methods[59].selector = @selector(respondWithAndroidOsBundle:);
  methods[60].selector = @selector(isFieldUpdatedWithInt:);
  methods[61].selector = @selector(getUpdatedFieldWithInt:);
  methods[62].selector = @selector(checkPosition);
  methods[63].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "mDataSetObservable_", "LAndroidDatabaseDataSetObservable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mExtras_", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUpdatedRows_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 53, -1 },
    { "mRowIdColumnIndex_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPos_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCurrentRowID_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mClosed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSelfObserverLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getString", "I", "getShort", "getInt", "getLong", "getFloat", "getDouble", "isNull", "getType", "getBlob", "commitUpdates", "LJavaUtilMap;", "(Ljava/util/Map<+Ljava/lang/Long;+Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;)Z", "onMove", "II", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "moveToPosition", "fillWindow", "ILAndroidDatabaseCursorWindow;", "move", "getColumnIndex", "LNSString;", "getColumnIndexOrThrow", "getColumnName", "updateBlob", "I[B", "updateString", "ILNSString;", "updateShort", "IS", "updateInt", "updateLong", "IJ", "updateFloat", "IF", "updateDouble", "ID", "updateToNull", "update", "ILNSObject;", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver", "onChange", "Z", "setExtras", "LAndroidOsBundle;", "respond", "isFieldUpdated", "getUpdatedField", "finalize", &NetSqlcipherAbstractCursor_TAG, "Ljava/util/HashMap<Ljava/lang/Long;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _NetSqlcipherAbstractCursor = { "AbstractCursor", "net.sqlcipher", ptrTable, methods, fields, 7, 0x401, 64, 9, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherAbstractCursor;
}

@end

void NetSqlcipherAbstractCursor_init(NetSqlcipherAbstractCursor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mDataSetObservable_, new_AndroidDatabaseDataSetObservable_init());
  JreStrongAssign(&self->mExtras_, JreLoadStatic(AndroidOsBundle, EMPTY));
  self->mClosed_ = false;
  JreStrongAssignAndConsume(&self->mSelfObserverLock_, new_NSObject_init());
  self->mPos_ = -1;
  self->mRowIdColumnIndex_ = -1;
  JreStrongAssign(&self->mCurrentRowID_, nil);
  JreStrongAssignAndConsume(&self->mUpdatedRows_, new_JavaUtilHashMap_init());
}

jboolean NetSqlcipherAbstractCursor_moveToPositionWithInt_(NetSqlcipherAbstractCursor *self, jint position) {
  jint count = [self getCount];
  if (position >= count) {
    self->mPos_ = count;
    return false;
  }
  if (position < 0) {
    self->mPos_ = -1;
    return false;
  }
  if (position == self->mPos_) {
    return true;
  }
  jboolean result = [self onMoveWithInt:self->mPos_ withInt:position];
  if (result == false) {
    self->mPos_ = -1;
  }
  else {
    self->mPos_ = position;
    if (self->mRowIdColumnIndex_ != -1) {
      JreStrongAssign(&self->mCurrentRowID_, JavaLangLong_valueOfWithLong_([self getLongWithInt:self->mRowIdColumnIndex_]));
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherAbstractCursor)
