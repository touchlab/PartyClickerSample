//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseSQLiteClosable.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteProgram.h"
#include "NetSqlcipherDatabaseSQLiteQuery.h"
#include "NetSqlcipherDatabaseSQLiteStatement.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"

@interface NetSqlcipherDatabaseSQLiteClosable () {
 @public
  jint mReferenceCount_;
  id mLock_;
}

- (NSString *)getObjInfo;

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteClosable, mLock_, id)

__attribute__((unused)) static NSString *NetSqlcipherDatabaseSQLiteClosable_getObjInfo(NetSqlcipherDatabaseSQLiteClosable *self);

@implementation NetSqlcipherDatabaseSQLiteClosable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDatabaseSQLiteClosable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onAllReferencesReleased {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onAllReferencesReleasedFromContainer {
}

- (void)acquireReference {
  @synchronized(mLock_) {
    if (mReferenceCount_ <= 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"attempt to re-open an already-closed object: ", NetSqlcipherDatabaseSQLiteClosable_getObjInfo(self)));
    }
    mReferenceCount_++;
  }
}

- (void)releaseReference {
  @synchronized(mLock_) {
    mReferenceCount_--;
    if (mReferenceCount_ == 0) {
      [self onAllReferencesReleased];
    }
  }
}

- (void)releaseReferenceFromContainer {
  @synchronized(mLock_) {
    mReferenceCount_--;
    if (mReferenceCount_ == 0) {
      [self onAllReferencesReleasedFromContainer];
    }
  }
}

- (NSString *)getObjInfo {
  return NetSqlcipherDatabaseSQLiteClosable_getObjInfo(self);
}

- (void)dealloc {
  RELEASE_(mLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onAllReferencesReleased);
  methods[2].selector = @selector(onAllReferencesReleasedFromContainer);
  methods[3].selector = @selector(acquireReference);
  methods[4].selector = @selector(releaseReference);
  methods[5].selector = @selector(releaseReferenceFromContainer);
  methods[6].selector = @selector(getObjInfo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReferenceCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteClosable = { "SQLiteClosable", "net.sqlcipher.database", NULL, methods, fields, 7, 0x401, 7, 2, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteClosable;
}

@end

void NetSqlcipherDatabaseSQLiteClosable_init(NetSqlcipherDatabaseSQLiteClosable *self) {
  NSObject_init(self);
  self->mReferenceCount_ = 1;
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
}

NSString *NetSqlcipherDatabaseSQLiteClosable_getObjInfo(NetSqlcipherDatabaseSQLiteClosable *self) {
  JavaLangStringBuilder *buff = create_JavaLangStringBuilder_init();
  [buff appendWithNSString:[[self java_getClass] getName]];
  [buff appendWithNSString:@" ("];
  if ([self isKindOfClass:[NetSqlcipherDatabaseSQLiteDatabase class]]) {
    [buff appendWithNSString:@"database = "];
    [buff appendWithNSString:[((NetSqlcipherDatabaseSQLiteDatabase *) cast_chk(self, [NetSqlcipherDatabaseSQLiteDatabase class])) getPath]];
  }
  else if ([self isKindOfClass:[NetSqlcipherDatabaseSQLiteProgram class]] || [self isKindOfClass:[NetSqlcipherDatabaseSQLiteStatement class]] || [self isKindOfClass:[NetSqlcipherDatabaseSQLiteQuery class]]) {
    [buff appendWithNSString:@"mSql = "];
    [buff appendWithNSString:((NetSqlcipherDatabaseSQLiteProgram *) cast_chk(self, [NetSqlcipherDatabaseSQLiteProgram class]))->mSql_];
  }
  [buff appendWithNSString:@") "];
  return [buff description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteClosable)
