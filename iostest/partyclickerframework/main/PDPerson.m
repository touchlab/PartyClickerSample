//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "PDDaoSession.h"
#include "PDParty.h"
#include "PDPartyDao.h"
#include "PDPerson.h"
#include "PDPersonDao.h"
#include "java/lang/Long.h"
#include "java/text/DateFormat.h"
#include "java/util/Date.h"

@interface PDPerson () {
 @public
  PDDaoSession *daoSession_;
  PDPersonDao *myDao_;
  JavaLangLong *party__resolvedKey_;
}

@end

J2OBJC_FIELD_SETTER(PDPerson, daoSession_, PDDaoSession *)
J2OBJC_FIELD_SETTER(PDPerson, myDao_, PDPersonDao *)
J2OBJC_FIELD_SETTER(PDPerson, party__resolvedKey_, JavaLangLong *)

inline JavaTextDateFormat *PDPerson_get_standardTimeFormat();
static JavaTextDateFormat *PDPerson_standardTimeFormat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(PDPerson, standardTimeFormat, JavaTextDateFormat *)

J2OBJC_INITIALIZED_DEFN(PDPerson)

@implementation PDPerson

- (instancetype)initWithJavaLangLong:(JavaLangLong *)id_
                    withJavaUtilDate:(JavaUtilDate *)recorded
                           withShort:(jshort)val
                            withLong:(jlong)partyId {
  PDPerson_initWithJavaLangLong_withJavaUtilDate_withShort_withLong_(self, id_, recorded, val, partyId);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PDPerson_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)recordedString {
  return [((JavaTextDateFormat *) nil_chk(PDPerson_standardTimeFormat)) formatWithJavaUtilDate:recorded_];
}

- (JavaLangLong *)getId {
  return self->id__;
}

- (void)setIdWithJavaLangLong:(JavaLangLong *)id_ {
  JreStrongAssign(&self->id__, id_);
}

- (JavaUtilDate *)getRecorded {
  return self->recorded_;
}

- (void)setRecordedWithJavaUtilDate:(JavaUtilDate *)recorded {
  JreStrongAssign(&self->recorded_, recorded);
}

- (jshort)getVal {
  return self->val_;
}

- (void)setValWithShort:(jshort)val {
  self->val_ = val;
}

- (PDParty *)getParty {
  jlong __key = self->partyId_;
  if (party__resolvedKey_ == nil || ![party__resolvedKey_ isEqual:JavaLangLong_valueOfWithLong_(__key)]) {
    PDDaoSession *daoSession = self->daoSession_;
    if (daoSession == nil) {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Entity is detached from DAO context");
    }
    PDPartyDao *targetDao = [daoSession getPartyDao];
    PDParty *partyNew = [((PDPartyDao *) nil_chk(targetDao)) load__WithId:JavaLangLong_valueOfWithLong_(__key)];
    @synchronized(self) {
      JreStrongAssign(&party_, partyNew);
      JreStrongAssign(&party__resolvedKey_, JavaLangLong_valueOfWithLong_(__key));
    }
  }
  return party_;
}

- (void)setPartyWithPDParty:(PDParty *)party {
  if (party == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"To-one property 'partyId' has not-null constraint; cannot set to-one to null");
  }
  @synchronized(self) {
    JreStrongAssign(&self->party_, party);
    partyId_ = [((JavaLangLong *) nil_chk([party getId])) longLongValue];
    JreStrongAssign(&party__resolvedKey_, JavaLangLong_valueOfWithLong_(partyId_));
  }
}

- (void)delete__ {
  if (myDao_ == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Entity is detached from DAO context");
  }
  [myDao_ delete__WithId:self];
}

- (void)refresh {
  if (myDao_ == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Entity is detached from DAO context");
  }
  [myDao_ refreshWithId:self];
}

- (void)update {
  if (myDao_ == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Entity is detached from DAO context");
  }
  [myDao_ updateWithId:self];
}

- (jlong)getPartyId {
  return self->partyId_;
}

- (void)setPartyIdWithLong:(jlong)partyId {
  self->partyId_ = partyId;
}

- (void)__setDaoSessionWithPDDaoSession:(PDDaoSession *)daoSession {
  JreStrongAssign(&self->daoSession_, daoSession);
  JreStrongAssign(&myDao_, daoSession != nil ? [daoSession getPersonDao] : nil);
}

- (void)dealloc {
  RELEASE_(id__);
  RELEASE_(recorded_);
  RELEASE_(party_);
  RELEASE_(daoSession_);
  RELEASE_(myDao_);
  RELEASE_(party__resolvedKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LPDParty;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangLong:withJavaUtilDate:withShort:withLong:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(recordedString);
  methods[3].selector = @selector(getId);
  methods[4].selector = @selector(setIdWithJavaLangLong:);
  methods[5].selector = @selector(getRecorded);
  methods[6].selector = @selector(setRecordedWithJavaUtilDate:);
  methods[7].selector = @selector(getVal);
  methods[8].selector = @selector(setValWithShort:);
  methods[9].selector = @selector(getParty);
  methods[10].selector = @selector(setPartyWithPDParty:);
  methods[11].selector = @selector(delete__);
  methods[12].selector = @selector(refresh);
  methods[13].selector = @selector(update);
  methods[14].selector = @selector(getPartyId);
  methods[15].selector = @selector(setPartyIdWithLong:);
  methods[16].selector = @selector(__setDaoSessionWithPDDaoSession:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "standardTimeFormat", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "id__", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, 15, -1, -1, -1 },
    { "recorded_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "val_", "S", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "partyId_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "party_", "LPDParty;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "daoSession_", "LPDDaoSession;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "myDao_", "LPDPersonDao;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "party__resolvedKey_", "LJavaLangLong;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;LJavaUtilDate;SJ", "setId", "LJavaLangLong;", "setRecorded", "LJavaUtilDate;", "setVal", "S", "setParty", "LPDParty;", "delete", "setPartyId", "J", "__setDaoSession", "LPDDaoSession;", &PDPerson_standardTimeFormat, "id" };
  static const J2ObjcClassInfo _PDPerson = { "Person", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x1, 17, 9, -1, -1, -1, -1, -1 };
  return &_PDPerson;
}

+ (void)initialize {
  if (self == [PDPerson class]) {
    JreStrongAssign(&PDPerson_standardTimeFormat, JavaTextDateFormat_getTimeInstanceWithInt_(JavaTextDateFormat_MEDIUM));
    J2OBJC_SET_INITIALIZED(PDPerson)
  }
}

@end

void PDPerson_initWithJavaLangLong_withJavaUtilDate_withShort_withLong_(PDPerson *self, JavaLangLong *id_, JavaUtilDate *recorded, jshort val, jlong partyId) {
  NSObject_init(self);
  JreStrongAssign(&self->id__, id_);
  JreStrongAssign(&self->recorded_, recorded);
  self->val_ = val;
  self->partyId_ = partyId;
}

PDPerson *new_PDPerson_initWithJavaLangLong_withJavaUtilDate_withShort_withLong_(JavaLangLong *id_, JavaUtilDate *recorded, jshort val, jlong partyId) {
  J2OBJC_NEW_IMPL(PDPerson, initWithJavaLangLong_withJavaUtilDate_withShort_withLong_, id_, recorded, val, partyId)
}

PDPerson *create_PDPerson_initWithJavaLangLong_withJavaUtilDate_withShort_withLong_(JavaLangLong *id_, JavaUtilDate *recorded, jshort val, jlong partyId) {
  J2OBJC_CREATE_IMPL(PDPerson, initWithJavaLangLong_withJavaUtilDate_withShort_withLong_, id_, recorded, val, partyId)
}

void PDPerson_init(PDPerson *self) {
  NSObject_init(self);
}

PDPerson *new_PDPerson_init() {
  J2OBJC_NEW_IMPL(PDPerson, init)
}

PDPerson *create_PDPerson_init() {
  J2OBJC_CREATE_IMPL(PDPerson, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDPerson)
