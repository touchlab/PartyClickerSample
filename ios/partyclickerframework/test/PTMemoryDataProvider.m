//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDPartyIntf.h"
#include "PDPerson.h"
#include "PDPersonIntf.h"
#include "PTAutoValue_MemParty.h"
#include "PTMemParty.h"
#include "PTMemoryDataProvider.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation PTMemoryDataProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PTMemoryDataProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)allParties {
  return parties_;
}

- (id<PDPartyIntf>)loadPartyWithInt:(jint)id_ {
  for (id<PDPartyIntf> __strong party in nil_chk(parties_)) {
    if ([((id<PDPartyIntf>) nil_chk(party)) id__] == id_) return party;
  }
  return nil;
}

- (id<PDPartyIntf>)createPartyWithNSString:(NSString *)name {
  PTMemParty *party = [((PTMemParty_Builder *) nil_chk([((PTMemParty_Builder *) nil_chk([((PTMemParty_Builder *) nil_chk([((PTMemParty_Builder *) nil_chk([create_PTAutoValue_MemParty_Builder_init() setCreatedWithLong:JavaLangSystem_currentTimeMillis()])) setNameWithNSString:name])) setIdWithLong:idCounter_++])) setPeopleWithJavaUtilList:create_JavaUtilArrayList_init()])) build];
  [((id<JavaUtilList>) nil_chk(parties_)) addWithId:party];
  return party;
}

- (void)deletePartyWithPDPartyIntf:(id<PDPartyIntf>)party {
  id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(parties_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<PDPartyIntf> next = [iterator next];
    if ([((id<PDPartyIntf>) nil_chk(party)) id__] == [((id<PDPartyIntf>) nil_chk(next)) id__]) {
      [iterator remove];
      return;
    }
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$", @"Party ", [((id<PDPartyIntf>) nil_chk(party)) id__], @" not found"));
}

- (jint)countCurrentPartyWithInt:(jint)id_ {
  PTMemParty *party = (PTMemParty *) cast_chk([self loadPartyWithInt:id_], [PTMemParty class]);
  jint sum = 0;
  for (id<PDPersonIntf> __strong person in nil_chk([((PTMemParty *) nil_chk(party)) people])) {
    sum += [((id<PDPersonIntf>) nil_chk(person)) val];
  }
  return sum;
}

- (id<JavaUtilList>)allPeopleForPartyWithPDPartyIntf:(id<PDPartyIntf>)party {
  return [((PTMemParty *) nil_chk(((PTMemParty *) cast_chk(party, [PTMemParty class])))) people];
}

- (void)addPersonWithPDPartyIntf:(id<PDPartyIntf>)party
                     withBoolean:(jboolean)coming {
  PDPerson *person = PDPerson_createWithLong_withLong_withLong_withLong_(idCounter_++, JavaLangSystem_currentTimeMillis(), (jshort) (coming ? 1 : -1), [((id<PDPartyIntf>) nil_chk(party)) id__]);
  [((id<JavaUtilList>) nil_chk([((PTMemParty *) cast_chk(party, [PTMemParty class])) people])) addWithId:person];
}

- (void)dealloc {
  RELEASE_(parties_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LPDPartyIntf;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LPDPartyIntf;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(allParties);
  methods[2].selector = @selector(loadPartyWithInt:);
  methods[3].selector = @selector(createPartyWithNSString:);
  methods[4].selector = @selector(deletePartyWithPDPartyIntf:);
  methods[5].selector = @selector(countCurrentPartyWithInt:);
  methods[6].selector = @selector(allPeopleForPartyWithPDPartyIntf:);
  methods[7].selector = @selector(addPersonWithPDPartyIntf:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "idCounter_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "parties_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Lcom/kgalligan/partyclicker/data/PartyIntf;>;", "loadParty", "I", "createParty", "LNSString;", "deleteParty", "LPDPartyIntf;", "countCurrentParty", "allPeopleForParty", "(Lcom/kgalligan/partyclicker/data/PartyIntf;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/PersonIntf;>;", "addPerson", "LPDPartyIntf;Z", "Ljava/util/List<Lcom/kgalligan/partyclicker/data/PartyIntf;>;" };
  static const J2ObjcClassInfo _PTMemoryDataProvider = { "MemoryDataProvider", "com.kgalligan.partyclicker.test", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_PTMemoryDataProvider;
}

@end

void PTMemoryDataProvider_init(PTMemoryDataProvider *self) {
  NSObject_init(self);
  JreAssignVolatileInt(&self->idCounter_, 111);
  JreStrongAssignAndConsume(&self->parties_, new_JavaUtilArrayList_init());
}

PTMemoryDataProvider *new_PTMemoryDataProvider_init() {
  J2OBJC_NEW_IMPL(PTMemoryDataProvider, init)
}

PTMemoryDataProvider *create_PTMemoryDataProvider_init() {
  J2OBJC_CREATE_IMPL(PTMemoryDataProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PTMemoryDataProvider)
