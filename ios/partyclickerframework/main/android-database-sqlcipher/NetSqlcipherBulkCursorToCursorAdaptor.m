//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "AndroidDatabaseDataSetObserver.h"
#include "AndroidOsBundle.h"
#include "AndroidOsRemoteException.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherAbstractWindowedCursor.h"
#include "NetSqlcipherBulkCursorToCursorAdaptor.h"
#include "NetSqlcipherCursorWindow.h"
#include "NetSqlcipherIBulkCursor.h"
#include "android/util/Log.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface NetSqlcipherBulkCursorToCursorAdaptor () {
 @public
  id<NetSqlcipherIBulkCursor> mBulkCursor_;
  jint mCount_;
  IOSObjectArray *mColumns_;
  jboolean mWantsAllOnMoveCalls_;
}

@end

J2OBJC_FIELD_SETTER(NetSqlcipherBulkCursorToCursorAdaptor, mBulkCursor_, id<NetSqlcipherIBulkCursor>)
J2OBJC_FIELD_SETTER(NetSqlcipherBulkCursorToCursorAdaptor, mColumns_, IOSObjectArray *)

inline NSString *NetSqlcipherBulkCursorToCursorAdaptor_get_TAG();
static NSString *NetSqlcipherBulkCursorToCursorAdaptor_TAG = @"BulkCursor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherBulkCursorToCursorAdaptor, TAG, NSString *)

@implementation NetSqlcipherBulkCursorToCursorAdaptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherBulkCursorToCursorAdaptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setWithNetSqlcipherIBulkCursor:(id<NetSqlcipherIBulkCursor>)bulkCursor {
  JreStrongAssign(&mBulkCursor_, bulkCursor);
  @try {
    mCount_ = [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) count];
    mWantsAllOnMoveCalls_ = [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getWantsAllOnMoveCalls];
    JreStrongAssign(&mColumns_, [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getColumnNames]);
    mRowIdColumnIndex_ = NetSqlcipherBulkCursorToCursorAdaptor_findRowIdColumnIndexWithNSStringArray_(mColumns_);
  }
  @catch (AndroidOsRemoteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Setup failed because the remote process is dead");
  }
}

- (void)setWithNetSqlcipherIBulkCursor:(id<NetSqlcipherIBulkCursor>)bulkCursor
                               withInt:(jint)count
                               withInt:(jint)idIndex {
  JreStrongAssign(&mBulkCursor_, bulkCursor);
  JreStrongAssign(&mColumns_, nil);
  mCount_ = count;
  mRowIdColumnIndex_ = idIndex;
}

+ (jint)findRowIdColumnIndexWithNSStringArray:(IOSObjectArray *)columnNames {
  return NetSqlcipherBulkCursorToCursorAdaptor_findRowIdColumnIndexWithNSStringArray_(columnNames);
}

- (jint)getCount {
  return mCount_;
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  @try {
    if (mWindow_ != nil) {
      if (newPosition < [mWindow_ getStartPosition] || newPosition >= ([((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getStartPosition] + [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getNumRows])) {
        JreStrongAssign(&mWindow_, [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getWindowWithInt:newPosition]);
      }
      else if (mWantsAllOnMoveCalls_) {
        [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) onMoveWithInt:newPosition];
      }
    }
    else {
      JreStrongAssign(&mWindow_, [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getWindowWithInt:newPosition]);
    }
  }
  @catch (AndroidOsRemoteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Unable to get window because the remote process is dead");
    return false;
  }
  if (mWindow_ == nil) {
    return false;
  }
  return true;
}

- (void)deactivate {
  [super deactivate];
  @try {
    [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) deactivate];
  }
  @catch (AndroidOsRemoteException *ex) {
    AndroidUtilLog_wWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Remote process exception when deactivating");
  }
  JreStrongAssign(&mWindow_, nil);
}

- (void)close {
  [super close];
  @try {
    [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) close];
  }
  @catch (AndroidOsRemoteException *ex) {
    AndroidUtilLog_wWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Remote process exception when closing");
  }
  JreStrongAssign(&mWindow_, nil);
}

- (jboolean)requery {
  @try {
    jint oldCount = mCount_;
    if (mCount_ != -1) {
      mPos_ = -1;
      JreStrongAssign(&mWindow_, nil);
      [super requery];
      return true;
    }
    else {
      [self deactivate];
      return false;
    }
  }
  @catch (JavaLangException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, JreStrcat("$$", @"Unable to requery because the remote process exception ", [((JavaLangException *) nil_chk(ex)) getMessage]));
    [self deactivate];
    return false;
  }
}

- (jboolean)deleteRow {
  @try {
    jboolean result = [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) deleteRowWithInt:mPos_];
    if (result != false) {
      JreStrongAssign(&mWindow_, nil);
      mCount_ = [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) count];
      if (mPos_ < mCount_) {
        jint oldPos = mPos_;
        mPos_ = -1;
        [self moveToPositionWithInt:oldPos];
      }
      else {
        mPos_ = mCount_;
      }
      [self onChangeWithBoolean:true];
    }
    return result;
  }
  @catch (AndroidOsRemoteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Unable to delete row because the remote process is dead");
    return false;
  }
}

- (IOSObjectArray *)getColumnNames {
  if (mColumns_ == nil) {
    @try {
      JreStrongAssign(&mColumns_, [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getColumnNames]);
    }
    @catch (AndroidOsRemoteException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Unable to fetch column names because the remote process is dead");
      return nil;
    }
  }
  return mColumns_;
}

- (jboolean)commitUpdatesWithJavaUtilMap:(id<JavaUtilMap>)additionalValues {
  if (![self supportsUpdates]) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"commitUpdates not supported on this cursor, did you include the _id column?");
    return false;
  }
  @synchronized(mUpdatedRows_) {
    if (additionalValues != nil) {
      [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) putAllWithJavaUtilMap:additionalValues];
    }
    if ([((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) size] <= 0) {
      return false;
    }
    @try {
      jboolean result = [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) updateRowsWithJavaUtilMap:mUpdatedRows_];
      if (result == true) {
        [((JavaUtilHashMap *) nil_chk(mUpdatedRows_)) clear];
        [self onChangeWithBoolean:true];
      }
      return result;
    }
    @catch (AndroidOsRemoteException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"Unable to commit updates because the remote process is dead");
      return false;
    }
  }
}

- (AndroidOsBundle *)getExtras {
  @try {
    return [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) getExtras];
  }
  @catch (AndroidOsRemoteException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  @try {
    return [((id<NetSqlcipherIBulkCursor>) nil_chk(mBulkCursor_)) respondWithAndroidOsBundle:extras];
  }
  @catch (AndroidOsRemoteException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withNSException_(NetSqlcipherBulkCursorToCursorAdaptor_TAG, @"respond() threw RemoteException, returning an empty bundle.", e);
    return JreLoadStatic(AndroidOsBundle, EMPTY);
  }
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
}

- (void)dealloc {
  JreCheckFinalize(self, [NetSqlcipherBulkCursorToCursorAdaptor class]);
  RELEASE_(mBulkCursor_);
  RELEASE_(mColumns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setWithNetSqlcipherIBulkCursor:);
  methods[2].selector = @selector(setWithNetSqlcipherIBulkCursor:withInt:withInt:);
  methods[3].selector = @selector(findRowIdColumnIndexWithNSStringArray:);
  methods[4].selector = @selector(getCount);
  methods[5].selector = @selector(onMoveWithInt:withInt:);
  methods[6].selector = @selector(deactivate);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(requery);
  methods[9].selector = @selector(deleteRow);
  methods[10].selector = @selector(getColumnNames);
  methods[11].selector = @selector(commitUpdatesWithJavaUtilMap:);
  methods[12].selector = @selector(getExtras);
  methods[13].selector = @selector(respondWithAndroidOsBundle:);
  methods[14].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[15].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[16].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "mBulkCursor_", "LNetSqlcipherIBulkCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumns_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWantsAllOnMoveCalls_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "LNetSqlcipherIBulkCursor;", "LNetSqlcipherIBulkCursor;II", "findRowIdColumnIndex", "[LNSString;", "onMove", "II", "commitUpdates", "LJavaUtilMap;", "(Ljava/util/Map<+Ljava/lang/Long;+Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;)Z", "respond", "LAndroidOsBundle;", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver", &NetSqlcipherBulkCursorToCursorAdaptor_TAG };
  static const J2ObjcClassInfo _NetSqlcipherBulkCursorToCursorAdaptor = { "BulkCursorToCursorAdaptor", "net.sqlcipher", ptrTable, methods, fields, 7, 0x11, 17, 5, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherBulkCursorToCursorAdaptor;
}

@end

void NetSqlcipherBulkCursorToCursorAdaptor_init(NetSqlcipherBulkCursorToCursorAdaptor *self) {
  NetSqlcipherAbstractWindowedCursor_init(self);
}

NetSqlcipherBulkCursorToCursorAdaptor *new_NetSqlcipherBulkCursorToCursorAdaptor_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherBulkCursorToCursorAdaptor, init)
}

NetSqlcipherBulkCursorToCursorAdaptor *create_NetSqlcipherBulkCursorToCursorAdaptor_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherBulkCursorToCursorAdaptor, init)
}

jint NetSqlcipherBulkCursorToCursorAdaptor_findRowIdColumnIndexWithNSStringArray_(IOSObjectArray *columnNames) {
  NetSqlcipherBulkCursorToCursorAdaptor_initialize();
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) isEqual:@"_id"]) {
      return i;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherBulkCursorToCursorAdaptor)
