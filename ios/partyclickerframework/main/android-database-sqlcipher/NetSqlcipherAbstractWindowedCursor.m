//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherAbstractCursor.h"
#include "NetSqlcipherAbstractWindowedCursor.h"
#include "NetSqlcipherCursorWindow.h"
#include "NetSqlcipherStaleDataException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"

@implementation NetSqlcipherAbstractWindowedCursor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherAbstractWindowedCursor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      return (IOSByteArray *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [IOSByteArray class]);
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getBlobWithInt:mPos_ withInt:columnIndex];
}

- (NSString *)getStringWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      return (NSString *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSString class]);
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getStringWithInt:mPos_ withInt:columnIndex];
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      [super copyStringToBufferWithInt:columnIndex withAndroidDatabaseCharArrayBuffer:buffer];
    }
  }
  [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) copyStringToBufferWithInt:mPos_ withInt:columnIndex withAndroidDatabaseCharArrayBuffer:buffer];
}

- (jshort)getShortWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      NSNumber *value = (NSNumber *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSNumber class]);
      return [((NSNumber *) nil_chk(value)) shortValue];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getShortWithInt:mPos_ withInt:columnIndex];
}

- (jint)getIntWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      NSNumber *value = (NSNumber *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSNumber class]);
      return [((NSNumber *) nil_chk(value)) intValue];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getIntWithInt:mPos_ withInt:columnIndex];
}

- (jlong)getLongWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      NSNumber *value = (NSNumber *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSNumber class]);
      return [((NSNumber *) nil_chk(value)) longLongValue];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getLongWithInt:mPos_ withInt:columnIndex];
}

- (jfloat)getFloatWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      NSNumber *value = (NSNumber *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSNumber class]);
      return [((NSNumber *) nil_chk(value)) floatValue];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getFloatWithInt:mPos_ withInt:columnIndex];
}

- (jdouble)getDoubleWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      NSNumber *value = (NSNumber *) cast_chk([self getUpdatedFieldWithInt:columnIndex], [NSNumber class]);
      return [((NSNumber *) nil_chk(value)) doubleValue];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getDoubleWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isNullWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      return [self getUpdatedFieldWithInt:columnIndex] == nil;
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) isNullWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isBlobWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      id object = [self getUpdatedFieldWithInt:columnIndex];
      return object == nil || [object isKindOfClass:[IOSByteArray class]];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) isBlobWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isStringWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      id object = [self getUpdatedFieldWithInt:columnIndex];
      return object == nil || [object isKindOfClass:[NSString class]];
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) isStringWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isLongWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      id object = [self getUpdatedFieldWithInt:columnIndex];
      return object != nil && ([object isKindOfClass:[JavaLangInteger class]] || [object isKindOfClass:[JavaLangLong class]]);
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) isLongWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isFloatWithInt:(jint)columnIndex {
  [self checkPosition];
  @synchronized(mUpdatedRows_) {
    if ([self isFieldUpdatedWithInt:columnIndex]) {
      id object = [self getUpdatedFieldWithInt:columnIndex];
      return object != nil && ([object isKindOfClass:[JavaLangFloat class]] || [object isKindOfClass:[JavaLangDouble class]]);
    }
  }
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) isFloatWithInt:mPos_ withInt:columnIndex];
}

- (jint)getTypeWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((NetSqlcipherCursorWindow *) nil_chk(mWindow_)) getTypeWithInt:mPos_ withInt:columnIndex];
}

- (void)checkPosition {
  [super checkPosition];
  if (mWindow_ == nil) {
    @throw create_NetSqlcipherStaleDataException_initWithNSString_(@"Access closed cursor");
  }
}

- (NetSqlcipherCursorWindow *)getWindow {
  return mWindow_;
}

- (void)setWindowWithNetSqlcipherCursorWindow:(NetSqlcipherCursorWindow *)window {
  if (mWindow_ != nil) {
    [mWindow_ close];
  }
  JreStrongAssign(&mWindow_, window);
}

- (jboolean)hasWindow {
  return mWindow_ != nil;
}

- (void)dealloc {
  JreCheckFinalize(self, [NetSqlcipherAbstractWindowedCursor class]);
  RELEASE_(mWindow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursorWindow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBlobWithInt:);
  methods[2].selector = @selector(getStringWithInt:);
  methods[3].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[4].selector = @selector(getShortWithInt:);
  methods[5].selector = @selector(getIntWithInt:);
  methods[6].selector = @selector(getLongWithInt:);
  methods[7].selector = @selector(getFloatWithInt:);
  methods[8].selector = @selector(getDoubleWithInt:);
  methods[9].selector = @selector(isNullWithInt:);
  methods[10].selector = @selector(isBlobWithInt:);
  methods[11].selector = @selector(isStringWithInt:);
  methods[12].selector = @selector(isLongWithInt:);
  methods[13].selector = @selector(isFloatWithInt:);
  methods[14].selector = @selector(getTypeWithInt:);
  methods[15].selector = @selector(checkPosition);
  methods[16].selector = @selector(getWindow);
  methods[17].selector = @selector(setWindowWithNetSqlcipherCursorWindow:);
  methods[18].selector = @selector(hasWindow);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWindow_", "LNetSqlcipherCursorWindow;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getBlob", "I", "getString", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "getShort", "getInt", "getLong", "getFloat", "getDouble", "isNull", "isBlob", "isString", "isLong", "isFloat", "getType", "setWindow", "LNetSqlcipherCursorWindow;" };
  static const J2ObjcClassInfo _NetSqlcipherAbstractWindowedCursor = { "AbstractWindowedCursor", "net.sqlcipher", ptrTable, methods, fields, 7, 0x401, 19, 1, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherAbstractWindowedCursor;
}

@end

void NetSqlcipherAbstractWindowedCursor_init(NetSqlcipherAbstractWindowedCursor *self) {
  NetSqlcipherAbstractCursor_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherAbstractWindowedCursor)
