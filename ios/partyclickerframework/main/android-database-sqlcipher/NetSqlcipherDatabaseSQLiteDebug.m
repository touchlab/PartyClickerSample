//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDebug.h"
#include "android/util/Log.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"

inline jint NetSqlcipherDatabaseSQLiteDebug_get_sNumActiveCursorsFinalized();
inline jint NetSqlcipherDatabaseSQLiteDebug_set_sNumActiveCursorsFinalized(jint value);
inline jint *NetSqlcipherDatabaseSQLiteDebug_getRef_sNumActiveCursorsFinalized();
static jint NetSqlcipherDatabaseSQLiteDebug_sNumActiveCursorsFinalized = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetSqlcipherDatabaseSQLiteDebug, sNumActiveCursorsFinalized, jint)

__attribute__((unused)) static IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$0();

__attribute__((unused)) static IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$1();

__attribute__((unused)) static IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$2();

__attribute__((unused)) static IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$3();

J2OBJC_INITIALIZED_DEFN(NetSqlcipherDatabaseSQLiteDebug)

jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_STATEMENTS;
jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_TIME;
jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_CACHE;
jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_ACTIVE_CURSOR_FINALIZATION;
jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_LOCK_TIME_TRACKING_STACK_TRACE;

@implementation NetSqlcipherDatabaseSQLiteDebug

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDatabaseSQLiteDebug_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NetSqlcipherDatabaseSQLiteDebug_PagerStats *)getDatabaseInfo {
  return NetSqlcipherDatabaseSQLiteDebug_getDatabaseInfo();
}

+ (void)getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats:(NetSqlcipherDatabaseSQLiteDebug_PagerStats *)stats {
  NetSqlcipherDatabaseSQLiteDebug_getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats_(stats);
}

+ (jlong)getHeapSize {
  return NetSqlcipherDatabaseSQLiteDebug_getHeapSize();
}

+ (jlong)getHeapAllocatedSize {
  return NetSqlcipherDatabaseSQLiteDebug_getHeapAllocatedSize();
}

+ (jlong)getHeapFreeSize {
  return NetSqlcipherDatabaseSQLiteDebug_getHeapFreeSize();
}

+ (void)getHeapDirtyPagesWithIntArray:(IOSIntArray *)pages {
  NetSqlcipherDatabaseSQLiteDebug_getHeapDirtyPagesWithIntArray_(pages);
}

+ (jint)getNumActiveCursorsFinalized {
  return NetSqlcipherDatabaseSQLiteDebug_getNumActiveCursorsFinalized();
}

+ (void)notifyActiveCursorFinalized {
  NetSqlcipherDatabaseSQLiteDebug_notifyActiveCursorFinalized();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDebug_PagerStats;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x28, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDatabaseInfo);
  methods[2].selector = @selector(getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats:);
  methods[3].selector = @selector(getHeapSize);
  methods[4].selector = @selector(getHeapAllocatedSize);
  methods[5].selector = @selector(getHeapFreeSize);
  methods[6].selector = @selector(getHeapDirtyPagesWithIntArray:);
  methods[7].selector = @selector(getNumActiveCursorsFinalized);
  methods[8].selector = @selector(notifyActiveCursorFinalized);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_SQL_STATEMENTS", "Z", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "DEBUG_SQL_TIME", "Z", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "DEBUG_SQL_CACHE", "Z", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "DEBUG_ACTIVE_CURSOR_FINALIZATION", "Z", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "DEBUG_LOCK_TIME_TRACKING_STACK_TRACE", "Z", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "sNumActiveCursorsFinalized", "I", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "getPagerStats", "LNetSqlcipherDatabaseSQLiteDebug_PagerStats;", "getHeapDirtyPages", "[I", &NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_STATEMENTS, &NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_TIME, &NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_CACHE, &NetSqlcipherDatabaseSQLiteDebug_DEBUG_ACTIVE_CURSOR_FINALIZATION, &NetSqlcipherDatabaseSQLiteDebug_DEBUG_LOCK_TIME_TRACKING_STACK_TRACE, &NetSqlcipherDatabaseSQLiteDebug_sNumActiveCursorsFinalized, "LNetSqlcipherDatabaseSQLiteDebug_PagerStats;LNetSqlcipherDatabaseSQLiteDebug_DbStats;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDebug = { "SQLiteDebug", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x11, 9, 6, -1, 10, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDebug;
}

+ (void)initialize {
  if (self == [NetSqlcipherDatabaseSQLiteDebug class]) {
    NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_STATEMENTS = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteStatements", AndroidUtilLog_VERBOSE);
    NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_TIME = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteTime", AndroidUtilLog_VERBOSE);
    NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_CACHE = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteCompiledSql", AndroidUtilLog_VERBOSE);
    NetSqlcipherDatabaseSQLiteDebug_DEBUG_ACTIVE_CURSOR_FINALIZATION = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteCursorClosing", AndroidUtilLog_VERBOSE);
    NetSqlcipherDatabaseSQLiteDebug_DEBUG_LOCK_TIME_TRACKING_STACK_TRACE = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteLockStackTrace", AndroidUtilLog_VERBOSE);
    J2OBJC_SET_INITIALIZED(NetSqlcipherDatabaseSQLiteDebug)
  }
}

@end

void NetSqlcipherDatabaseSQLiteDebug_init(NetSqlcipherDatabaseSQLiteDebug *self) {
  NSObject_init(self);
}

NetSqlcipherDatabaseSQLiteDebug *new_NetSqlcipherDatabaseSQLiteDebug_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDebug, init)
}

NetSqlcipherDatabaseSQLiteDebug *create_NetSqlcipherDatabaseSQLiteDebug_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDebug, init)
}

NetSqlcipherDatabaseSQLiteDebug_PagerStats *NetSqlcipherDatabaseSQLiteDebug_getDatabaseInfo() {
  NetSqlcipherDatabaseSQLiteDebug_initialize();
  NetSqlcipherDatabaseSQLiteDebug_PagerStats *stats = create_NetSqlcipherDatabaseSQLiteDebug_PagerStats_init();
  NetSqlcipherDatabaseSQLiteDebug_getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats_(stats);
  JreStrongAssign(&stats->dbStats_, NetSqlcipherDatabaseSQLiteDatabase_getDbStats());
  return stats;
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDebug_getPagerStats(JNIEnv *_env_, jclass _cls_, jobject stats);

void NetSqlcipherDatabaseSQLiteDebug_getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats_(NetSqlcipherDatabaseSQLiteDebug_PagerStats *stats) {
  Java_net_sqlcipher_database_SQLiteDebug_getPagerStats(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDebug_class_(), stats);
}

JNIEXPORT jlong Java_net_sqlcipher_database_SQLiteDebug_getHeapSize(JNIEnv *_env_, jclass _cls_);

jlong NetSqlcipherDatabaseSQLiteDebug_getHeapSize() {
  return Java_net_sqlcipher_database_SQLiteDebug_getHeapSize(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDebug_class_());
}

JNIEXPORT jlong Java_net_sqlcipher_database_SQLiteDebug_getHeapAllocatedSize(JNIEnv *_env_, jclass _cls_);

jlong NetSqlcipherDatabaseSQLiteDebug_getHeapAllocatedSize() {
  return Java_net_sqlcipher_database_SQLiteDebug_getHeapAllocatedSize(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDebug_class_());
}

JNIEXPORT jlong Java_net_sqlcipher_database_SQLiteDebug_getHeapFreeSize(JNIEnv *_env_, jclass _cls_);

jlong NetSqlcipherDatabaseSQLiteDebug_getHeapFreeSize() {
  return Java_net_sqlcipher_database_SQLiteDebug_getHeapFreeSize(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDebug_class_());
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDebug_getHeapDirtyPages(JNIEnv *_env_, jclass _cls_, jarray pages);

void NetSqlcipherDatabaseSQLiteDebug_getHeapDirtyPagesWithIntArray_(IOSIntArray *pages) {
  Java_net_sqlcipher_database_SQLiteDebug_getHeapDirtyPages(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDebug_class_(), pages);
}

jint NetSqlcipherDatabaseSQLiteDebug_getNumActiveCursorsFinalized() {
  NetSqlcipherDatabaseSQLiteDebug_initialize();
  return NetSqlcipherDatabaseSQLiteDebug_sNumActiveCursorsFinalized;
}

void NetSqlcipherDatabaseSQLiteDebug_notifyActiveCursorFinalized() {
  NetSqlcipherDatabaseSQLiteDebug_initialize();
  @synchronized(NetSqlcipherDatabaseSQLiteDebug_class_()) {
    NetSqlcipherDatabaseSQLiteDebug_sNumActiveCursorsFinalized++;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDebug)

@implementation NetSqlcipherDatabaseSQLiteDebug_PagerStats

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDatabaseSQLiteDebug_PagerStats_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(dbStats_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totalBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, 0 },
    { "referencedBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, 1 },
    { "databaseBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, 2 },
    { "numPagers_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, 3 },
    { "memoryUsed_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pageCacheOverflo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "largestMemAlloc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dbStats_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { (void *)&NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$0, (void *)&NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$1, (void *)&NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$2, (void *)&NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$3, "Ljava/util/ArrayList<Lnet/sqlcipher/database/SQLiteDebug$DbStats;>;", "LNetSqlcipherDatabaseSQLiteDebug;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDebug_PagerStats = { "PagerStats", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x9, 1, 8, 5, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDebug_PagerStats;
}

@end

void NetSqlcipherDatabaseSQLiteDebug_PagerStats_init(NetSqlcipherDatabaseSQLiteDebug_PagerStats *self) {
  NSObject_init(self);
}

NetSqlcipherDatabaseSQLiteDebug_PagerStats *new_NetSqlcipherDatabaseSQLiteDebug_PagerStats_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDebug_PagerStats, init)
}

NetSqlcipherDatabaseSQLiteDebug_PagerStats *create_NetSqlcipherDatabaseSQLiteDebug_PagerStats_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDebug_PagerStats, init)
}

IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetSqlcipherDatabaseSQLiteDebug_PagerStats__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDebug_PagerStats)

@implementation NetSqlcipherDatabaseSQLiteDebug_DbStats

- (instancetype)initWithNSString:(NSString *)dbName
                        withLong:(jlong)pageCount
                        withLong:(jlong)pageSize
                         withInt:(jint)lookaside {
  NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(self, dbName, pageCount, pageSize, lookaside);
  return self;
}

- (void)dealloc {
  RELEASE_(dbName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withLong:withLong:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dbName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pageSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dbSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lookaside_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;JJI", "LNetSqlcipherDatabaseSQLiteDebug;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDebug_DbStats = { "DbStats", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x9, 1, 4, 1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDebug_DbStats;
}

@end

void NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NetSqlcipherDatabaseSQLiteDebug_DbStats *self, NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside) {
  NSObject_init(self);
  JreStrongAssign(&self->dbName_, dbName);
  self->pageSize_ = pageSize;
  self->dbSize_ = (pageCount * pageSize) / 1024;
  self->lookaside_ = lookaside;
}

NetSqlcipherDatabaseSQLiteDebug_DbStats *new_NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_, dbName, pageCount, pageSize, lookaside)
}

NetSqlcipherDatabaseSQLiteDebug_DbStats *create_NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_, dbName, pageCount, pageSize, lookaside)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDebug_DbStats)
