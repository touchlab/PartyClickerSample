//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidOsParcel.h"
#include "AndroidOsParcelable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherCursorWindow.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"

@interface NetSqlcipherCursorWindow () {
 @public
  jlong nWindow_;
  jint mStartPos_CursorWindow_;
}

- (jint)getNumRows_native;

- (jboolean)setNumColumns_nativeWithInt:(jint)columnNum;

- (jboolean)allocRow_native OBJC_METHOD_FAMILY_NONE;

- (void)freeLastRow_native;

- (jboolean)putBlob_nativeWithByteArray:(IOSByteArray *)value
                                withInt:(jint)row
                                withInt:(jint)col;

- (jboolean)putString_nativeWithNSString:(NSString *)value
                                 withInt:(jint)row
                                 withInt:(jint)col;

- (jboolean)putLong_nativeWithLong:(jlong)value
                           withInt:(jint)row
                           withInt:(jint)col;

- (jboolean)putDouble_nativeWithDouble:(jdouble)value
                               withInt:(jint)row
                               withInt:(jint)col;

- (jboolean)putNull_nativeWithInt:(jint)row
                          withInt:(jint)col;

- (jboolean)isNull_nativeWithInt:(jint)row
                         withInt:(jint)col;

- (IOSByteArray *)getBlob_nativeWithInt:(jint)row
                                withInt:(jint)col;

- (jboolean)isBlob_nativeWithInt:(jint)row
                         withInt:(jint)col;

- (jboolean)isString_nativeWithInt:(jint)row
                           withInt:(jint)col;

- (jboolean)isInteger_nativeWithInt:(jint)row
                            withInt:(jint)col;

- (jboolean)isFloat_nativeWithInt:(jint)row
                          withInt:(jint)col;

- (jint)getType_nativeWithInt:(jint)row
                      withInt:(jint)col;

- (NSString *)getString_nativeWithInt:(jint)row
                              withInt:(jint)col;

- (IOSCharArray *)copyStringToBuffer_nativeWithInt:(jint)row
                                           withInt:(jint)col
                                           withInt:(jint)bufferSize
                withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (jlong)getLong_nativeWithInt:(jint)row
                       withInt:(jint)col;

- (jdouble)getDouble_nativeWithInt:(jint)row
                           withInt:(jint)col;

- (void)native_clear;

- (void)close_native;

- (void)native_initWithBoolean:(jboolean)localOnly;

@end

jint NetSqlcipherCursorWindow_getNumRows_native(NetSqlcipherCursorWindow *self);

jboolean NetSqlcipherCursorWindow_setNumColumns_nativeWithInt_(NetSqlcipherCursorWindow *self, jint columnNum);

jboolean NetSqlcipherCursorWindow_allocRow_native(NetSqlcipherCursorWindow *self);

void NetSqlcipherCursorWindow_freeLastRow_native(NetSqlcipherCursorWindow *self);

jboolean NetSqlcipherCursorWindow_putBlob_nativeWithByteArray_withInt_withInt_(NetSqlcipherCursorWindow *self, IOSByteArray *value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putString_nativeWithNSString_withInt_withInt_(NetSqlcipherCursorWindow *self, NSString *value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putLong_nativeWithLong_withInt_withInt_(NetSqlcipherCursorWindow *self, jlong value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putDouble_nativeWithDouble_withInt_withInt_(NetSqlcipherCursorWindow *self, jdouble value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putNull_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isNull_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

IOSByteArray *NetSqlcipherCursorWindow_getBlob_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isBlob_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isString_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isInteger_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isFloat_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jint NetSqlcipherCursorWindow_getType_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

NSString *NetSqlcipherCursorWindow_getString_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

IOSCharArray *NetSqlcipherCursorWindow_copyStringToBuffer_nativeWithInt_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(NetSqlcipherCursorWindow *self, jint row, jint col, jint bufferSize, AndroidDatabaseCharArrayBuffer *buffer);

jlong NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

jdouble NetSqlcipherCursorWindow_getDouble_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col);

void NetSqlcipherCursorWindow_native_clear(NetSqlcipherCursorWindow *self);

void NetSqlcipherCursorWindow_close_native(NetSqlcipherCursorWindow *self);

void NetSqlcipherCursorWindow_native_initWithBoolean_(NetSqlcipherCursorWindow *self, jboolean localOnly);

@interface NetSqlcipherCursorWindow_1 : NSObject < AndroidOsParcelable_Creator >

- (instancetype)init;

- (NetSqlcipherCursorWindow *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)source;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherCursorWindow_1)

__attribute__((unused)) static void NetSqlcipherCursorWindow_1_init(NetSqlcipherCursorWindow_1 *self);

__attribute__((unused)) static NetSqlcipherCursorWindow_1 *new_NetSqlcipherCursorWindow_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherCursorWindow_1 *create_NetSqlcipherCursorWindow_1_init();

J2OBJC_INITIALIZED_DEFN(NetSqlcipherCursorWindow)

id<AndroidOsParcelable_Creator> NetSqlcipherCursorWindow_CREATOR;

@implementation NetSqlcipherCursorWindow

- (instancetype)initWithBoolean:(jboolean)localWindow {
  NetSqlcipherCursorWindow_initWithBoolean_(self, localWindow);
  return self;
}

- (jint)getStartPosition {
  return mStartPos_CursorWindow_;
}

- (void)setStartPositionWithInt:(jint)pos {
  mStartPos_CursorWindow_ = pos;
}

- (jint)getNumRows {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getNumRows_native(self);
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)getNumRows_native {
  return NetSqlcipherCursorWindow_getNumRows_native(self);
}

- (jboolean)setNumColumnsWithInt:(jint)columnNum {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_setNumColumns_nativeWithInt_(self, columnNum);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)setNumColumns_nativeWithInt:(jint)columnNum {
  return NetSqlcipherCursorWindow_setNumColumns_nativeWithInt_(self, columnNum);
}

- (jboolean)allocRow {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_allocRow_native(self);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)allocRow_native {
  return NetSqlcipherCursorWindow_allocRow_native(self);
}

- (void)freeLastRow {
  [self acquireReference];
  @try {
    NetSqlcipherCursorWindow_freeLastRow_native(self);
  }
  @finally {
    [self releaseReference];
  }
}

- (void)freeLastRow_native {
  NetSqlcipherCursorWindow_freeLastRow_native(self);
}

- (jboolean)putBlobWithByteArray:(IOSByteArray *)value
                         withInt:(jint)row
                         withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_putBlob_nativeWithByteArray_withInt_withInt_(self, value, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putBlob_nativeWithByteArray:(IOSByteArray *)value
                                withInt:(jint)row
                                withInt:(jint)col {
  return NetSqlcipherCursorWindow_putBlob_nativeWithByteArray_withInt_withInt_(self, value, row, col);
}

- (jboolean)putStringWithNSString:(NSString *)value
                          withInt:(jint)row
                          withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_putString_nativeWithNSString_withInt_withInt_(self, value, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putString_nativeWithNSString:(NSString *)value
                                 withInt:(jint)row
                                 withInt:(jint)col {
  return NetSqlcipherCursorWindow_putString_nativeWithNSString_withInt_withInt_(self, value, row, col);
}

- (jboolean)putLongWithLong:(jlong)value
                    withInt:(jint)row
                    withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_putLong_nativeWithLong_withInt_withInt_(self, value, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putLong_nativeWithLong:(jlong)value
                           withInt:(jint)row
                           withInt:(jint)col {
  return NetSqlcipherCursorWindow_putLong_nativeWithLong_withInt_withInt_(self, value, row, col);
}

- (jboolean)putDoubleWithDouble:(jdouble)value
                        withInt:(jint)row
                        withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_putDouble_nativeWithDouble_withInt_withInt_(self, value, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putDouble_nativeWithDouble:(jdouble)value
                               withInt:(jint)row
                               withInt:(jint)col {
  return NetSqlcipherCursorWindow_putDouble_nativeWithDouble_withInt_withInt_(self, value, row, col);
}

- (jboolean)putNullWithInt:(jint)row
                   withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_putNull_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putNull_nativeWithInt:(jint)row
                          withInt:(jint)col {
  return NetSqlcipherCursorWindow_putNull_nativeWithInt_withInt_(self, row, col);
}

- (jboolean)isNullWithInt:(jint)row
                  withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_isNull_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isNull_nativeWithInt:(jint)row
                         withInt:(jint)col {
  return NetSqlcipherCursorWindow_isNull_nativeWithInt_withInt_(self, row, col);
}

- (IOSByteArray *)getBlobWithInt:(jint)row
                         withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getBlob_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (IOSByteArray *)getBlob_nativeWithInt:(jint)row
                                withInt:(jint)col {
  return NetSqlcipherCursorWindow_getBlob_nativeWithInt_withInt_(self, row, col);
}

- (jint)getTypeWithInt:(jint)row
               withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getType_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isBlobWithInt:(jint)row
                  withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_isBlob_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isLongWithInt:(jint)row
                  withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_isInteger_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isFloatWithInt:(jint)row
                   withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_isFloat_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isStringWithInt:(jint)row
                    withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_isString_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isBlob_nativeWithInt:(jint)row
                         withInt:(jint)col {
  return NetSqlcipherCursorWindow_isBlob_nativeWithInt_withInt_(self, row, col);
}

- (jboolean)isString_nativeWithInt:(jint)row
                           withInt:(jint)col {
  return NetSqlcipherCursorWindow_isString_nativeWithInt_withInt_(self, row, col);
}

- (jboolean)isInteger_nativeWithInt:(jint)row
                            withInt:(jint)col {
  return NetSqlcipherCursorWindow_isInteger_nativeWithInt_withInt_(self, row, col);
}

- (jboolean)isFloat_nativeWithInt:(jint)row
                          withInt:(jint)col {
  return NetSqlcipherCursorWindow_isFloat_nativeWithInt_withInt_(self, row, col);
}

- (jint)getType_nativeWithInt:(jint)row
                      withInt:(jint)col {
  return NetSqlcipherCursorWindow_getType_nativeWithInt_withInt_(self, row, col);
}

- (NSString *)getStringWithInt:(jint)row
                       withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getString_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)getString_nativeWithInt:(jint)row
                              withInt:(jint)col {
  return NetSqlcipherCursorWindow_getString_nativeWithInt_withInt_(self, row, col);
}

- (void)copyStringToBufferWithInt:(jint)row
                          withInt:(jint)col
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  if (buffer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"CharArrayBuffer should not be null");
  }
  if (buffer->data_ == nil) {
    JreStrongAssignAndConsume(&buffer->data_, [IOSCharArray newArrayWithLength:64]);
  }
  [self acquireReference];
  @try {
    IOSCharArray *newbuf = NetSqlcipherCursorWindow_copyStringToBuffer_nativeWithInt_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(self, row - mStartPos_CursorWindow_, col, ((IOSCharArray *) nil_chk(buffer->data_))->size_, buffer);
    if (newbuf != nil) {
      JreStrongAssign(&buffer->data_, newbuf);
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (IOSCharArray *)copyStringToBuffer_nativeWithInt:(jint)row
                                           withInt:(jint)col
                                           withInt:(jint)bufferSize
                withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  return NetSqlcipherCursorWindow_copyStringToBuffer_nativeWithInt_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(self, row, col, bufferSize, buffer);
}

- (jlong)getLongWithInt:(jint)row
                withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)getLong_nativeWithInt:(jint)row
                       withInt:(jint)col {
  return NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(self, row, col);
}

- (jdouble)getDoubleWithInt:(jint)row
                    withInt:(jint)col {
  [self acquireReference];
  @try {
    return NetSqlcipherCursorWindow_getDouble_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jdouble)getDouble_nativeWithInt:(jint)row
                           withInt:(jint)col {
  return NetSqlcipherCursorWindow_getDouble_nativeWithInt_withInt_(self, row, col);
}

- (jshort)getShortWithInt:(jint)row
                  withInt:(jint)col {
  [self acquireReference];
  @try {
    return (jshort) NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)getIntWithInt:(jint)row
              withInt:(jint)col {
  [self acquireReference];
  @try {
    return (jint) NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (jfloat)getFloatWithInt:(jint)row
                  withInt:(jint)col {
  [self acquireReference];
  @try {
    return (jfloat) NetSqlcipherCursorWindow_getDouble_nativeWithInt_withInt_(self, row - mStartPos_CursorWindow_, col);
  }
  @finally {
    [self releaseReference];
  }
}

- (void)clear {
  [self acquireReference];
  @try {
    mStartPos_CursorWindow_ = 0;
    NetSqlcipherCursorWindow_native_clear(self);
  }
  @finally {
    [self releaseReference];
  }
}

- (void)native_clear {
  NetSqlcipherCursorWindow_native_clear(self);
}

- (void)close {
  [self releaseReference];
}

- (void)close_native {
  NetSqlcipherCursorWindow_close_native(self);
}

- (void)java_finalize {
  if (nWindow_ == 0) {
    return;
  }
  NetSqlcipherCursorWindow_close_native(self);
}

+ (NetSqlcipherCursorWindow *)newFromParcelWithAndroidOsParcel:(AndroidOsParcel *)p {
  return NetSqlcipherCursorWindow_newFromParcelWithAndroidOsParcel_(p);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)dest
                                 withInt:(jint)flags {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)native_initWithBoolean:(jboolean)localOnly {
  NetSqlcipherCursorWindow_native_initWithBoolean_(self, localOnly);
}

- (void)onAllReferencesReleased {
  NetSqlcipherCursorWindow_close_native(self);
  [super onAllReferencesReleased];
}

- (void)dealloc {
  JreCheckFinalize(self, [NetSqlcipherCursorWindow class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 13, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 19, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 21, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x102, 23, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 29, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 30, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 31, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 32, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 33, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 34, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, 35, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "[C", 0x102, 38, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 40, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x102, 41, 18, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 42, 18, -1, -1, -1, -1 },
    { NULL, "D", 0x102, 43, 18, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 44, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 45, 18, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 46, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 47, -1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursorWindow;", 0x9, 48, 49, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 52, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(getStartPosition);
  methods[2].selector = @selector(setStartPositionWithInt:);
  methods[3].selector = @selector(getNumRows);
  methods[4].selector = @selector(getNumRows_native);
  methods[5].selector = @selector(setNumColumnsWithInt:);
  methods[6].selector = @selector(setNumColumns_nativeWithInt:);
  methods[7].selector = @selector(allocRow);
  methods[8].selector = @selector(allocRow_native);
  methods[9].selector = @selector(freeLastRow);
  methods[10].selector = @selector(freeLastRow_native);
  methods[11].selector = @selector(putBlobWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(putBlob_nativeWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(putStringWithNSString:withInt:withInt:);
  methods[14].selector = @selector(putString_nativeWithNSString:withInt:withInt:);
  methods[15].selector = @selector(putLongWithLong:withInt:withInt:);
  methods[16].selector = @selector(putLong_nativeWithLong:withInt:withInt:);
  methods[17].selector = @selector(putDoubleWithDouble:withInt:withInt:);
  methods[18].selector = @selector(putDouble_nativeWithDouble:withInt:withInt:);
  methods[19].selector = @selector(putNullWithInt:withInt:);
  methods[20].selector = @selector(putNull_nativeWithInt:withInt:);
  methods[21].selector = @selector(isNullWithInt:withInt:);
  methods[22].selector = @selector(isNull_nativeWithInt:withInt:);
  methods[23].selector = @selector(getBlobWithInt:withInt:);
  methods[24].selector = @selector(getBlob_nativeWithInt:withInt:);
  methods[25].selector = @selector(getTypeWithInt:withInt:);
  methods[26].selector = @selector(isBlobWithInt:withInt:);
  methods[27].selector = @selector(isLongWithInt:withInt:);
  methods[28].selector = @selector(isFloatWithInt:withInt:);
  methods[29].selector = @selector(isStringWithInt:withInt:);
  methods[30].selector = @selector(isBlob_nativeWithInt:withInt:);
  methods[31].selector = @selector(isString_nativeWithInt:withInt:);
  methods[32].selector = @selector(isInteger_nativeWithInt:withInt:);
  methods[33].selector = @selector(isFloat_nativeWithInt:withInt:);
  methods[34].selector = @selector(getType_nativeWithInt:withInt:);
  methods[35].selector = @selector(getStringWithInt:withInt:);
  methods[36].selector = @selector(getString_nativeWithInt:withInt:);
  methods[37].selector = @selector(copyStringToBufferWithInt:withInt:withAndroidDatabaseCharArrayBuffer:);
  methods[38].selector = @selector(copyStringToBuffer_nativeWithInt:withInt:withInt:withAndroidDatabaseCharArrayBuffer:);
  methods[39].selector = @selector(getLongWithInt:withInt:);
  methods[40].selector = @selector(getLong_nativeWithInt:withInt:);
  methods[41].selector = @selector(getDoubleWithInt:withInt:);
  methods[42].selector = @selector(getDouble_nativeWithInt:withInt:);
  methods[43].selector = @selector(getShortWithInt:withInt:);
  methods[44].selector = @selector(getIntWithInt:withInt:);
  methods[45].selector = @selector(getFloatWithInt:withInt:);
  methods[46].selector = @selector(clear);
  methods[47].selector = @selector(native_clear);
  methods[48].selector = @selector(close);
  methods[49].selector = @selector(close_native);
  methods[50].selector = @selector(java_finalize);
  methods[51].selector = @selector(newFromParcelWithAndroidOsParcel:);
  methods[52].selector = @selector(describeContents);
  methods[53].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[54].selector = @selector(native_initWithBoolean:);
  methods[55].selector = @selector(onAllReferencesReleased);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nWindow_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStartPos_CursorWindow_", "I", .constantValue.asLong = 0, 0x2, 53, -1, -1, -1 },
    { "CREATOR", "LAndroidOsParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 54, 55, -1 },
  };
  static const void *ptrTable[] = { "Z", "setStartPosition", "I", "setNumColumns", "setNumColumns_native", "putBlob", "[BII", "putBlob_native", "putString", "LNSString;II", "putString_native", "putLong", "JII", "putLong_native", "putDouble", "DII", "putDouble_native", "putNull", "II", "putNull_native", "isNull", "isNull_native", "getBlob", "getBlob_native", "getType", "isBlob", "isLong", "isFloat", "isString", "isBlob_native", "isString_native", "isInteger_native", "isFloat_native", "getType_native", "getString", "getString_native", "copyStringToBuffer", "IILAndroidDatabaseCharArrayBuffer;", "copyStringToBuffer_native", "IIILAndroidDatabaseCharArrayBuffer;", "getLong", "getLong_native", "getDouble", "getDouble_native", "getShort", "getInt", "getFloat", "finalize", "newFromParcel", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "native_init", "mStartPos", &NetSqlcipherCursorWindow_CREATOR, "Landroid/os/Parcelable$Creator<Lnet/sqlcipher/CursorWindow;>;" };
  static const J2ObjcClassInfo _NetSqlcipherCursorWindow = { "CursorWindow", "net.sqlcipher", ptrTable, methods, fields, 7, 0x1, 56, 3, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherCursorWindow;
}

+ (void)initialize {
  if (self == [NetSqlcipherCursorWindow class]) {
    JreStrongAssignAndConsume(&NetSqlcipherCursorWindow_CREATOR, new_NetSqlcipherCursorWindow_1_init());
    J2OBJC_SET_INITIALIZED(NetSqlcipherCursorWindow)
  }
}

@end

void NetSqlcipherCursorWindow_initWithBoolean_(NetSqlcipherCursorWindow *self, jboolean localWindow) {
  AndroidDatabaseCursorWindow_initWithBoolean_(self, localWindow);
  self->mStartPos_CursorWindow_ = 0;
  NetSqlcipherCursorWindow_native_initWithBoolean_(self, localWindow);
}

NetSqlcipherCursorWindow *new_NetSqlcipherCursorWindow_initWithBoolean_(jboolean localWindow) {
  J2OBJC_NEW_IMPL(NetSqlcipherCursorWindow, initWithBoolean_, localWindow)
}

NetSqlcipherCursorWindow *create_NetSqlcipherCursorWindow_initWithBoolean_(jboolean localWindow) {
  J2OBJC_CREATE_IMPL(NetSqlcipherCursorWindow, initWithBoolean_, localWindow)
}

JNIEXPORT jint Java_net_sqlcipher_CursorWindow_getNumRows_1native(JNIEnv *_env_, jobject self);

jint NetSqlcipherCursorWindow_getNumRows_native(NetSqlcipherCursorWindow *self) {
  return Java_net_sqlcipher_CursorWindow_getNumRows_1native(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_setNumColumns_1native(JNIEnv *_env_, jobject self, jint columnNum);

jboolean NetSqlcipherCursorWindow_setNumColumns_nativeWithInt_(NetSqlcipherCursorWindow *self, jint columnNum) {
  return Java_net_sqlcipher_CursorWindow_setNumColumns_1native(&J2ObjC_JNIEnv, self, columnNum);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_allocRow_1native(JNIEnv *_env_, jobject self);

jboolean NetSqlcipherCursorWindow_allocRow_native(NetSqlcipherCursorWindow *self) {
  return Java_net_sqlcipher_CursorWindow_allocRow_1native(&J2ObjC_JNIEnv, self);
}

JNIEXPORT void Java_net_sqlcipher_CursorWindow_freeLastRow_1native(JNIEnv *_env_, jobject self);

void NetSqlcipherCursorWindow_freeLastRow_native(NetSqlcipherCursorWindow *self) {
  Java_net_sqlcipher_CursorWindow_freeLastRow_1native(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_putBlob_1native(JNIEnv *_env_, jobject self, jarray value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putBlob_nativeWithByteArray_withInt_withInt_(NetSqlcipherCursorWindow *self, IOSByteArray *value, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_putBlob_1native(&J2ObjC_JNIEnv, self, value, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_putString_1native(JNIEnv *_env_, jobject self, jstring value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putString_nativeWithNSString_withInt_withInt_(NetSqlcipherCursorWindow *self, NSString *value, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_putString_1native(&J2ObjC_JNIEnv, self, value, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_putLong_1native(JNIEnv *_env_, jobject self, jlong value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putLong_nativeWithLong_withInt_withInt_(NetSqlcipherCursorWindow *self, jlong value, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_putLong_1native(&J2ObjC_JNIEnv, self, value, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_putDouble_1native(JNIEnv *_env_, jobject self, jdouble value, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putDouble_nativeWithDouble_withInt_withInt_(NetSqlcipherCursorWindow *self, jdouble value, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_putDouble_1native(&J2ObjC_JNIEnv, self, value, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_putNull_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_putNull_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_putNull_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_isNull_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isNull_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_isNull_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jarray Java_net_sqlcipher_CursorWindow_getBlob_1native(JNIEnv *_env_, jobject self, jint row, jint col);

IOSByteArray *NetSqlcipherCursorWindow_getBlob_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return (IOSByteArray *) Java_net_sqlcipher_CursorWindow_getBlob_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_isBlob_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isBlob_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_isBlob_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_isString_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isString_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_isString_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_isInteger_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isInteger_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_isInteger_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jboolean Java_net_sqlcipher_CursorWindow_isFloat_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jboolean NetSqlcipherCursorWindow_isFloat_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_isFloat_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jint Java_net_sqlcipher_CursorWindow_getType_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jint NetSqlcipherCursorWindow_getType_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_getType_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jstring Java_net_sqlcipher_CursorWindow_getString_1native(JNIEnv *_env_, jobject self, jint row, jint col);

NSString *NetSqlcipherCursorWindow_getString_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return (NSString *) Java_net_sqlcipher_CursorWindow_getString_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jarray Java_net_sqlcipher_CursorWindow_copyStringToBuffer_1native(JNIEnv *_env_, jobject self, jint row, jint col, jint bufferSize, jobject buffer);

IOSCharArray *NetSqlcipherCursorWindow_copyStringToBuffer_nativeWithInt_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(NetSqlcipherCursorWindow *self, jint row, jint col, jint bufferSize, AndroidDatabaseCharArrayBuffer *buffer) {
  return (IOSCharArray *) Java_net_sqlcipher_CursorWindow_copyStringToBuffer_1native(&J2ObjC_JNIEnv, self, row, col, bufferSize, buffer);
}

JNIEXPORT jlong Java_net_sqlcipher_CursorWindow_getLong_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jlong NetSqlcipherCursorWindow_getLong_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_getLong_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT jdouble Java_net_sqlcipher_CursorWindow_getDouble_1native(JNIEnv *_env_, jobject self, jint row, jint col);

jdouble NetSqlcipherCursorWindow_getDouble_nativeWithInt_withInt_(NetSqlcipherCursorWindow *self, jint row, jint col) {
  return Java_net_sqlcipher_CursorWindow_getDouble_1native(&J2ObjC_JNIEnv, self, row, col);
}

JNIEXPORT void Java_net_sqlcipher_CursorWindow_native_1clear(JNIEnv *_env_, jobject self);

void NetSqlcipherCursorWindow_native_clear(NetSqlcipherCursorWindow *self) {
  Java_net_sqlcipher_CursorWindow_native_1clear(&J2ObjC_JNIEnv, self);
}

JNIEXPORT void Java_net_sqlcipher_CursorWindow_close_1native(JNIEnv *_env_, jobject self);

void NetSqlcipherCursorWindow_close_native(NetSqlcipherCursorWindow *self) {
  Java_net_sqlcipher_CursorWindow_close_1native(&J2ObjC_JNIEnv, self);
}

NetSqlcipherCursorWindow *NetSqlcipherCursorWindow_newFromParcelWithAndroidOsParcel_(AndroidOsParcel *p) {
  NetSqlcipherCursorWindow_initialize();
  return [((id<AndroidOsParcelable_Creator>) nil_chk(NetSqlcipherCursorWindow_CREATOR)) createFromParcelWithAndroidOsParcel:p];
}

JNIEXPORT void Java_net_sqlcipher_CursorWindow_native_1init(JNIEnv *_env_, jobject self, jboolean localOnly);

void NetSqlcipherCursorWindow_native_initWithBoolean_(NetSqlcipherCursorWindow *self, jboolean localOnly) {
  Java_net_sqlcipher_CursorWindow_native_1init(&J2ObjC_JNIEnv, self, localOnly);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherCursorWindow)

@implementation NetSqlcipherCursorWindow_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherCursorWindow_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NetSqlcipherCursorWindow *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)source {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:NetSqlcipherCursorWindow_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursorWindow;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LNetSqlcipherCursorWindow;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "newArray", "I", "LNetSqlcipherCursorWindow;", "Ljava/lang/Object;Landroid/os/Parcelable$Creator<Lnet/sqlcipher/CursorWindow;>;" };
  static const J2ObjcClassInfo _NetSqlcipherCursorWindow_1 = { "", "net.sqlcipher", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_NetSqlcipherCursorWindow_1;
}

@end

void NetSqlcipherCursorWindow_1_init(NetSqlcipherCursorWindow_1 *self) {
  NSObject_init(self);
}

NetSqlcipherCursorWindow_1 *new_NetSqlcipherCursorWindow_1_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherCursorWindow_1, init)
}

NetSqlcipherCursorWindow_1 *create_NetSqlcipherCursorWindow_1_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherCursorWindow_1, init)
}
