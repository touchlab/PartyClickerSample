//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetSqlcipherDatabaseSQLiteQuery")
#ifdef RESTRICT_NetSqlcipherDatabaseSQLiteQuery
#define INCLUDE_ALL_NetSqlcipherDatabaseSQLiteQuery 0
#else
#define INCLUDE_ALL_NetSqlcipherDatabaseSQLiteQuery 1
#endif
#undef RESTRICT_NetSqlcipherDatabaseSQLiteQuery

#if !defined (NetSqlcipherDatabaseSQLiteQuery_) && (INCLUDE_ALL_NetSqlcipherDatabaseSQLiteQuery || defined(INCLUDE_NetSqlcipherDatabaseSQLiteQuery))
#define NetSqlcipherDatabaseSQLiteQuery_

#define RESTRICT_NetSqlcipherDatabaseSQLiteProgram 1
#define INCLUDE_NetSqlcipherDatabaseSQLiteProgram 1
#include "NetSqlcipherDatabaseSQLiteProgram.h"

@class IOSObjectArray;
@class NetSqlcipherCursorWindow;
@class NetSqlcipherDatabaseSQLiteDatabase;

@interface NetSqlcipherDatabaseSQLiteQuery : NetSqlcipherDatabaseSQLiteProgram

#pragma mark Public

- (void)bindArgumentsWithNSObjectArray:(IOSObjectArray *)args;

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value;

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value;

- (void)bindNullWithInt:(jint)index;

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)query
                                                   withInt:(jint)offsetIndex
                                         withNSObjectArray:(IOSObjectArray *)bindArgs;

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)query
                                                   withInt:(jint)offsetIndex
                                         withNSStringArray:(IOSObjectArray *)bindArgs;

- (jint)columnCountLocked;

- (NSString *)columnNameLockedWithInt:(jint)columnIndex;

- (jint)fillWindowWithNetSqlcipherCursorWindow:(NetSqlcipherCursorWindow *)window
                                       withInt:(jint)maxRead
                                       withInt:(jint)lastPos;

- (void)requery;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteQuery)

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteQuery *new_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteQuery *create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteQuery *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteQuery *new_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteQuery *create_NetSqlcipherDatabaseSQLiteQuery_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withInt_withNSObjectArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, jint offsetIndex, IOSObjectArray *bindArgs);

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseSQLiteQuery)

#endif

#pragma pop_macro("INCLUDE_ALL_NetSqlcipherDatabaseSQLiteQuery")
