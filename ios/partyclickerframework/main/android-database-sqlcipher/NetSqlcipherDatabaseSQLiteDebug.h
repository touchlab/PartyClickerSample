//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug")
#ifdef RESTRICT_NetSqlcipherDatabaseSQLiteDebug
#define INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug 0
#else
#define INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug 1
#endif
#undef RESTRICT_NetSqlcipherDatabaseSQLiteDebug

#if !defined (NetSqlcipherDatabaseSQLiteDebug_) && (INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug || defined(INCLUDE_NetSqlcipherDatabaseSQLiteDebug))
#define NetSqlcipherDatabaseSQLiteDebug_

@class IOSIntArray;
@class NetSqlcipherDatabaseSQLiteDebug_PagerStats;

@interface NetSqlcipherDatabaseSQLiteDebug : NSObject

#pragma mark Public

- (instancetype)init;

+ (NetSqlcipherDatabaseSQLiteDebug_PagerStats *)getDatabaseInfo;

+ (jlong)getHeapAllocatedSize;

+ (void)getHeapDirtyPagesWithIntArray:(IOSIntArray *)pages;

+ (jlong)getHeapFreeSize;

+ (jlong)getHeapSize;

+ (jint)getNumActiveCursorsFinalized;

+ (void)getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats:(NetSqlcipherDatabaseSQLiteDebug_PagerStats *)stats;

#pragma mark Package-Private

+ (void)notifyActiveCursorFinalized;

@end

J2OBJC_STATIC_INIT(NetSqlcipherDatabaseSQLiteDebug)

inline jboolean NetSqlcipherDatabaseSQLiteDebug_get_DEBUG_SQL_STATEMENTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_STATEMENTS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_STATEMENTS, jboolean)

inline jboolean NetSqlcipherDatabaseSQLiteDebug_get_DEBUG_SQL_TIME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_TIME;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_TIME, jboolean)

inline jboolean NetSqlcipherDatabaseSQLiteDebug_get_DEBUG_SQL_CACHE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_SQL_CACHE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE, jboolean)

inline jboolean NetSqlcipherDatabaseSQLiteDebug_get_DEBUG_ACTIVE_CURSOR_FINALIZATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_ACTIVE_CURSOR_FINALIZATION;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetSqlcipherDatabaseSQLiteDebug, DEBUG_ACTIVE_CURSOR_FINALIZATION, jboolean)

inline jboolean NetSqlcipherDatabaseSQLiteDebug_get_DEBUG_LOCK_TIME_TRACKING_STACK_TRACE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetSqlcipherDatabaseSQLiteDebug_DEBUG_LOCK_TIME_TRACKING_STACK_TRACE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetSqlcipherDatabaseSQLiteDebug, DEBUG_LOCK_TIME_TRACKING_STACK_TRACE, jboolean)

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_init(NetSqlcipherDatabaseSQLiteDebug *self);

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug *new_NetSqlcipherDatabaseSQLiteDebug_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug *create_NetSqlcipherDatabaseSQLiteDebug_init();

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug_PagerStats *NetSqlcipherDatabaseSQLiteDebug_getDatabaseInfo();

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_getPagerStatsWithNetSqlcipherDatabaseSQLiteDebug_PagerStats_(NetSqlcipherDatabaseSQLiteDebug_PagerStats *stats);

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseSQLiteDebug_getHeapSize();

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseSQLiteDebug_getHeapAllocatedSize();

FOUNDATION_EXPORT jlong NetSqlcipherDatabaseSQLiteDebug_getHeapFreeSize();

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_getHeapDirtyPagesWithIntArray_(IOSIntArray *pages);

FOUNDATION_EXPORT jint NetSqlcipherDatabaseSQLiteDebug_getNumActiveCursorsFinalized();

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_notifyActiveCursorFinalized();

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseSQLiteDebug)

#endif

#if !defined (NetSqlcipherDatabaseSQLiteDebug_PagerStats_) && (INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug || defined(INCLUDE_NetSqlcipherDatabaseSQLiteDebug_PagerStats))
#define NetSqlcipherDatabaseSQLiteDebug_PagerStats_

@class JavaUtilArrayList;

@interface NetSqlcipherDatabaseSQLiteDebug_PagerStats : NSObject {
 @public
  jlong totalBytes_;
  jlong referencedBytes_;
  jlong databaseBytes_;
  jint numPagers_;
  jint memoryUsed_;
  jint pageCacheOverflo_;
  jint largestMemAlloc_;
  JavaUtilArrayList *dbStats_;
}

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDebug_PagerStats)

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDebug_PagerStats, dbStats_, JavaUtilArrayList *)

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_PagerStats_init(NetSqlcipherDatabaseSQLiteDebug_PagerStats *self);

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug_PagerStats *new_NetSqlcipherDatabaseSQLiteDebug_PagerStats_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug_PagerStats *create_NetSqlcipherDatabaseSQLiteDebug_PagerStats_init();

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseSQLiteDebug_PagerStats)

#endif

#if !defined (NetSqlcipherDatabaseSQLiteDebug_DbStats_) && (INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug || defined(INCLUDE_NetSqlcipherDatabaseSQLiteDebug_DbStats))
#define NetSqlcipherDatabaseSQLiteDebug_DbStats_

@interface NetSqlcipherDatabaseSQLiteDebug_DbStats : NSObject {
 @public
  NSString *dbName_;
  jlong pageSize_;
  jlong dbSize_;
  jint lookaside_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)dbName
                        withLong:(jlong)pageCount
                        withLong:(jlong)pageSize
                         withInt:(jint)lookaside;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDebug_DbStats)

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDebug_DbStats, dbName_, NSString *)

FOUNDATION_EXPORT void NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NetSqlcipherDatabaseSQLiteDebug_DbStats *self, NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside);

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug_DbStats *new_NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetSqlcipherDatabaseSQLiteDebug_DbStats *create_NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside);

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseSQLiteDebug_DbStats)

#endif

#pragma pop_macro("INCLUDE_ALL_NetSqlcipherDatabaseSQLiteDebug")
