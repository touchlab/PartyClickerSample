//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "AndroidContentContext.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherCrossProcessCursorWrapper.h"
#include "NetSqlcipherCursor.h"
#include "NetSqlcipherCursorWrapper.h"
#include "NetSqlcipherDatabaseDatabaseObjectNotClosedException.h"
#include "NetSqlcipherDatabaseErrorHandler.h"
#include "NetSqlcipherDatabaseSQLiteClosable.h"
#include "NetSqlcipherDatabaseSQLiteCompiledSql.h"
#include "NetSqlcipherDatabaseSQLiteCursor.h"
#include "NetSqlcipherDatabaseSQLiteCursorDriver.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDatabaseCorruptException.h"
#include "NetSqlcipherDatabaseSQLiteDatabaseHook.h"
#include "NetSqlcipherDatabaseSQLiteDebug.h"
#include "NetSqlcipherDatabaseSQLiteDirectCursorDriver.h"
#include "NetSqlcipherDatabaseSQLiteException.h"
#include "NetSqlcipherDatabaseSQLiteQueryBuilder.h"
#include "NetSqlcipherDatabaseSQLiteStatement.h"
#include "NetSqlcipherDatabaseSQLiteTransactionListener.h"
#include "NetSqlcipherDatabaseUtils.h"
#include "NetSqlcipherDefaultDatabaseErrorHandler.h"
#include "NetSqlcipherSQLException.h"
#include "android/os/SystemClock.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "android/util/Pair.h"
#include "java/io/File.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface NetSqlcipherDatabaseSQLiteDatabase () {
 @public
  jboolean mInnerTransactionIsSuccessful_;
  jboolean mTransactionIsSuccessful_;
  id<NetSqlcipherDatabaseSQLiteTransactionListener> mTransactionListener_;
  JavaUtilConcurrentLocksReentrantLock *mLock_SQLiteDatabase_;
  jlong mLockAcquiredWallTime_;
  jlong mLockAcquiredThreadTime_;
  jlong mLastLockMessageTime_;
  NSString *mLastSqlStatement_;
  NSString *mPath_;
  NSString *mPathForLogs_;
  jint mFlags_;
  id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> mFactory_;
  JavaUtilWeakHashMap *mPrograms_;
  jint mMaxSqlCacheSize_;
  jint mCacheFullWarnings_;
  id<NetSqlcipherDatabaseErrorHandler> mErrorHandler_;
  jint mNumCacheHits_;
  jint mNumCacheMisses_;
  NSString *mTimeOpened_;
  NSString *mTimeClosed_;
  NSException *mStackTrace_;
  jint mSlowQueryThreshold_;
  jboolean mLockingEnabled_;
  id<JavaUtilMap> mSyncUpdateInfo_;
}

- (void)lockForced;

- (void)unlockForced;

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)checkFullyYielded
                                     withLong:(jlong)sleepAfterYieldDelay;

- (void)closeClosable;

- (void)dbclose;

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable
                         withNSString:(NSString *)deletedTable;

- (instancetype)initWithNSString:(NSString *)path
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)flags
withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler;

- (void)openDatabaseInternalWithCharArray:(IOSCharArray *)password
withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook;

- (jboolean)containsNullWithCharArray:(IOSCharArray *)data;

- (void)keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook
                                         withJavaLangRunnable:(id<JavaLangRunnable>)keyOperation;

- (NSString *)getTime;

- (NSString *)getPathForLogs;

- (void)deallocCachedSqlStatements;

+ (JavaUtilArrayList *)getActiveDatabases;

+ (jlong)getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                               withNSString:(NSString *)pragma;

+ (JavaUtilArrayList *)getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)dbObj;

- (IOSByteArray *)getBytesWithCharArray:(IOSCharArray *)data;

- (void)dbopenWithNSString:(NSString *)path
                   withInt:(jint)flags;

- (void)enableSqlTracingWithNSString:(NSString *)path;

- (void)enableSqlProfilingWithNSString:(NSString *)path;

- (jint)native_getDbLookaside;

- (void)native_rawExecSQLWithNSString:(NSString *)sql;

- (jint)native_statusWithInt:(jint)operation
                 withBoolean:(jboolean)reset;

- (void)native_keyWithCharArray:(IOSCharArray *)key;

- (void)native_rekeyWithNSString:(NSString *)key;

- (void)keyWithByteArray:(IOSByteArray *)key;

- (void)key_mutf8WithCharArray:(IOSCharArray *)key;

- (void)rekeyWithByteArray:(IOSByteArray *)key;

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mTransactionListener_, id<NetSqlcipherDatabaseSQLiteTransactionListener>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mLock_SQLiteDatabase_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mLastSqlStatement_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mPath_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mPathForLogs_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mFactory_, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mPrograms_, JavaUtilWeakHashMap *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mErrorHandler_, id<NetSqlcipherDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mTimeOpened_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mTimeClosed_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mStackTrace_, NSException *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase, mSyncUpdateInfo_, id<JavaUtilMap>)

inline NSString *NetSqlcipherDatabaseSQLiteDatabase_get_TAG();
static NSString *NetSqlcipherDatabaseSQLiteDatabase_TAG = @"Database";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, TAG, NSString *)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_EVENT_DB_OPERATION();
#define NetSqlcipherDatabaseSQLiteDatabase_EVENT_DB_OPERATION 52000
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, EVENT_DB_OPERATION, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_EVENT_DB_CORRUPT();
#define NetSqlcipherDatabaseSQLiteDatabase_EVENT_DB_CORRUPT 75004
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, EVENT_DB_CORRUPT, jint)

inline NSString *NetSqlcipherDatabaseSQLiteDatabase_get_KEY_ENCODING();
static NSString *NetSqlcipherDatabaseSQLiteDatabase_KEY_ENCODING = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, KEY_ENCODING, NSString *)

inline JavaUtilWeakHashMap *NetSqlcipherDatabaseSQLiteDatabase_get_sActiveDatabases();
inline JavaUtilWeakHashMap *NetSqlcipherDatabaseSQLiteDatabase_set_sActiveDatabases(JavaUtilWeakHashMap *value);
static JavaUtilWeakHashMap *NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases;
J2OBJC_STATIC_FIELD_OBJ(NetSqlcipherDatabaseSQLiteDatabase, sActiveDatabases, JavaUtilWeakHashMap *)

inline IOSObjectArray *NetSqlcipherDatabaseSQLiteDatabase_get_CONFLICT_VALUES();
static IOSObjectArray *NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_OPEN_READ_MASK();
#define NetSqlcipherDatabaseSQLiteDatabase_OPEN_READ_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, OPEN_READ_MASK, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_LOCK_WARNING_WINDOW_IN_MS();
#define NetSqlcipherDatabaseSQLiteDatabase_LOCK_WARNING_WINDOW_IN_MS 20000
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, LOCK_WARNING_WINDOW_IN_MS, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_LOCK_ACQUIRED_WARNING_TIME_IN_MS();
#define NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_TIME_IN_MS 300
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, LOCK_ACQUIRED_WARNING_TIME_IN_MS, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS();
#define NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS 100
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT();
#define NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT 2000
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_SLEEP_AFTER_YIELD_QUANTUM();
#define NetSqlcipherDatabaseSQLiteDatabase_SLEEP_AFTER_YIELD_QUANTUM 1000
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, SLEEP_AFTER_YIELD_QUANTUM, jint)

inline JavaUtilRegexPattern *NetSqlcipherDatabaseSQLiteDatabase_get_EMAIL_IN_DB_PATTERN();
static JavaUtilRegexPattern *NetSqlcipherDatabaseSQLiteDatabase_EMAIL_IN_DB_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, EMAIL_IN_DB_PATTERN, JavaUtilRegexPattern *)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_sQueryLogTimeInMillis();
inline jint NetSqlcipherDatabaseSQLiteDatabase_set_sQueryLogTimeInMillis(jint value);
inline jint *NetSqlcipherDatabaseSQLiteDatabase_getRef_sQueryLogTimeInMillis();
static jint NetSqlcipherDatabaseSQLiteDatabase_sQueryLogTimeInMillis = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetSqlcipherDatabaseSQLiteDatabase, sQueryLogTimeInMillis, jint)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_QUERY_LOG_SQL_LENGTH();
#define NetSqlcipherDatabaseSQLiteDatabase_QUERY_LOG_SQL_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, QUERY_LOG_SQL_LENGTH, jint)

inline NSString *NetSqlcipherDatabaseSQLiteDatabase_get_COMMIT_SQL();
static NSString *NetSqlcipherDatabaseSQLiteDatabase_COMMIT_SQL = @"COMMIT;";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, COMMIT_SQL, NSString *)

inline jint NetSqlcipherDatabaseSQLiteDatabase_get_MAX_WARNINGS_ON_CACHESIZE_CONDITION();
#define NetSqlcipherDatabaseSQLiteDatabase_MAX_WARNINGS_ON_CACHESIZE_CONDITION 1
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseSQLiteDatabase, MAX_WARNINGS_ON_CACHESIZE_CONDITION, jint)

inline NSString *NetSqlcipherDatabaseSQLiteDatabase_get_LOG_SLOW_QUERIES_PROPERTY();
static NSString *NetSqlcipherDatabaseSQLiteDatabase_LOG_SLOW_QUERIES_PROPERTY = @"db.log.slow_query_threshold";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseSQLiteDatabase, LOG_SLOW_QUERIES_PROPERTY, NSString *)

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_lockForced(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_unlockForced(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static jboolean NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(NetSqlcipherDatabaseSQLiteDatabase *self, jboolean checkFullyYielded, jlong sleepAfterYieldDelay);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_closeClosable(NetSqlcipherDatabaseSQLiteDatabase *self);

void NetSqlcipherDatabaseSQLiteDatabase_dbclose(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_markTableSyncableWithNSString_withNSString_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *table, NSString *foreignKey, NSString *updateTable, NSString *deletedTable);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase *new_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase *create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook);

__attribute__((unused)) static jboolean NetSqlcipherDatabaseSQLiteDatabase_containsNullWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *data);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook_withJavaLangRunnable_(NetSqlcipherDatabaseSQLiteDatabase *self, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook, id<JavaLangRunnable> keyOperation);

__attribute__((unused)) static NSString *NetSqlcipherDatabaseSQLiteDatabase_getTime(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static NSString *NetSqlcipherDatabaseSQLiteDatabase_getPath(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_deallocCachedSqlStatements(NetSqlcipherDatabaseSQLiteDatabase *self);

__attribute__((unused)) static JavaUtilArrayList *NetSqlcipherDatabaseSQLiteDatabase_getActiveDatabases();

__attribute__((unused)) static jlong NetSqlcipherDatabaseSQLiteDatabase_getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *pragma);

__attribute__((unused)) static JavaUtilArrayList *NetSqlcipherDatabaseSQLiteDatabase_getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase_(NetSqlcipherDatabaseSQLiteDatabase *dbObj);

__attribute__((unused)) static IOSByteArray *NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *data);

void NetSqlcipherDatabaseSQLiteDatabase_dbopenWithNSString_withInt_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, jint flags);

void NetSqlcipherDatabaseSQLiteDatabase_enableSqlTracingWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path);

void NetSqlcipherDatabaseSQLiteDatabase_enableSqlProfilingWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path);

void NetSqlcipherDatabaseSQLiteDatabase_native_execSQLWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *sql);

jlong NetSqlcipherDatabaseSQLiteDatabase_lastInsertRow(NetSqlcipherDatabaseSQLiteDatabase *self);

jint NetSqlcipherDatabaseSQLiteDatabase_lastChangeCount(NetSqlcipherDatabaseSQLiteDatabase *self);

jint NetSqlcipherDatabaseSQLiteDatabase_native_getDbLookaside(NetSqlcipherDatabaseSQLiteDatabase *self);

void NetSqlcipherDatabaseSQLiteDatabase_native_rawExecSQLWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *sql);

jint NetSqlcipherDatabaseSQLiteDatabase_native_statusWithInt_withBoolean_(NetSqlcipherDatabaseSQLiteDatabase *self, jint operation, jboolean reset);

void NetSqlcipherDatabaseSQLiteDatabase_native_keyWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *key);

void NetSqlcipherDatabaseSQLiteDatabase_native_rekeyWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *key);

void NetSqlcipherDatabaseSQLiteDatabase_keyWithByteArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSByteArray *key);

void NetSqlcipherDatabaseSQLiteDatabase_key_mutf8WithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *key);

void NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSByteArray *key);

__attribute__((unused)) static IOSObjectArray *NetSqlcipherDatabaseSQLiteDatabase__Annotations$0();

@interface NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader : NSObject

@end

@interface NetSqlcipherDatabaseSQLiteDatabase_1 : NSObject < NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader >

- (instancetype)init;

- (void)loadLibrariesWithNSStringArray:(IOSObjectArray *)libNames;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDatabase_1)

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_1_init(NetSqlcipherDatabaseSQLiteDatabase_1 *self);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_1 *new_NetSqlcipherDatabaseSQLiteDatabase_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_1 *create_NetSqlcipherDatabaseSQLiteDatabase_1_init();

@interface NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo : NSObject {
 @public
  NSString *masterTable_;
  NSString *deletedTable_;
  NSString *foreignKey_;
}

- (instancetype)initWithNSString:(NSString *)masterTable
                    withNSString:(NSString *)deletedTable
                    withNSString:(NSString *)foreignKey;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo)

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo, masterTable_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo, deletedTable_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo, foreignKey_, NSString *)

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *self, NSString *masterTable, NSString *deletedTable, NSString *foreignKey);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *new_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NSString *masterTable, NSString *deletedTable, NSString *foreignKey) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *create_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NSString *masterTable, NSString *deletedTable, NSString *foreignKey);

J2OBJC_TYPE_LITERAL_HEADER(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo)

@interface NetSqlcipherDatabaseSQLiteDatabase_CursorFactory : NSObject

@end

@interface NetSqlcipherDatabaseSQLiteDatabase_2 : NSObject < JavaLangRunnable > {
 @public
  NetSqlcipherDatabaseSQLiteDatabase *this$0_;
  IOSByteArray *val$keyMaterial_;
}

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)outer$
                                             withByteArray:(IOSByteArray *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDatabase_2)

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase_2 *self, NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_2 *new_NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_2 *create_NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0);

@interface NetSqlcipherDatabaseSQLiteDatabase_3 : NSObject < JavaLangRunnable > {
 @public
  NetSqlcipherDatabaseSQLiteDatabase *this$0_;
  IOSCharArray *val$password_;
}

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)outer$
                                             withCharArray:(IOSCharArray *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetSqlcipherDatabaseSQLiteDatabase_3)

__attribute__((unused)) static void NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase_3 *self, NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_3 *new_NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteDatabase_3 *create_NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0);

J2OBJC_INITIALIZED_DEFN(NetSqlcipherDatabaseSQLiteDatabase)

NSString *NetSqlcipherDatabaseSQLiteDatabase_SQLCIPHER_ANDROID_VERSION = @"3.5.7";
NSString *NetSqlcipherDatabaseSQLiteDatabase_MEMORY = @":memory:";
NSString *NetSqlcipherDatabaseSQLiteDatabase_GET_LOCK_LOG_PREFIX = @"GETLOCK:";

@implementation NetSqlcipherDatabaseSQLiteDatabase

- (jint)statusWithInt:(jint)operation
          withBoolean:(jboolean)reset {
  return NetSqlcipherDatabaseSQLiteDatabase_native_statusWithInt_withBoolean_(self, operation, reset);
}

- (void)changePasswordWithNSString:(NSString *)password {
  if (![self isOpen]) {
    @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(@"database not open");
  }
  if (password != nil) {
    IOSByteArray *keyMaterial = NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(self, [password java_toCharArray]);
    NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(self, keyMaterial);
    {
      IOSByteArray *a__ = keyMaterial;
      jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte data = *b__++;
        data = 0;
      }
    }
  }
}

- (void)changePasswordWithCharArray:(IOSCharArray *)password {
  if (![self isOpen]) {
    @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(@"database not open");
  }
  if (password != nil) {
    IOSByteArray *keyMaterial = NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(self, password);
    NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(self, keyMaterial);
    {
      IOSByteArray *a__ = keyMaterial;
      jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte data = *b__++;
        data = 0;
      }
    }
  }
}

+ (void)loadLibsWithAndroidContentContext:(AndroidContentContext *)context {
  NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_(context);
}

+ (void)loadLibsWithAndroidContentContext:(AndroidContentContext *)context
                           withJavaIoFile:(JavaIoFile *)workingDir {
  NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_(context, workingDir);
}

+ (void)loadLibsWithAndroidContentContext:(AndroidContentContext *)context
withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader:(id<NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader>)libraryLoader {
  NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(context, libraryLoader);
}

+ (void)loadLibsWithAndroidContentContext:(AndroidContentContext *)context
                           withJavaIoFile:(JavaIoFile *)workingDir
withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader:(id<NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader>)libraryLoader {
  NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(context, workingDir, libraryLoader);
}

- (void)addSQLiteClosableWithNetSqlcipherDatabaseSQLiteClosable:(NetSqlcipherDatabaseSQLiteClosable *)closable {
  [self lock];
  @try {
    [((JavaUtilWeakHashMap *) nil_chk(mPrograms_)) putWithId:closable withId:nil];
  }
  @finally {
    [self unlock];
  }
}

- (void)removeSQLiteClosableWithNetSqlcipherDatabaseSQLiteClosable:(NetSqlcipherDatabaseSQLiteClosable *)closable {
  [self lock];
  @try {
    [((JavaUtilWeakHashMap *) nil_chk(mPrograms_)) removeWithId:closable];
  }
  @finally {
    [self unlock];
  }
}

- (void)onAllReferencesReleased {
  if ([self isOpen]) {
    if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
      JreStrongAssign(&mTimeClosed_, NetSqlcipherDatabaseSQLiteDatabase_getTime(self));
    }
    NetSqlcipherDatabaseSQLiteDatabase_dbclose(self);
    @synchronized(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases) {
      [((JavaUtilWeakHashMap *) nil_chk(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases)) removeWithId:self];
    }
  }
}

+ (jint)releaseMemory {
  return NetSqlcipherDatabaseSQLiteDatabase_releaseMemory();
}

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled {
  mLockingEnabled_ = lockingEnabled;
}

- (void)onCorruption {
  AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Calling error handler for corrupt database (detected) ", mPath_));
  [((id<NetSqlcipherDatabaseErrorHandler>) nil_chk(mErrorHandler_)) onCorruptionWithNetSqlcipherDatabaseSQLiteDatabase:self];
}

- (void)lock {
  if (!mLockingEnabled_) return;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) lock];
}

- (void)lockForced {
  NetSqlcipherDatabaseSQLiteDatabase_lockForced(self);
}

- (void)unlock {
  if (!mLockingEnabled_) return;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) unlock];
}

- (void)unlockForced {
  NetSqlcipherDatabaseSQLiteDatabase_unlockForced(self);
}

- (void)beginTransaction {
  [self beginTransactionWithListenerWithNetSqlcipherDatabaseSQLiteTransactionListener:nil];
}

- (void)beginTransactionWithListenerWithNetSqlcipherDatabaseSQLiteTransactionListener:(id<NetSqlcipherDatabaseSQLiteTransactionListener>)transactionListener {
  NetSqlcipherDatabaseSQLiteDatabase_lockForced(self);
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  jboolean ok = false;
  @try {
    if ([((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) getHoldCount] > 1) {
      if (mInnerTransactionIsSuccessful_) {
        NSString *msg = @"Cannot call beginTransaction between calling setTransactionSuccessful and endTransaction";
        JavaLangIllegalStateException *e = create_JavaLangIllegalStateException_initWithNSString_(msg);
        AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, @"beginTransaction() failed", e);
        @throw e;
      }
      ok = true;
      return;
    }
    [self execSQLWithNSString:@"BEGIN EXCLUSIVE;"];
    JreStrongAssign(&mTransactionListener_, transactionListener);
    mTransactionIsSuccessful_ = true;
    mInnerTransactionIsSuccessful_ = false;
    if (transactionListener != nil) {
      @try {
        [transactionListener onBegin];
      }
      @catch (JavaLangRuntimeException *e) {
        [self execSQLWithNSString:@"ROLLBACK;"];
        @throw e;
      }
    }
    ok = true;
  }
  @finally {
    if (!ok) {
      NetSqlcipherDatabaseSQLiteDatabase_unlockForced(self);
    }
  }
}

- (void)endTransaction {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  if (![((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) isHeldByCurrentThread]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"no transaction pending");
  }
  @try {
    if (mInnerTransactionIsSuccessful_) {
      mInnerTransactionIsSuccessful_ = false;
    }
    else {
      mTransactionIsSuccessful_ = false;
    }
    if ([mLock_SQLiteDatabase_ getHoldCount] != 1) {
      return;
    }
    JavaLangRuntimeException *savedException = nil;
    if (mTransactionListener_ != nil) {
      @try {
        if (mTransactionIsSuccessful_) {
          [mTransactionListener_ onCommit];
        }
        else {
          [mTransactionListener_ onRollback];
        }
      }
      @catch (JavaLangRuntimeException *e) {
        savedException = e;
        mTransactionIsSuccessful_ = false;
      }
    }
    if (mTransactionIsSuccessful_) {
      [self execSQLWithNSString:NetSqlcipherDatabaseSQLiteDatabase_COMMIT_SQL];
    }
    else {
      @try {
        [self execSQLWithNSString:@"ROLLBACK;"];
        if (savedException != nil) {
          @throw savedException;
        }
      }
      @catch (NetSqlcipherSQLException *e) {
        {
          AndroidUtilLog_dWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, @"exception during rollback, maybe the DB previously performed an auto-rollback");
        }
      }
    }
  }
  @finally {
    JreStrongAssign(&mTransactionListener_, nil);
    NetSqlcipherDatabaseSQLiteDatabase_unlockForced(self);
    {
      AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$@$I", @"unlocked ", JavaLangThread_currentThread(), @", holdCount is ", [mLock_SQLiteDatabase_ getHoldCount]));
    }
  }
}

- (void)setTransactionSuccessful {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  if (![((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) isHeldByCurrentThread]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"no transaction pending");
  }
  if (mInnerTransactionIsSuccessful_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"setTransactionSuccessful may only be called once per call to beginTransaction");
  }
  mInnerTransactionIsSuccessful_ = true;
}

- (jboolean)inTransaction {
  return [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) getHoldCount] > 0;
}

- (jboolean)isDbLockedByCurrentThread {
  return [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) isHeldByCurrentThread];
}

- (jboolean)isDbLockedByOtherThreads {
  return ![((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mLock_SQLiteDatabase_)) isHeldByCurrentThread] && [mLock_SQLiteDatabase_ isLocked];
}

- (jboolean)yieldIfContended {
  if (![self isOpen]) return false;
  return NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, false, -1);
}

- (jboolean)yieldIfContendedSafely {
  if (![self isOpen]) return false;
  return NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, -1);
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  if (![self isOpen]) return false;
  return NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, sleepAfterYieldDelay);
}

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)checkFullyYielded
                                     withLong:(jlong)sleepAfterYieldDelay {
  return NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, checkFullyYielded, sleepAfterYieldDelay);
}

- (id<JavaUtilMap>)getSyncedTables {
  @synchronized(mSyncUpdateInfo_) {
    JavaUtilHashMap *tables = create_JavaUtilHashMap_init();
    for (NSString * __strong table in nil_chk([((id<JavaUtilMap>) nil_chk(mSyncUpdateInfo_)) keySet])) {
      NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *info = [mSyncUpdateInfo_ getWithId:table];
      if (((NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *) nil_chk(info))->deletedTable_ != nil) {
        [tables putWithId:table withId:info->deletedTable_];
      }
    }
    return tables;
  }
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                    withNSString:(NSString *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(path, password, factory, flags);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                   withCharArray:(IOSCharArray *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(path, password, factory, flags);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                    withNSString:(NSString *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags
                      withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, flags, hook);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                   withCharArray:(IOSCharArray *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags
                      withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, flags, hook);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                    withNSString:(NSString *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags
                      withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook
                            withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, flags, hook, errorHandler);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
                                                   withCharArray:(IOSCharArray *)password
            withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                         withInt:(jint)flags
                      withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook
                            withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, flags, hook, errorHandler);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                                                              withNSString:(NSString *)password
                      withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(file, password, factory, databaseHook);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                            withNSString:(NSString *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                              withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, databaseHook);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                                                              withNSString:(NSString *)password
                      withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook
                                      withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(file, password, factory, databaseHook, errorHandler);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                            withNSString:(NSString *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                              withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook
                                    withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, databaseHook, errorHandler);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                           withCharArray:(IOSCharArray *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                              withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, databaseHook);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                           withCharArray:(IOSCharArray *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                              withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook
                                    withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, databaseHook, errorHandler);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                                                              withNSString:(NSString *)password
                      withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(file, password, factory);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                            withNSString:(NSString *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(path, password, factory);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                                                           withCharArray:(IOSCharArray *)password
                    withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory {
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(path, password, factory);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                                                      withNSString:(NSString *)password {
  return NetSqlcipherDatabaseSQLiteDatabase_createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNSString_(factory, password);
}

+ (NetSqlcipherDatabaseSQLiteDatabase *)createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                                                                                     withCharArray:(IOSCharArray *)password {
  return NetSqlcipherDatabaseSQLiteDatabase_createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withCharArray_(factory, password);
}

- (void)close {
  if (![self isOpen]) {
    return;
  }
  [self lock];
  @try {
    NetSqlcipherDatabaseSQLiteDatabase_closeClosable(self);
    [self onAllReferencesReleased];
  }
  @finally {
    [self unlock];
  }
}

- (void)closeClosable {
  NetSqlcipherDatabaseSQLiteDatabase_closeClosable(self);
}

- (void)dbclose {
  NetSqlcipherDatabaseSQLiteDatabase_dbclose(self);
}

- (jint)getVersion {
  NetSqlcipherDatabaseSQLiteStatement *prog = nil;
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    prog = create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, @"PRAGMA user_version;");
    jlong version_ = [prog simpleQueryForLong];
    return (jint) version_;
  }
  @finally {
    if (prog != nil) [prog close];
    [self unlock];
  }
}

- (void)setVersionWithInt:(jint)version_ {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", version_)];
}

- (jlong)getMaximumSize {
  NetSqlcipherDatabaseSQLiteStatement *prog = nil;
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    prog = create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, @"PRAGMA max_page_count;");
    jlong pageCount = [prog simpleQueryForLong];
    return pageCount * [self getPageSize];
  }
  @finally {
    if (prog != nil) [prog close];
    [self unlock];
  }
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  NetSqlcipherDatabaseSQLiteStatement *prog = nil;
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    jlong pageSize = [self getPageSize];
    jlong numPages = numBytes / pageSize;
    if ((numBytes % pageSize) != 0) {
      numPages++;
    }
    prog = create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, JreStrcat("$J", @"PRAGMA max_page_count = ", numPages));
    jlong newPageCount = [prog simpleQueryForLong];
    return newPageCount * pageSize;
  }
  @finally {
    if (prog != nil) [prog close];
    [self unlock];
  }
}

- (jlong)getPageSize {
  NetSqlcipherDatabaseSQLiteStatement *prog = nil;
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    prog = create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, @"PRAGMA page_size;");
    jlong size = [prog simpleQueryForLong];
    return size;
  }
  @finally {
    if (prog != nil) [prog close];
    [self unlock];
  }
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [self execSQLWithNSString:JreStrcat("$J", @"PRAGMA page_size = ", numBytes)];
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable {
  if (![self isOpen]) {
    @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(@"database not open");
  }
  NetSqlcipherDatabaseSQLiteDatabase_markTableSyncableWithNSString_withNSString_withNSString_withNSString_(self, table, @"_id", table, deletedTable);
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable {
  if (![self isOpen]) {
    @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(@"database not open");
  }
  NetSqlcipherDatabaseSQLiteDatabase_markTableSyncableWithNSString_withNSString_withNSString_withNSString_(self, table, foreignKey, updateTable, nil);
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable
                         withNSString:(NSString *)deletedTable {
  NetSqlcipherDatabaseSQLiteDatabase_markTableSyncableWithNSString_withNSString_withNSString_withNSString_(self, table, foreignKey, updateTable, deletedTable);
}

- (void)rowUpdatedWithNSString:(NSString *)table
                      withLong:(jlong)rowId {
  NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *info;
  @synchronized(mSyncUpdateInfo_) {
    info = [((id<JavaUtilMap>) nil_chk(mSyncUpdateInfo_)) getWithId:table];
  }
  if (info != nil) {
    [self execSQLWithNSString:JreStrcat("$$$$$$$JC", @"UPDATE ", info->masterTable_, @" SET _sync_dirty=1 WHERE _id=(SELECT ", info->foreignKey_, @" FROM ", table, @" WHERE _id=", rowId, ')')];
  }
}

+ (NSString *)findEditTableWithNSString:(NSString *)tables {
  return NetSqlcipherDatabaseSQLiteDatabase_findEditTableWithNSString_(tables);
}

- (NetSqlcipherDatabaseSQLiteStatement *)compileStatementWithNSString:(NSString *)sql {
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    return create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, sql);
  }
  @finally {
    [self unlock];
  }
}

- (id<NetSqlcipherCursor>)queryWithBoolean:(jboolean)distinct
                              withNSString:(NSString *)table
                         withNSStringArray:(IOSObjectArray *)columns
                              withNSString:(NSString *)selection
                         withNSStringArray:(IOSObjectArray *)selectionArgs
                              withNSString:(NSString *)groupBy
                              withNSString:(NSString *)having
                              withNSString:(NSString *)orderBy
                              withNSString:(NSString *)limit {
  return [self queryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<NetSqlcipherCursor>)queryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                   withBoolean:(jboolean)distinct
                                                                                  withNSString:(NSString *)table
                                                                             withNSStringArray:(IOSObjectArray *)columns
                                                                                  withNSString:(NSString *)selection
                                                                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                  withNSString:(NSString *)groupBy
                                                                                  withNSString:(NSString *)having
                                                                                  withNSString:(NSString *)orderBy
                                                                                  withNSString:(NSString *)limit {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  NSString *sql = NetSqlcipherDatabaseSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, table, columns, selection, groupBy, having, orderBy, limit);
  return [self rawQueryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:NetSqlcipherDatabaseSQLiteDatabase_findEditTableWithNSString_(table)];
}

- (id<NetSqlcipherCursor>)queryWithNSString:(NSString *)table
                          withNSStringArray:(IOSObjectArray *)columns
                               withNSString:(NSString *)selection
                          withNSStringArray:(IOSObjectArray *)selectionArgs
                               withNSString:(NSString *)groupBy
                               withNSString:(NSString *)having
                               withNSString:(NSString *)orderBy {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:nil];
}

- (id<NetSqlcipherCursor>)queryWithNSString:(NSString *)table
                          withNSStringArray:(IOSObjectArray *)columns
                               withNSString:(NSString *)selection
                          withNSStringArray:(IOSObjectArray *)selectionArgs
                               withNSString:(NSString *)groupBy
                               withNSString:(NSString *)having
                               withNSString:(NSString *)orderBy
                               withNSString:(NSString *)limit {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<NetSqlcipherCursor>)rawQueryWithNSString:(NSString *)sql
                             withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [self rawQueryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil];
}

- (id<NetSqlcipherCursor>)rawQueryWithNSString:(NSString *)sql
                             withNSObjectArray:(IOSObjectArray *)args {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  jlong timeStart = 0;
  if (mSlowQueryThreshold_ != -1) {
    timeStart = JavaLangSystem_currentTimeMillis();
  }
  NetSqlcipherDatabaseSQLiteDirectCursorDriver *driver = create_NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(self, sql, nil);
  id<NetSqlcipherCursor> cursor = nil;
  @try {
    cursor = [driver queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:mFactory_ withNSObjectArray:args];
  }
  @finally {
    if (mSlowQueryThreshold_ != -1) {
      jint count = -1;
      if (cursor != nil) {
        count = [cursor getCount];
      }
      jlong duration = JavaLangSystem_currentTimeMillis() - timeStart;
      if (duration >= mSlowQueryThreshold_) {
        AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$J$$$I", @"query (", duration, @" ms): ", [driver description], @", args are <redacted>, count is ", count));
      }
    }
  }
  return create_NetSqlcipherCrossProcessCursorWrapper_initWithNetSqlcipherCursor_(cursor);
}

- (id<NetSqlcipherCursor>)rawQueryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                     withNSString:(NSString *)sql
                                                                                withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                     withNSString:(NSString *)editTable {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  jlong timeStart = 0;
  if (mSlowQueryThreshold_ != -1) {
    timeStart = JavaLangSystem_currentTimeMillis();
  }
  id<NetSqlcipherDatabaseSQLiteCursorDriver> driver = create_NetSqlcipherDatabaseSQLiteDirectCursorDriver_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSString_(self, sql, editTable);
  id<NetSqlcipherCursor> cursor = nil;
  @try {
    cursor = [driver queryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:cursorFactory != nil ? cursorFactory : mFactory_ withNSStringArray:selectionArgs];
  }
  @finally {
    if (mSlowQueryThreshold_ != -1) {
      jint count = -1;
      if (cursor != nil) {
        count = [cursor getCount];
      }
      jlong duration = JavaLangSystem_currentTimeMillis() - timeStart;
      if (duration >= mSlowQueryThreshold_) {
        AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$J$$$I", @"query (", duration, @" ms): ", [driver description], @", args are <redacted>, count is ", count));
      }
    }
  }
  return create_NetSqlcipherCrossProcessCursorWrapper_initWithNetSqlcipherCursor_(cursor);
}

- (id<NetSqlcipherCursor>)rawQueryWithNSString:(NSString *)sql
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                       withInt:(jint)initialRead
                                       withInt:(jint)maxRead {
  NetSqlcipherCursorWrapper *cursorWrapper = (NetSqlcipherCursorWrapper *) cast_chk([self rawQueryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil], [NetSqlcipherCursorWrapper class]);
  [((NetSqlcipherDatabaseSQLiteCursor *) nil_chk(((NetSqlcipherDatabaseSQLiteCursor *) cast_chk([((NetSqlcipherCursorWrapper *) nil_chk(cursorWrapper)) getWrappedCursor], [NetSqlcipherDatabaseSQLiteCursor class])))) setLoadStyleWithInt:initialRead withInt:maxRead];
  return cursorWrapper;
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_NONE];
  }
  @catch (NetSqlcipherSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Error inserting <redacted values> into ", table), e);
    return -1;
  }
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_NONE];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_REPLACE];
  }
  @catch (NetSqlcipherSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Error inserting <redacted values> into ", table), e);
    return -1;
  }
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_REPLACE];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  JavaLangStringBuilder *sql = create_JavaLangStringBuilder_initWithInt_(152);
  [sql appendWithNSString:@"INSERT"];
  [sql appendWithNSString:IOSObjectArray_Get(nil_chk(NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
  [sql appendWithNSString:@" INTO "];
  [sql appendWithNSString:table];
  JavaLangStringBuilder *values = create_JavaLangStringBuilder_initWithInt_(40);
  id<JavaUtilSet> entrySet = nil;
  if (initialValues != nil && [initialValues size] > 0) {
    entrySet = [initialValues valueSet];
    id<JavaUtilIterator> entriesIter = [((id<JavaUtilSet>) nil_chk(entrySet)) iterator];
    [sql appendWithChar:'('];
    jboolean needSeparator = false;
    while ([((id<JavaUtilIterator>) nil_chk(entriesIter)) hasNext]) {
      if (needSeparator) {
        [sql appendWithNSString:@", "];
        [values appendWithNSString:@", "];
      }
      needSeparator = true;
      id<JavaUtilMap_Entry> entry_ = [entriesIter next];
      [sql appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
      [values appendWithChar:'?'];
    }
    [sql appendWithChar:')'];
  }
  else {
    [sql appendWithNSString:JreStrcat("C$$", '(', nullColumnHack, @") ")];
    [values appendWithNSString:@"NULL"];
  }
  [sql appendWithNSString:@" VALUES("];
  [sql appendWithJavaLangCharSequence:values];
  [sql appendWithNSString:@");"];
  [self lock];
  NetSqlcipherDatabaseSQLiteStatement *statement = nil;
  @try {
    statement = [self compileStatementWithNSString:[sql description]];
    if (entrySet != nil) {
      jint size = [entrySet size];
      id<JavaUtilIterator> entriesIter = [entrySet iterator];
      for (jint i = 0; i < size; i++) {
        id<JavaUtilMap_Entry> entry_ = [((id<JavaUtilIterator>) nil_chk(entriesIter)) next];
        NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(statement, i + 1, [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]);
      }
    }
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(statement)) execute];
    jlong insertedRowId = [self lastChangeCount] > 0 ? [self lastInsertRow] : -1;
    if (insertedRowId == -1) {
      AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Error inserting <redacted values> using <redacted sql> into ", table));
    }
    else {
      if (AndroidUtilLog_isLoggableWithNSString_withInt_(NetSqlcipherDatabaseSQLiteDatabase_TAG, AndroidUtilLog_VERBOSE)) {
        AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$J$$", @"Inserting row ", insertedRowId, @" from <redacted values> using <redacted sql> into ", table));
      }
    }
    return insertedRowId;
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @finally {
    if (statement != nil) {
      [statement close];
    }
    [self unlock];
  }
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  NetSqlcipherDatabaseSQLiteStatement *statement = nil;
  @try {
    statement = [self compileStatementWithNSString:JreStrcat("$$$", @"DELETE FROM ", table, (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @""))];
    if (whereArgs != nil) {
      jint numArgs = whereArgs->size_;
      for (jint i = 0; i < numArgs; i++) {
        NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(statement, i + 1, IOSObjectArray_Get(whereArgs, i));
      }
    }
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(statement)) execute];
    return [self lastChangeCount];
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @finally {
    if (statement != nil) {
      [statement close];
    }
    [self unlock];
  }
}

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self updateWithOnConflictWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs withInt:NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_NONE];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  if (values == nil || [values size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  JavaLangStringBuilder *sql = create_JavaLangStringBuilder_initWithInt_(120);
  [sql appendWithNSString:@"UPDATE "];
  [sql appendWithNSString:IOSObjectArray_Get(nil_chk(NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
  [sql appendWithNSString:table];
  [sql appendWithNSString:@" SET "];
  id<JavaUtilSet> entrySet = [values valueSet];
  id<JavaUtilIterator> entriesIter = [((id<JavaUtilSet>) nil_chk(entrySet)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(entriesIter)) hasNext]) {
    id<JavaUtilMap_Entry> entry_ = [entriesIter next];
    [sql appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    [sql appendWithNSString:@"=?"];
    if ([entriesIter hasNext]) {
      [sql appendWithNSString:@", "];
    }
  }
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause)) {
    [sql appendWithNSString:@" WHERE "];
    [sql appendWithNSString:whereClause];
  }
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  NetSqlcipherDatabaseSQLiteStatement *statement = nil;
  @try {
    statement = [self compileStatementWithNSString:[sql description]];
    jint size = [entrySet size];
    entriesIter = [entrySet iterator];
    jint bindArg = 1;
    for (jint i = 0; i < size; i++) {
      id<JavaUtilMap_Entry> entry_ = [((id<JavaUtilIterator>) nil_chk(entriesIter)) next];
      NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(statement, bindArg, [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]);
      bindArg++;
    }
    if (whereArgs != nil) {
      size = whereArgs->size_;
      for (jint i = 0; i < size; i++) {
        [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(statement)) bindStringWithInt:bindArg withNSString:IOSObjectArray_Get(whereArgs, i)];
        bindArg++;
      }
    }
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(statement)) execute];
    jint numChangedRows = [self lastChangeCount];
    if (AndroidUtilLog_isLoggableWithNSString_withInt_(NetSqlcipherDatabaseSQLiteDatabase_TAG, AndroidUtilLog_VERBOSE)) {
      AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$I$$", @"Updated ", numChangedRows, @" rows using <redacted values> and <redacted sql> for ", table));
    }
    return numChangedRows;
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @catch (NetSqlcipherSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Error updating <redacted values> using <redacted sql> for ", table));
    @throw e;
  }
  @finally {
    if (statement != nil) {
      [statement close];
    }
    [self unlock];
  }
}

- (void)execSQLWithNSString:(NSString *)sql {
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    [self native_execSQLWithNSString:sql];
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @finally {
    [self unlock];
  }
}

- (void)rawExecSQLWithNSString:(NSString *)sql {
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  @try {
    NetSqlcipherDatabaseSQLiteDatabase_native_rawExecSQLWithNSString_(self, sql);
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @finally {
    [self unlock];
  }
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (bindArgs == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty bindArgs");
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [self lock];
  if (![self isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"database not open");
  }
  NetSqlcipherDatabaseSQLiteStatement *statement = nil;
  @try {
    statement = [self compileStatementWithNSString:sql];
    if (bindArgs != nil) {
      jint numArgs = bindArgs->size_;
      for (jint i = 0; i < numArgs; i++) {
        NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(statement, i + 1, IOSObjectArray_Get(bindArgs, i));
      }
    }
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(statement)) execute];
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    [self onCorruption];
    @throw e;
  }
  @finally {
    if (statement != nil) {
      [statement close];
    }
    [self unlock];
  }
}

- (void)java_finalize {
  if ([self isOpen]) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$$", @"close() was never explicitly called on database '", mPath_, @"' "), mStackTrace_);
    NetSqlcipherDatabaseSQLiteDatabase_closeClosable(self);
    [self onAllReferencesReleased];
  }
}

- (instancetype)initWithNSString:(NSString *)path
                   withCharArray:(IOSCharArray *)password
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)flags {
  NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(self, path, password, factory, flags);
  return self;
}

- (instancetype)initWithNSString:(NSString *)path
                   withCharArray:(IOSCharArray *)password
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)flags
withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook {
  NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(self, path, password, factory, flags, databaseHook);
  return self;
}

- (instancetype)initWithNSString:(NSString *)path
withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)flags
withNetSqlcipherDatabaseErrorHandler:(id<NetSqlcipherDatabaseErrorHandler>)errorHandler {
  NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(self, path, factory, flags, errorHandler);
  return self;
}

- (void)openDatabaseInternalWithCharArray:(IOSCharArray *)password
withNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)hook {
  NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(self, password, hook);
}

- (jboolean)containsNullWithCharArray:(IOSCharArray *)data {
  return NetSqlcipherDatabaseSQLiteDatabase_containsNullWithCharArray_(self, data);
}

- (void)keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook:(id<NetSqlcipherDatabaseSQLiteDatabaseHook>)databaseHook
                                         withJavaLangRunnable:(id<JavaLangRunnable>)keyOperation {
  NetSqlcipherDatabaseSQLiteDatabase_keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook_withJavaLangRunnable_(self, databaseHook, keyOperation);
}

- (NSString *)getTime {
  return NetSqlcipherDatabaseSQLiteDatabase_getTime(self);
}

- (jboolean)isReadOnly {
  return (mFlags_ & NetSqlcipherDatabaseSQLiteDatabase_OPEN_READ_MASK) == NetSqlcipherDatabaseSQLiteDatabase_OPEN_READONLY;
}

- (jboolean)isOpen {
  return mNativeHandle_ != 0;
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return newVersion > [self getVersion];
}

- (NSString *)getPath {
  return NetSqlcipherDatabaseSQLiteDatabase_getPath(self);
}

- (NSString *)getPathForLogs {
  if (mPathForLogs_ != nil) {
    return mPathForLogs_;
  }
  if (mPath_ == nil) {
    return nil;
  }
  if ([mPath_ java_indexOf:'@'] == -1) {
    JreStrongAssign(&mPathForLogs_, mPath_);
  }
  else {
    JreStrongAssign(&mPathForLogs_, [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(NetSqlcipherDatabaseSQLiteDatabase_EMAIL_IN_DB_PATTERN)) matcherWithJavaLangCharSequence:mPath_])) replaceAllWithNSString:@"XX@YY"]);
  }
  return mPathForLogs_;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  [self lock];
  @try {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Ugh");
  }
  @finally {
    [self unlock];
  }
}

- (void)addToCompiledQueriesWithNSString:(NSString *)sql
withNetSqlcipherDatabaseSQLiteCompiledSql:(NetSqlcipherDatabaseSQLiteCompiledSql *)compiledStatement {
  if (mMaxSqlCacheSize_ == 0) {
    if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
      AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$C$", @"|NOT adding_sql_to_cache|", NetSqlcipherDatabaseSQLiteDatabase_getPath(self), '|', sql));
    }
    return;
  }
  NetSqlcipherDatabaseSQLiteCompiledSql *compiledSql = nil;
  @synchronized(mCompiledQueries_) {
    compiledSql = [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) getWithId:sql];
    if (compiledSql != nil) {
      return;
    }
    if ([((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) size] == mMaxSqlCacheSize_) {
      if (++mCacheFullWarnings_ == NetSqlcipherDatabaseSQLiteDatabase_MAX_WARNINGS_ON_CACHESIZE_CONDITION) {
        AndroidUtilLog_wWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$$$$", @"Reached MAX size for compiled-sql statement cache for database ", NetSqlcipherDatabaseSQLiteDatabase_getPath(self), @"; i.e., NO space for this sql statement in cache: ", sql, @". Please change your sql statements to use '?' for bindargs, instead of using actual values"));
      }
    }
    else {
      [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) putWithId:sql withId:compiledStatement];
      if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
        AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$CIC$", @"|adding_sql_to_cache|", NetSqlcipherDatabaseSQLiteDatabase_getPath(self), '|', [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) size], '|', sql));
      }
    }
  }
  return;
}

- (void)deallocCachedSqlStatements {
  NetSqlcipherDatabaseSQLiteDatabase_deallocCachedSqlStatements(self);
}

- (NetSqlcipherDatabaseSQLiteCompiledSql *)getCompiledStatementForSqlWithNSString:(NSString *)sql {
  NetSqlcipherDatabaseSQLiteCompiledSql *compiledStatement = nil;
  jboolean cacheHit;
  @synchronized(mCompiledQueries_) {
    if (mMaxSqlCacheSize_ == 0) {
      if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
        AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"|cache NOT found|", NetSqlcipherDatabaseSQLiteDatabase_getPath(self)));
      }
      return nil;
    }
    cacheHit = ((compiledStatement = [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) getWithId:sql]) != nil);
  }
  if (cacheHit) {
    mNumCacheHits_++;
  }
  else {
    mNumCacheMisses_++;
  }
  if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
    AndroidUtilLog_vWithNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$CICICICZC$C$C$", @"|cache_stats|", NetSqlcipherDatabaseSQLiteDatabase_getPath(self), '|', [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) size], '|', mNumCacheHits_, '|', mNumCacheMisses_, '|', cacheHit, '|', mTimeOpened_, '|', mTimeClosed_, '|', sql));
  }
  return compiledStatement;
}

- (jboolean)isInCompiledSqlCacheWithNSString:(NSString *)sql {
  @synchronized(mCompiledQueries_) {
    return [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) containsKeyWithId:sql];
  }
}

- (void)purgeFromCompiledSqlCacheWithNSString:(NSString *)sql {
  @synchronized(mCompiledQueries_) {
    [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) removeWithId:sql];
  }
}

- (void)resetCompiledSqlCache {
  @synchronized(mCompiledQueries_) {
    [((id<JavaUtilMap>) nil_chk(mCompiledQueries_)) clear];
  }
}

- (jint)getMaxSqlCacheSize {
  @synchronized(self) {
    return mMaxSqlCacheSize_;
  }
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  @synchronized(self) {
    if (cacheSize > NetSqlcipherDatabaseSQLiteDatabase_MAX_SQL_CACHE_SIZE || cacheSize < 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"expected value between 0 and ", NetSqlcipherDatabaseSQLiteDatabase_MAX_SQL_CACHE_SIZE));
    }
    else if (cacheSize < mMaxSqlCacheSize_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot set cacheSize to a value less than the value set with previous setMaxSqlCacheSize() call.");
    }
    mMaxSqlCacheSize_ = cacheSize;
  }
}

+ (JavaUtilArrayList *)getDbStats {
  return NetSqlcipherDatabaseSQLiteDatabase_getDbStats();
}

+ (JavaUtilArrayList *)getActiveDatabases {
  return NetSqlcipherDatabaseSQLiteDatabase_getActiveDatabases();
}

+ (jlong)getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                               withNSString:(NSString *)pragma {
  return NetSqlcipherDatabaseSQLiteDatabase_getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(db, pragma);
}

+ (JavaUtilArrayList *)getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)dbObj {
  return NetSqlcipherDatabaseSQLiteDatabase_getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase_(dbObj);
}

- (IOSByteArray *)getBytesWithCharArray:(IOSCharArray *)data {
  return NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(self, data);
}

- (void)dbopenWithNSString:(NSString *)path
                   withInt:(jint)flags {
  NetSqlcipherDatabaseSQLiteDatabase_dbopenWithNSString_withInt_(self, path, flags);
}

- (void)enableSqlTracingWithNSString:(NSString *)path {
  NetSqlcipherDatabaseSQLiteDatabase_enableSqlTracingWithNSString_(self, path);
}

- (void)enableSqlProfilingWithNSString:(NSString *)path {
  NetSqlcipherDatabaseSQLiteDatabase_enableSqlProfilingWithNSString_(self, path);
}

- (void)native_execSQLWithNSString:(NSString *)sql {
  NetSqlcipherDatabaseSQLiteDatabase_native_execSQLWithNSString_(self, sql);
}

- (jlong)lastInsertRow {
  return NetSqlcipherDatabaseSQLiteDatabase_lastInsertRow(self);
}

- (jint)lastChangeCount {
  return NetSqlcipherDatabaseSQLiteDatabase_lastChangeCount(self);
}

- (jint)native_getDbLookaside {
  return NetSqlcipherDatabaseSQLiteDatabase_native_getDbLookaside(self);
}

- (void)native_rawExecSQLWithNSString:(NSString *)sql {
  NetSqlcipherDatabaseSQLiteDatabase_native_rawExecSQLWithNSString_(self, sql);
}

- (jint)native_statusWithInt:(jint)operation
                 withBoolean:(jboolean)reset {
  return NetSqlcipherDatabaseSQLiteDatabase_native_statusWithInt_withBoolean_(self, operation, reset);
}

- (void)native_keyWithCharArray:(IOSCharArray *)key {
  NetSqlcipherDatabaseSQLiteDatabase_native_keyWithCharArray_(self, key);
}

- (void)native_rekeyWithNSString:(NSString *)key {
  NetSqlcipherDatabaseSQLiteDatabase_native_rekeyWithNSString_(self, key);
}

- (void)keyWithByteArray:(IOSByteArray *)key {
  NetSqlcipherDatabaseSQLiteDatabase_keyWithByteArray_(self, key);
}

- (void)key_mutf8WithCharArray:(IOSCharArray *)key {
  NetSqlcipherDatabaseSQLiteDatabase_key_mutf8WithCharArray_(self, key);
}

- (void)rekeyWithByteArray:(IOSByteArray *)key {
  NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(self, key);
}

+ (void)nativeInit {
  NetSqlcipherDatabaseSQLiteDatabase_nativeInit();
}

- (void)dealloc {
  JreCheckFinalize(self, [NetSqlcipherDatabaseSQLiteDatabase class]);
  RELEASE_(mTransactionListener_);
  RELEASE_(mLock_SQLiteDatabase_);
  RELEASE_(mLastSqlStatement_);
  RELEASE_(mPath_);
  RELEASE_(mPathForLogs_);
  RELEASE_(mFactory_);
  RELEASE_(mPrograms_);
  RELEASE_(mCompiledQueries_);
  RELEASE_(mErrorHandler_);
  RELEASE_(mTimeOpened_);
  RELEASE_(mTimeClosed_);
  RELEASE_(mStackTrace_);
  RELEASE_(mSyncUpdateInfo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x29, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 6, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 23, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 26, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 27, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 28, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 29, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 24, 30, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 33, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 34, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 35, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 36, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 37, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 38, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 39, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 31, 40, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteDatabase;", 0x9, 41, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 46, 20, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 54, 3, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteStatement;", 0x1, 55, 3, 56, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 57, 61, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 57, 62, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 63, 65, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherCursor;", 0x1, 63, 68, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 69, 70, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 71, 70, 56, -1, -1, -1 },
    { NULL, "J", 0x1, 72, 70, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 73, 70, 56, -1, -1, -1 },
    { NULL, "J", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 76, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 80, 81, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 3, 56, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 65, 56, -1, -1, -1 },
    { NULL, "V", 0x4, 84, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 26, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 28, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 87, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 88, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 90, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 91, 45, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 94, 95, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteCompiledSql;", 0x0, 96, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 97, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 99, 45, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x8, -1, -1, -1, 100, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, -1, -1, -1, 101, -1, -1 },
    { NULL, "J", 0xa, 102, 103, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, 104, 105, -1, 106, -1, -1 },
    { NULL, "[B", 0x2, 107, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 108, 109, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 110, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 111, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x100, 112, 3, 56, -1, -1, -1 },
    { NULL, "J", 0x100, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x100, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 113, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 114, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 115, 5, 56, -1, -1, -1 },
    { NULL, "V", 0x102, 116, 3, 56, -1, -1, -1 },
    { NULL, "V", 0x102, 117, 118, 56, -1, -1, -1 },
    { NULL, "V", 0x102, 119, 5, 56, -1, -1, -1 },
    { NULL, "V", 0x102, 120, 118, 56, -1, -1, -1 },
    { NULL, "V", 0x109, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(statusWithInt:withBoolean:);
  methods[1].selector = @selector(changePasswordWithNSString:);
  methods[2].selector = @selector(changePasswordWithCharArray:);
  methods[3].selector = @selector(loadLibsWithAndroidContentContext:);
  methods[4].selector = @selector(loadLibsWithAndroidContentContext:withJavaIoFile:);
  methods[5].selector = @selector(loadLibsWithAndroidContentContext:withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader:);
  methods[6].selector = @selector(loadLibsWithAndroidContentContext:withJavaIoFile:withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader:);
  methods[7].selector = @selector(addSQLiteClosableWithNetSqlcipherDatabaseSQLiteClosable:);
  methods[8].selector = @selector(removeSQLiteClosableWithNetSqlcipherDatabaseSQLiteClosable:);
  methods[9].selector = @selector(onAllReferencesReleased);
  methods[10].selector = @selector(releaseMemory);
  methods[11].selector = @selector(setLockingEnabledWithBoolean:);
  methods[12].selector = @selector(onCorruption);
  methods[13].selector = @selector(lock);
  methods[14].selector = @selector(lockForced);
  methods[15].selector = @selector(unlock);
  methods[16].selector = @selector(unlockForced);
  methods[17].selector = @selector(beginTransaction);
  methods[18].selector = @selector(beginTransactionWithListenerWithNetSqlcipherDatabaseSQLiteTransactionListener:);
  methods[19].selector = @selector(endTransaction);
  methods[20].selector = @selector(setTransactionSuccessful);
  methods[21].selector = @selector(inTransaction);
  methods[22].selector = @selector(isDbLockedByCurrentThread);
  methods[23].selector = @selector(isDbLockedByOtherThreads);
  methods[24].selector = @selector(yieldIfContended);
  methods[25].selector = @selector(yieldIfContendedSafely);
  methods[26].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[27].selector = @selector(yieldIfContendedHelperWithBoolean:withLong:);
  methods[28].selector = @selector(getSyncedTables);
  methods[29].selector = @selector(openDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:);
  methods[30].selector = @selector(openDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:);
  methods[31].selector = @selector(openDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[32].selector = @selector(openDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[33].selector = @selector(openDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[34].selector = @selector(openDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[35].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[36].selector = @selector(openOrCreateDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[37].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[38].selector = @selector(openOrCreateDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[39].selector = @selector(openOrCreateDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[40].selector = @selector(openOrCreateDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNetSqlcipherDatabaseSQLiteDatabaseHook:withNetSqlcipherDatabaseErrorHandler:);
  methods[41].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:);
  methods[42].selector = @selector(openOrCreateDatabaseWithNSString:withNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:);
  methods[43].selector = @selector(openOrCreateDatabaseWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:);
  methods[44].selector = @selector(createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNSString:);
  methods[45].selector = @selector(createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withCharArray:);
  methods[46].selector = @selector(close);
  methods[47].selector = @selector(closeClosable);
  methods[48].selector = @selector(dbclose);
  methods[49].selector = @selector(getVersion);
  methods[50].selector = @selector(setVersionWithInt:);
  methods[51].selector = @selector(getMaximumSize);
  methods[52].selector = @selector(setMaximumSizeWithLong:);
  methods[53].selector = @selector(getPageSize);
  methods[54].selector = @selector(setPageSizeWithLong:);
  methods[55].selector = @selector(markTableSyncableWithNSString:withNSString:);
  methods[56].selector = @selector(markTableSyncableWithNSString:withNSString:withNSString:);
  methods[57].selector = @selector(markTableSyncableWithNSString:withNSString:withNSString:withNSString:);
  methods[58].selector = @selector(rowUpdatedWithNSString:withLong:);
  methods[59].selector = @selector(findEditTableWithNSString:);
  methods[60].selector = @selector(compileStatementWithNSString:);
  methods[61].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[62].selector = @selector(queryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[63].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[64].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[65].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[66].selector = @selector(rawQueryWithNSString:withNSObjectArray:);
  methods[67].selector = @selector(rawQueryWithFactoryWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:);
  methods[68].selector = @selector(rawQueryWithNSString:withNSStringArray:withInt:withInt:);
  methods[69].selector = @selector(insertWithNSString:withNSString:withAndroidContentContentValues:);
  methods[70].selector = @selector(insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[71].selector = @selector(replaceWithNSString:withNSString:withAndroidContentContentValues:);
  methods[72].selector = @selector(replaceOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[73].selector = @selector(insertWithOnConflictWithNSString:withNSString:withAndroidContentContentValues:withInt:);
  methods[74].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[75].selector = @selector(updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:);
  methods[76].selector = @selector(updateWithOnConflictWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:withInt:);
  methods[77].selector = @selector(execSQLWithNSString:);
  methods[78].selector = @selector(rawExecSQLWithNSString:);
  methods[79].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[80].selector = @selector(java_finalize);
  methods[81].selector = @selector(initWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:);
  methods[82].selector = @selector(initWithNSString:withCharArray:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[83].selector = @selector(initWithNSString:withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory:withInt:withNetSqlcipherDatabaseErrorHandler:);
  methods[84].selector = @selector(openDatabaseInternalWithCharArray:withNetSqlcipherDatabaseSQLiteDatabaseHook:);
  methods[85].selector = @selector(containsNullWithCharArray:);
  methods[86].selector = @selector(keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook:withJavaLangRunnable:);
  methods[87].selector = @selector(getTime);
  methods[88].selector = @selector(isReadOnly);
  methods[89].selector = @selector(isOpen);
  methods[90].selector = @selector(needUpgradeWithInt:);
  methods[91].selector = @selector(getPath);
  methods[92].selector = @selector(getPathForLogs);
  methods[93].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[94].selector = @selector(addToCompiledQueriesWithNSString:withNetSqlcipherDatabaseSQLiteCompiledSql:);
  methods[95].selector = @selector(deallocCachedSqlStatements);
  methods[96].selector = @selector(getCompiledStatementForSqlWithNSString:);
  methods[97].selector = @selector(isInCompiledSqlCacheWithNSString:);
  methods[98].selector = @selector(purgeFromCompiledSqlCacheWithNSString:);
  methods[99].selector = @selector(resetCompiledSqlCache);
  methods[100].selector = @selector(getMaxSqlCacheSize);
  methods[101].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[102].selector = @selector(getDbStats);
  methods[103].selector = @selector(getActiveDatabases);
  methods[104].selector = @selector(getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:);
  methods[105].selector = @selector(getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase:);
  methods[106].selector = @selector(getBytesWithCharArray:);
  methods[107].selector = @selector(dbopenWithNSString:withInt:);
  methods[108].selector = @selector(enableSqlTracingWithNSString:);
  methods[109].selector = @selector(enableSqlProfilingWithNSString:);
  methods[110].selector = @selector(native_execSQLWithNSString:);
  methods[111].selector = @selector(lastInsertRow);
  methods[112].selector = @selector(lastChangeCount);
  methods[113].selector = @selector(native_getDbLookaside);
  methods[114].selector = @selector(native_rawExecSQLWithNSString:);
  methods[115].selector = @selector(native_statusWithInt:withBoolean:);
  methods[116].selector = @selector(native_keyWithCharArray:);
  methods[117].selector = @selector(native_rekeyWithNSString:);
  methods[118].selector = @selector(keyWithByteArray:);
  methods[119].selector = @selector(key_mutf8WithCharArray:);
  methods[120].selector = @selector(rekeyWithByteArray:);
  methods[121].selector = @selector(nativeInit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 121, -1, -1 },
    { "EVENT_DB_OPERATION", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_EVENT_DB_OPERATION, 0x1a, -1, -1, -1, -1 },
    { "EVENT_DB_CORRUPT", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_EVENT_DB_CORRUPT, 0x1a, -1, -1, -1, -1 },
    { "KEY_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 122, -1, -1 },
    { "SQLCIPHER_ANDROID_VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 123, -1, -1 },
    { "sActiveDatabases", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0xa, -1, 124, 125, -1 },
    { "CONFLICT_ROLLBACK", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_ROLLBACK, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_ABORT", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_ABORT, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_FAIL", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_FAIL, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_IGNORE", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_IGNORE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_REPLACE", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_REPLACE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_NONE", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_NONE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_VALUES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 126, -1, -1 },
    { "SQLITE_MAX_LIKE_PATTERN_LENGTH", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH, 0x19, -1, -1, -1, -1 },
    { "OPEN_READWRITE", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_OPEN_READWRITE, 0x19, -1, -1, -1, -1 },
    { "OPEN_READONLY", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_OPEN_READONLY, 0x19, -1, -1, -1, -1 },
    { "OPEN_READ_MASK", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_OPEN_READ_MASK, 0x1a, -1, -1, -1, -1 },
    { "NO_LOCALIZED_COLLATORS", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_NO_LOCALIZED_COLLATORS, 0x19, -1, -1, -1, -1 },
    { "CREATE_IF_NECESSARY", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, 0x19, -1, -1, -1, -1 },
    { "MEMORY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 127, -1, -1 },
    { "mInnerTransactionIsSuccessful_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransactionIsSuccessful_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransactionListener_", "LNetSqlcipherDatabaseSQLiteTransactionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLock_SQLiteDatabase_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, 128, -1, -1, -1 },
    { "mLockAcquiredWallTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLockAcquiredThreadTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCK_WARNING_WINDOW_IN_MS", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_LOCK_WARNING_WINDOW_IN_MS, 0x1a, -1, -1, -1, -1 },
    { "LOCK_ACQUIRED_WARNING_TIME_IN_MS", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_TIME_IN_MS, 0x1a, -1, -1, -1, -1 },
    { "LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS, 0x1a, -1, -1, -1, -1 },
    { "LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT, 0x1a, -1, -1, -1, -1 },
    { "SLEEP_AFTER_YIELD_QUANTUM", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_SLEEP_AFTER_YIELD_QUANTUM, 0x1a, -1, -1, -1, -1 },
    { "EMAIL_IN_DB_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 129, -1, -1 },
    { "mLastLockMessageTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sQueryLogTimeInMillis", "I", .constantValue.asLong = 0, 0xa, -1, 130, -1, -1 },
    { "QUERY_LOG_SQL_LENGTH", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_QUERY_LOG_SQL_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "COMMIT_SQL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 131, -1, -1 },
    { "mLastSqlStatement_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "GET_LOCK_LOG_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 132, -1, -1 },
    { "mNativeHandle_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempTableSequence_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPathForLogs_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFactory_", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPrograms_", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 133, -1 },
    { "mCompiledQueries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 134, -1 },
    { "MAX_SQL_CACHE_SIZE", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_MAX_SQL_CACHE_SIZE, 0x19, -1, -1, -1, -1 },
    { "mMaxSqlCacheSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCacheFullWarnings_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_WARNINGS_ON_CACHESIZE_CONDITION", "I", .constantValue.asInt = NetSqlcipherDatabaseSQLiteDatabase_MAX_WARNINGS_ON_CACHESIZE_CONDITION, 0x1a, -1, -1, -1, -1 },
    { "mErrorHandler_", "LNetSqlcipherDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNumCacheHits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNumCacheMisses_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeOpened_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeClosed_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStackTrace_", "LNSException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOG_SLOW_QUERIES_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 135, -1, -1 },
    { "mSlowQueryThreshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLockingEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSyncUpdateInfo_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 136, -1 },
  };
  static const void *ptrTable[] = { "status", "IZ", "changePassword", "LNSString;", "LNetSqlcipherDatabaseSQLiteException;", "[C", "loadLibs", "LAndroidContentContext;", "LAndroidContentContext;LJavaIoFile;", "LAndroidContentContext;LNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader;", "LAndroidContentContext;LJavaIoFile;LNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader;", "addSQLiteClosable", "LNetSqlcipherDatabaseSQLiteClosable;", "removeSQLiteClosable", "setLockingEnabled", "Z", "beginTransactionWithListener", "LNetSqlcipherDatabaseSQLiteTransactionListener;", (void *)&NetSqlcipherDatabaseSQLiteDatabase__Annotations$0, "yieldIfContendedSafely", "J", "yieldIfContendedHelper", "ZJ", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "openDatabase", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;I", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;I", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "openOrCreateDatabase", "LJavaIoFile;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;", "LJavaIoFile;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNetSqlcipherDatabaseSQLiteDatabaseHook;LNetSqlcipherDatabaseErrorHandler;", "LJavaIoFile;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;", "LNSString;LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;", "LNSString;[CLNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;", "create", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNSString;", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;[C", "setVersion", "I", "setMaximumSize", "setPageSize", "markTableSyncable", "LNSString;LNSString;", "LNSString;LNSString;LNSString;", "LNSString;LNSString;LNSString;LNSString;", "rowUpdated", "LNSString;J", "findEditTable", "compileStatement", "LNetSqlcipherSQLException;", "query", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "queryWithFactory", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "rawQuery", "LNSString;[LNSString;", "LNSString;[LNSObject;", "rawQueryWithFactory", "LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;", "LNSString;[LNSString;II", "insert", "LNSString;LNSString;LAndroidContentContentValues;", "insertOrThrow", "replace", "replaceOrThrow", "insertWithOnConflict", "LNSString;LNSString;LAndroidContentContentValues;I", "delete", "LNSString;LNSString;[LNSString;", "update", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;", "updateWithOnConflict", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;I", "execSQL", "rawExecSQL", "finalize", "LNSString;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;ILNetSqlcipherDatabaseErrorHandler;", "openDatabaseInternal", "[CLNetSqlcipherDatabaseSQLiteDatabaseHook;", "containsNull", "keyDatabase", "LNetSqlcipherDatabaseSQLiteDatabaseHook;LJavaLangRunnable;", "needUpgrade", "setLocale", "LJavaUtilLocale;", "addToCompiledQueries", "LNSString;LNetSqlcipherDatabaseSQLiteCompiledSql;", "getCompiledStatementForSql", "isInCompiledSqlCache", "purgeFromCompiledSqlCache", "setMaxSqlCacheSize", "()Ljava/util/ArrayList<Lnet/sqlcipher/database/SQLiteDebug$DbStats;>;", "()Ljava/util/ArrayList<Lnet/sqlcipher/database/SQLiteDatabase;>;", "getPragmaVal", "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;", "getAttachedDbs", "LNetSqlcipherDatabaseSQLiteDatabase;", "(Lnet/sqlcipher/database/SQLiteDatabase;)Ljava/util/ArrayList<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "getBytes", "dbopen", "LNSString;I", "enableSqlTracing", "enableSqlProfiling", "native_execSQL", "native_rawExecSQL", "native_status", "native_key", "native_rekey", "key", "[B", "key_mutf8", "rekey", &NetSqlcipherDatabaseSQLiteDatabase_TAG, &NetSqlcipherDatabaseSQLiteDatabase_KEY_ENCODING, &NetSqlcipherDatabaseSQLiteDatabase_SQLCIPHER_ANDROID_VERSION, &NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases, "Ljava/util/WeakHashMap<Lnet/sqlcipher/database/SQLiteDatabase;Ljava/lang/Object;>;", &NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_VALUES, &NetSqlcipherDatabaseSQLiteDatabase_MEMORY, "mLock", &NetSqlcipherDatabaseSQLiteDatabase_EMAIL_IN_DB_PATTERN, &NetSqlcipherDatabaseSQLiteDatabase_sQueryLogTimeInMillis, &NetSqlcipherDatabaseSQLiteDatabase_COMMIT_SQL, &NetSqlcipherDatabaseSQLiteDatabase_GET_LOCK_LOG_PREFIX, "Ljava/util/WeakHashMap<Lnet/sqlcipher/database/SQLiteClosable;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lnet/sqlcipher/database/SQLiteCompiledSql;>;", &NetSqlcipherDatabaseSQLiteDatabase_LOG_SLOW_QUERIES_PROPERTY, "Ljava/util/Map<Ljava/lang/String;Lnet/sqlcipher/database/SQLiteDatabase$SyncUpdateInfo;>;", "LNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader;LNetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo;LNetSqlcipherDatabaseSQLiteDatabase_CursorFactory;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase = { "SQLiteDatabase", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x1, 122, 60, -1, 137, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase;
}

+ (void)initialize {
  if (self == [NetSqlcipherDatabaseSQLiteDatabase class]) {
    JreStrongAssignAndConsume(&NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases, new_JavaUtilWeakHashMap_init());
    JreStrongAssignAndConsume(&NetSqlcipherDatabaseSQLiteDatabase_CONFLICT_VALUES, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()]);
    JreStrongAssign(&NetSqlcipherDatabaseSQLiteDatabase_EMAIL_IN_DB_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\w\\.\\-]+@[\\w\\.\\-]+"));
    J2OBJC_SET_INITIALIZED(NetSqlcipherDatabaseSQLiteDatabase)
  }
}

@end

void NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_(AndroidContentContext *context) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_class_()) {
    NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_(context, [((AndroidContentContext *) nil_chk(context)) getFilesDir]);
  }
}

void NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_(AndroidContentContext *context, JavaIoFile *workingDir) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_class_()) {
    NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(context, workingDir, create_NetSqlcipherDatabaseSQLiteDatabase_1_init());
  }
}

void NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(AndroidContentContext *context, id<NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader> libraryLoader) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_class_()) {
    NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(context, [((AndroidContentContext *) nil_chk(context)) getFilesDir], libraryLoader);
  }
}

void NetSqlcipherDatabaseSQLiteDatabase_loadLibsWithAndroidContentContext_withJavaIoFile_withNetSqlcipherDatabaseSQLiteDatabase_LibraryLoader_(AndroidContentContext *context, JavaIoFile *workingDir, id<NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader> libraryLoader) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_class_()) {
    [((id<NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader>) nil_chk(libraryLoader)) loadLibrariesWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"sqlcipher" } count:1 type:NSString_class_()]];
  }
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteDatabase_releaseMemory(JNIEnv *_env_, jclass _cls_);

jint NetSqlcipherDatabaseSQLiteDatabase_releaseMemory() {
  return Java_net_sqlcipher_database_SQLiteDatabase_releaseMemory(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDatabase_class_());
}

void NetSqlcipherDatabaseSQLiteDatabase_lockForced(NetSqlcipherDatabaseSQLiteDatabase *self) {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(self->mLock_SQLiteDatabase_)) lock];
}

void NetSqlcipherDatabaseSQLiteDatabase_unlockForced(NetSqlcipherDatabaseSQLiteDatabase *self) {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(self->mLock_SQLiteDatabase_)) unlock];
}

jboolean NetSqlcipherDatabaseSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(NetSqlcipherDatabaseSQLiteDatabase *self, jboolean checkFullyYielded, jlong sleepAfterYieldDelay) {
  if ([((JavaUtilConcurrentLocksReentrantLock *) nil_chk(self->mLock_SQLiteDatabase_)) getQueueLength] == 0) {
    self->mLockAcquiredWallTime_ = AndroidOsSystemClock_elapsedRealtime();
    self->mLockAcquiredThreadTime_ = 0l;
    return false;
  }
  [self setTransactionSuccessful];
  id<NetSqlcipherDatabaseSQLiteTransactionListener> transactionListener = self->mTransactionListener_;
  [self endTransaction];
  if (checkFullyYielded) {
    if ([self isDbLockedByCurrentThread]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Db locked more than once. yielfIfContended cannot yield");
    }
  }
  if (sleepAfterYieldDelay > 0) {
    jlong remainingDelay = sleepAfterYieldDelay;
    while (remainingDelay > 0) {
      @try {
        JavaLangThread_sleepWithLong_(remainingDelay < NetSqlcipherDatabaseSQLiteDatabase_SLEEP_AFTER_YIELD_QUANTUM ? remainingDelay : NetSqlcipherDatabaseSQLiteDatabase_SLEEP_AFTER_YIELD_QUANTUM);
      }
      @catch (JavaLangInterruptedException *e) {
        JavaLangThread_interrupted();
      }
      remainingDelay -= NetSqlcipherDatabaseSQLiteDatabase_SLEEP_AFTER_YIELD_QUANTUM;
      if ([self->mLock_SQLiteDatabase_ getQueueLength] == 0) {
        break;
      }
    }
  }
  [self beginTransactionWithListenerWithNetSqlcipherDatabaseSQLiteTransactionListener:transactionListener];
  return true;
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, flags, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, flags, nil, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, flags, hook, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, flags, hook, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password == nil ? nil : [password java_toCharArray], factory, flags, hook, errorHandler);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  NetSqlcipherDatabaseSQLiteDatabase *sqliteDatabase = nil;
  id<NetSqlcipherDatabaseErrorHandler> myErrorHandler = (errorHandler != nil) ? errorHandler : create_NetSqlcipherDefaultDatabaseErrorHandler_init();
  @try {
    sqliteDatabase = create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(path, factory, flags, myErrorHandler);
    NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(sqliteDatabase, password, hook);
  }
  @catch (NetSqlcipherDatabaseSQLiteDatabaseCorruptException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, JreStrcat("$$", @"Calling error handler for corrupt database ", path), e);
    [myErrorHandler onCorruptionWithNetSqlcipherDatabaseSQLiteDatabase:sqliteDatabase];
    sqliteDatabase = create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(path, factory, flags, myErrorHandler);
    NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(sqliteDatabase, password, hook);
  }
  if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_STATEMENTS)) {
    NetSqlcipherDatabaseSQLiteDatabase_enableSqlTracingWithNSString_(nil_chk(sqliteDatabase), path);
  }
  if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_TIME)) {
    NetSqlcipherDatabaseSQLiteDatabase_enableSqlProfilingWithNSString_(nil_chk(sqliteDatabase), path);
  }
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases) {
    [((JavaUtilWeakHashMap *) nil_chk(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases)) putWithId:sqliteDatabase withId:nil];
  }
  return sqliteDatabase;
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(JavaIoFile *file, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(file, password, factory, databaseHook, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, databaseHook);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(JavaIoFile *file, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(file == nil ? nil : [file getPath], password, factory, databaseHook, errorHandler);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password == nil ? nil : [password java_toCharArray], factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, databaseHook, errorHandler);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, databaseHook);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_withNetSqlcipherDatabaseErrorHandler_(path, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, databaseHook, errorHandler);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(JavaIoFile *file, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNetSqlcipherDatabaseSQLiteDatabaseHook_(file, password, factory, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(NSString *path, NSString *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_openOrCreateDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(path, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withNSString_(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, NSString *password) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NetSqlcipherDatabaseSQLiteDatabase_MEMORY, password == nil ? nil : [password java_toCharArray], factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY);
}

NetSqlcipherDatabaseSQLiteDatabase *NetSqlcipherDatabaseSQLiteDatabase_createWithNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withCharArray_(id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, IOSCharArray *password) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  return NetSqlcipherDatabaseSQLiteDatabase_openDatabaseWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NetSqlcipherDatabaseSQLiteDatabase_MEMORY, password, factory, NetSqlcipherDatabaseSQLiteDatabase_CREATE_IF_NECESSARY);
}

void NetSqlcipherDatabaseSQLiteDatabase_closeClosable(NetSqlcipherDatabaseSQLiteDatabase *self) {
  NetSqlcipherDatabaseSQLiteDatabase_deallocCachedSqlStatements(self);
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((JavaUtilWeakHashMap *) nil_chk(self->mPrograms_)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id<JavaUtilMap_Entry> entry_ = [iter next];
    NetSqlcipherDatabaseSQLiteClosable *program = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if (program != nil) {
      [program onAllReferencesReleasedFromContainer];
    }
  }
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_dbclose(JNIEnv *_env_, jobject self);

void NetSqlcipherDatabaseSQLiteDatabase_dbclose(NetSqlcipherDatabaseSQLiteDatabase *self) {
  Java_net_sqlcipher_database_SQLiteDatabase_dbclose(&J2ObjC_JNIEnv, self);
}

void NetSqlcipherDatabaseSQLiteDatabase_markTableSyncableWithNSString_withNSString_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *table, NSString *foreignKey, NSString *updateTable, NSString *deletedTable) {
  [self lock];
  @try {
    [self native_execSQLWithNSString:JreStrcat("$$$", @"SELECT _sync_dirty FROM ", updateTable, @" LIMIT 0")];
    [self native_execSQLWithNSString:JreStrcat("$$$$$", @"SELECT ", foreignKey, @" FROM ", table, @" LIMIT 0")];
  }
  @finally {
    [self unlock];
  }
  NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *info = create_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(updateTable, deletedTable, foreignKey);
  @synchronized(self->mSyncUpdateInfo_) {
    [((id<JavaUtilMap>) nil_chk(self->mSyncUpdateInfo_)) putWithId:table withId:info];
  }
}

NSString *NetSqlcipherDatabaseSQLiteDatabase_findEditTableWithNSString_(NSString *tables) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(tables)) {
    jint spacepos = [((NSString *) nil_chk(tables)) java_indexOf:' '];
    jint commapos = [tables java_indexOf:','];
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return [tables java_substring:0 endIndex:spacepos];
    }
    else if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return [tables java_substring:0 endIndex:commapos];
    }
    return tables;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Invalid tables");
  }
}

void NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags) {
  NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(self, path, factory, flags, nil);
  NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(self, password, nil);
}

NetSqlcipherDatabaseSQLiteDatabase *new_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_, path, password, factory, flags)
}

NetSqlcipherDatabaseSQLiteDatabase *create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_, path, password, factory, flags)
}

void NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(self, path, factory, flags, nil);
  NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(self, password, databaseHook);
}

NetSqlcipherDatabaseSQLiteDatabase *new_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_, path, password, factory, flags, databaseHook)
}

NetSqlcipherDatabaseSQLiteDatabase *create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NSString *path, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withCharArray_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseSQLiteDatabaseHook_, path, password, factory, flags, databaseHook)
}

void NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  NetSqlcipherDatabaseSQLiteClosable_init(self);
  JreStrongAssignAndConsume(&self->mLock_SQLiteDatabase_, new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(true));
  self->mLockAcquiredWallTime_ = 0LL;
  self->mLockAcquiredThreadTime_ = 0LL;
  self->mLastLockMessageTime_ = 0LL;
  JreStrongAssign(&self->mLastSqlStatement_, nil);
  self->mNativeHandle_ = 0;
  self->mTempTableSequence_ = 0;
  JreStrongAssign(&self->mPathForLogs_, nil);
  JreStrongAssignAndConsume(&self->mCompiledQueries_, new_JavaUtilHashMap_init());
  self->mMaxSqlCacheSize_ = NetSqlcipherDatabaseSQLiteDatabase_MAX_SQL_CACHE_SIZE;
  JreStrongAssign(&self->mTimeOpened_, nil);
  JreStrongAssign(&self->mTimeClosed_, nil);
  JreStrongAssign(&self->mStackTrace_, nil);
  self->mLockingEnabled_ = true;
  JreStrongAssignAndConsume(&self->mSyncUpdateInfo_, new_JavaUtilHashMap_init());
  if (path == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"path should not be null");
  }
  self->mFlags_ = flags;
  JreStrongAssign(&self->mPath_, path);
  self->mSlowQueryThreshold_ = -1;
  JreStrongAssign(&self->mStackTrace_, [create_NetSqlcipherDatabaseDatabaseObjectNotClosedException_init() fillInStackTrace]);
  JreStrongAssign(&self->mFactory_, factory);
  JreStrongAssignAndConsume(&self->mPrograms_, new_JavaUtilWeakHashMap_init());
  JreStrongAssign(&self->mErrorHandler_, errorHandler);
}

NetSqlcipherDatabaseSQLiteDatabase *new_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_, path, factory, flags, errorHandler)
}

NetSqlcipherDatabaseSQLiteDatabase *create_NetSqlcipherDatabaseSQLiteDatabase_initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_(NSString *path, id<NetSqlcipherDatabaseSQLiteDatabase_CursorFactory> factory, jint flags, id<NetSqlcipherDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase, initWithNSString_withNetSqlcipherDatabaseSQLiteDatabase_CursorFactory_withInt_withNetSqlcipherDatabaseErrorHandler_, path, factory, flags, errorHandler)
}

void NetSqlcipherDatabaseSQLiteDatabase_openDatabaseInternalWithCharArray_withNetSqlcipherDatabaseSQLiteDatabaseHook_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *password, id<NetSqlcipherDatabaseSQLiteDatabaseHook> hook) {
  jboolean shouldCloseConnection = true;
  IOSByteArray *keyMaterial = NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(self, password);
  NetSqlcipherDatabaseSQLiteDatabase_dbopenWithNSString_withInt_(self, self->mPath_, self->mFlags_);
  @try {
    NetSqlcipherDatabaseSQLiteDatabase_keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook_withJavaLangRunnable_(self, hook, create_NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(self, keyMaterial));
    shouldCloseConnection = false;
  }
  @catch (JavaLangRuntimeException *ex) {
    if (NetSqlcipherDatabaseSQLiteDatabase_containsNullWithCharArray_(self, password)) {
      NetSqlcipherDatabaseSQLiteDatabase_keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook_withJavaLangRunnable_(self, hook, create_NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(self, password));
      if (keyMaterial != nil && keyMaterial->size_ > 0) {
        NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(self, keyMaterial);
      }
      shouldCloseConnection = false;
    }
    else {
      @throw ex;
    }
  }
  @finally {
    if (shouldCloseConnection) {
      NetSqlcipherDatabaseSQLiteDatabase_dbclose(self);
      if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
        JreStrongAssign(&self->mTimeClosed_, NetSqlcipherDatabaseSQLiteDatabase_getTime(self));
      }
    }
    if (keyMaterial != nil && keyMaterial->size_ > 0) {
      {
        IOSByteArray *a__ = keyMaterial;
        jbyte const *b__ = a__->buffer_;
        jbyte const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jbyte data = *b__++;
          data = 0;
        }
      }
    }
  }
}

jboolean NetSqlcipherDatabaseSQLiteDatabase_containsNullWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *data) {
  jchar defaultValue = 0x0000;
  jboolean status = false;
  if (data != nil && data->size_ > 0) {
    {
      IOSCharArray *a__ = data;
      jchar const *b__ = a__->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar datum = *b__++;
        if (datum == defaultValue) {
          status = true;
          break;
        }
      }
    }
  }
  return status;
}

void NetSqlcipherDatabaseSQLiteDatabase_keyDatabaseWithNetSqlcipherDatabaseSQLiteDatabaseHook_withJavaLangRunnable_(NetSqlcipherDatabaseSQLiteDatabase *self, id<NetSqlcipherDatabaseSQLiteDatabaseHook> databaseHook, id<JavaLangRunnable> keyOperation) {
  if (databaseHook != nil) {
    [databaseHook preKeyWithNetSqlcipherDatabaseSQLiteDatabase:self];
  }
  if (keyOperation != nil) {
    [keyOperation run];
  }
  if (databaseHook != nil) {
    [databaseHook postKeyWithNetSqlcipherDatabaseSQLiteDatabase:self];
  }
  if (JreLoadStatic(NetSqlcipherDatabaseSQLiteDebug, DEBUG_SQL_CACHE)) {
    JreStrongAssign(&self->mTimeOpened_, NetSqlcipherDatabaseSQLiteDatabase_getTime(self));
  }
  @try {
    id<NetSqlcipherCursor> cursor = [self rawQueryWithNSString:@"select count(*) from sqlite_master;" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSString_class_()]];
    if (cursor != nil) {
      [cursor moveToFirst];
      jint count = [cursor getIntWithInt:0];
      [cursor close];
    }
  }
  @catch (JavaLangRuntimeException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseSQLiteDatabase_TAG, [((JavaLangRuntimeException *) nil_chk(e)) getMessage], e);
    @throw e;
  }
}

NSString *NetSqlcipherDatabaseSQLiteDatabase_getTime(NetSqlcipherDatabaseSQLiteDatabase *self) {
  return [create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyy-MM-dd HH:mm:ss.SSS ", JreLoadStatic(JavaUtilLocale, US)) formatWithId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
}

NSString *NetSqlcipherDatabaseSQLiteDatabase_getPath(NetSqlcipherDatabaseSQLiteDatabase *self) {
  return self->mPath_;
}

void NetSqlcipherDatabaseSQLiteDatabase_deallocCachedSqlStatements(NetSqlcipherDatabaseSQLiteDatabase *self) {
  @synchronized(self->mCompiledQueries_) {
    for (NetSqlcipherDatabaseSQLiteCompiledSql * __strong compiledSql in nil_chk([((id<JavaUtilMap>) nil_chk(self->mCompiledQueries_)) values])) {
      [((NetSqlcipherDatabaseSQLiteCompiledSql *) nil_chk(compiledSql)) releaseSqlStatement];
    }
    [((id<JavaUtilMap>) nil_chk(self->mCompiledQueries_)) clear];
  }
}

JavaUtilArrayList *NetSqlcipherDatabaseSQLiteDatabase_getDbStats() {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  JavaUtilArrayList *dbStatsList = create_JavaUtilArrayList_init();
  for (NetSqlcipherDatabaseSQLiteDatabase * __strong db in nil_chk(NetSqlcipherDatabaseSQLiteDatabase_getActiveDatabases())) {
    if (db == nil || ![db isOpen]) {
      continue;
    }
    jint lookasideUsed = NetSqlcipherDatabaseSQLiteDatabase_native_getDbLookaside(db);
    NSString *path = NetSqlcipherDatabaseSQLiteDatabase_getPath(db);
    jint indx = [((NSString *) nil_chk(path)) java_lastIndexOfString:@"/"];
    NSString *lastnode = [path java_substring:(indx != -1) ? ++indx : 0];
    JavaUtilArrayList *attachedDbs = NetSqlcipherDatabaseSQLiteDatabase_getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase_(db);
    if (attachedDbs == nil) {
      continue;
    }
    for (jint i = 0; i < [attachedDbs size]; i++) {
      AndroidUtilPair *p = [attachedDbs getWithInt:i];
      jlong pageCount = NetSqlcipherDatabaseSQLiteDatabase_getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(db, JreStrcat("$$", ((AndroidUtilPair *) nil_chk(p))->first_, @".page_count;"));
      NSString *dbName;
      if (i == 0) {
        dbName = lastnode;
      }
      else {
        lookasideUsed = 0;
        dbName = JreStrcat("$$", @"  (attached) ", p->first_);
        if ([((NSString *) nil_chk([((NSString *) nil_chk(p->second_)) java_trim])) java_length] > 0) {
          jint idx = [((NSString *) p->second_) java_lastIndexOfString:@"/"];
          JreStrAppend(&dbName, "$$", @" : ", [((NSString *) p->second_) java_substring:(idx != -1) ? ++idx : 0]);
        }
      }
      if (pageCount > 0) {
        [dbStatsList addWithId:create_NetSqlcipherDatabaseSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_(dbName, pageCount, [db getPageSize], lookasideUsed)];
      }
    }
  }
  return dbStatsList;
}

JavaUtilArrayList *NetSqlcipherDatabaseSQLiteDatabase_getActiveDatabases() {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  JavaUtilArrayList *databases = create_JavaUtilArrayList_init();
  @synchronized(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases) {
    [databases addAllWithJavaUtilCollection:[((JavaUtilWeakHashMap *) nil_chk(NetSqlcipherDatabaseSQLiteDatabase_sActiveDatabases)) keySet]];
  }
  return databases;
}

jlong NetSqlcipherDatabaseSQLiteDatabase_getPragmaValWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *pragma) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) isOpen]) {
    return 0;
  }
  NetSqlcipherDatabaseSQLiteStatement *prog = nil;
  @try {
    prog = create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(db, JreStrcat("$$", @"PRAGMA ", pragma));
    jlong val = [prog simpleQueryForLong];
    return val;
  }
  @finally {
    if (prog != nil) [prog close];
  }
}

JavaUtilArrayList *NetSqlcipherDatabaseSQLiteDatabase_getAttachedDbsWithNetSqlcipherDatabaseSQLiteDatabase_(NetSqlcipherDatabaseSQLiteDatabase *dbObj) {
  NetSqlcipherDatabaseSQLiteDatabase_initialize();
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(dbObj)) isOpen]) {
    return nil;
  }
  JavaUtilArrayList *attachedDbs = create_JavaUtilArrayList_init();
  id<NetSqlcipherCursor> c = [dbObj rawQueryWithNSString:@"pragma database_list;" withNSStringArray:nil];
  while ([((id<NetSqlcipherCursor>) nil_chk(c)) moveToNext]) {
    [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_([c getStringWithInt:1], [c getStringWithInt:2])];
  }
  [c close];
  return attachedDbs;
}

IOSByteArray *NetSqlcipherDatabaseSQLiteDatabase_getBytesWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *data) {
  if (data == nil || data->size_ == 0) return nil;
  JavaNioCharBuffer *charBuffer = JavaNioCharBuffer_wrapWithCharArray_(data);
  JavaNioByteBuffer *byteBuffer = [((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(NetSqlcipherDatabaseSQLiteDatabase_KEY_ENCODING))) encodeWithJavaNioCharBuffer:charBuffer];
  IOSByteArray *result = [IOSByteArray arrayWithLength:[((JavaNioByteBuffer *) nil_chk(byteBuffer)) limit]];
  [byteBuffer getWithByteArray:result];
  return result;
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_dbopen(JNIEnv *_env_, jobject self, jstring path, jint flags);

void NetSqlcipherDatabaseSQLiteDatabase_dbopenWithNSString_withInt_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path, jint flags) {
  Java_net_sqlcipher_database_SQLiteDatabase_dbopen(&J2ObjC_JNIEnv, self, path, flags);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_enableSqlTracing(JNIEnv *_env_, jobject self, jstring path);

void NetSqlcipherDatabaseSQLiteDatabase_enableSqlTracingWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path) {
  Java_net_sqlcipher_database_SQLiteDatabase_enableSqlTracing(&J2ObjC_JNIEnv, self, path);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_enableSqlProfiling(JNIEnv *_env_, jobject self, jstring path);

void NetSqlcipherDatabaseSQLiteDatabase_enableSqlProfilingWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *path) {
  Java_net_sqlcipher_database_SQLiteDatabase_enableSqlProfiling(&J2ObjC_JNIEnv, self, path);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_native_1execSQL(JNIEnv *_env_, jobject self, jstring sql);

void NetSqlcipherDatabaseSQLiteDatabase_native_execSQLWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *sql) {
  Java_net_sqlcipher_database_SQLiteDatabase_native_1execSQL(&J2ObjC_JNIEnv, self, sql);
}

JNIEXPORT jlong Java_net_sqlcipher_database_SQLiteDatabase_lastInsertRow(JNIEnv *_env_, jobject self);

jlong NetSqlcipherDatabaseSQLiteDatabase_lastInsertRow(NetSqlcipherDatabaseSQLiteDatabase *self) {
  return Java_net_sqlcipher_database_SQLiteDatabase_lastInsertRow(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteDatabase_lastChangeCount(JNIEnv *_env_, jobject self);

jint NetSqlcipherDatabaseSQLiteDatabase_lastChangeCount(NetSqlcipherDatabaseSQLiteDatabase *self) {
  return Java_net_sqlcipher_database_SQLiteDatabase_lastChangeCount(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteDatabase_native_1getDbLookaside(JNIEnv *_env_, jobject self);

jint NetSqlcipherDatabaseSQLiteDatabase_native_getDbLookaside(NetSqlcipherDatabaseSQLiteDatabase *self) {
  return Java_net_sqlcipher_database_SQLiteDatabase_native_1getDbLookaside(&J2ObjC_JNIEnv, self);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_native_1rawExecSQL(JNIEnv *_env_, jobject self, jstring sql);

void NetSqlcipherDatabaseSQLiteDatabase_native_rawExecSQLWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *sql) {
  Java_net_sqlcipher_database_SQLiteDatabase_native_1rawExecSQL(&J2ObjC_JNIEnv, self, sql);
}

JNIEXPORT jint Java_net_sqlcipher_database_SQLiteDatabase_native_1status(JNIEnv *_env_, jobject self, jint operation, jboolean reset);

jint NetSqlcipherDatabaseSQLiteDatabase_native_statusWithInt_withBoolean_(NetSqlcipherDatabaseSQLiteDatabase *self, jint operation, jboolean reset) {
  return Java_net_sqlcipher_database_SQLiteDatabase_native_1status(&J2ObjC_JNIEnv, self, operation, reset);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_native_1key(JNIEnv *_env_, jobject self, jarray key);

void NetSqlcipherDatabaseSQLiteDatabase_native_keyWithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *key) {
  Java_net_sqlcipher_database_SQLiteDatabase_native_1key(&J2ObjC_JNIEnv, self, key);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_native_1rekey(JNIEnv *_env_, jobject self, jstring key);

void NetSqlcipherDatabaseSQLiteDatabase_native_rekeyWithNSString_(NetSqlcipherDatabaseSQLiteDatabase *self, NSString *key) {
  Java_net_sqlcipher_database_SQLiteDatabase_native_1rekey(&J2ObjC_JNIEnv, self, key);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_key(JNIEnv *_env_, jobject self, jarray key);

void NetSqlcipherDatabaseSQLiteDatabase_keyWithByteArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSByteArray *key) {
  Java_net_sqlcipher_database_SQLiteDatabase_key(&J2ObjC_JNIEnv, self, key);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_key_1mutf8(JNIEnv *_env_, jobject self, jarray key);

void NetSqlcipherDatabaseSQLiteDatabase_key_mutf8WithCharArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSCharArray *key) {
  Java_net_sqlcipher_database_SQLiteDatabase_key_1mutf8(&J2ObjC_JNIEnv, self, key);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_rekey(JNIEnv *_env_, jobject self, jarray key);

void NetSqlcipherDatabaseSQLiteDatabase_rekeyWithByteArray_(NetSqlcipherDatabaseSQLiteDatabase *self, IOSByteArray *key) {
  Java_net_sqlcipher_database_SQLiteDatabase_rekey(&J2ObjC_JNIEnv, self, key);
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteDatabase_nativeInit(JNIEnv *_env_, jclass _cls_);

void NetSqlcipherDatabaseSQLiteDatabase_nativeInit() {
  Java_net_sqlcipher_database_SQLiteDatabase_nativeInit(&J2ObjC_JNIEnv, NetSqlcipherDatabaseSQLiteDatabase_class_());
}

IOSObjectArray *NetSqlcipherDatabaseSQLiteDatabase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDatabase)

@implementation NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x481, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(loadLibrariesWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadLibraries", "[LNSString;", "LNetSqlcipherDatabaseSQLiteDatabase;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader = { "LibraryLoader", "net.sqlcipher.database", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDatabase_LibraryLoader)

@implementation NetSqlcipherDatabaseSQLiteDatabase_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDatabaseSQLiteDatabase_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)loadLibrariesWithNSStringArray:(IOSObjectArray *)libNames {
  {
    IOSObjectArray *a__ = libNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *libName = *b__++;
      JavaLangSystem_loadLibraryWithNSString_(libName);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadLibrariesWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadLibraries", "[LNSString;", "LNetSqlcipherDatabaseSQLiteDatabase;", "loadLibsWithAndroidContentContext:withJavaIoFile:" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_1 = { "", "net.sqlcipher.database", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_1;
}

@end

void NetSqlcipherDatabaseSQLiteDatabase_1_init(NetSqlcipherDatabaseSQLiteDatabase_1 *self) {
  NSObject_init(self);
}

NetSqlcipherDatabaseSQLiteDatabase_1 *new_NetSqlcipherDatabaseSQLiteDatabase_1_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase_1, init)
}

NetSqlcipherDatabaseSQLiteDatabase_1 *create_NetSqlcipherDatabaseSQLiteDatabase_1_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase_1, init)
}

@implementation NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo

- (instancetype)initWithNSString:(NSString *)masterTable
                    withNSString:(NSString *)deletedTable
                    withNSString:(NSString *)foreignKey {
  NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(self, masterTable, deletedTable, foreignKey);
  return self;
}

- (void)dealloc {
  RELEASE_(masterTable_);
  RELEASE_(deletedTable_);
  RELEASE_(foreignKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "masterTable_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "deletedTable_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "foreignKey_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;", "LNetSqlcipherDatabaseSQLiteDatabase;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo = { "SyncUpdateInfo", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo;
}

@end

void NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *self, NSString *masterTable, NSString *deletedTable, NSString *foreignKey) {
  NSObject_init(self);
  JreStrongAssign(&self->masterTable_, masterTable);
  JreStrongAssign(&self->deletedTable_, deletedTable);
  JreStrongAssign(&self->foreignKey_, foreignKey);
}

NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *new_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NSString *masterTable, NSString *deletedTable, NSString *foreignKey) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo, initWithNSString_withNSString_withNSString_, masterTable, deletedTable, foreignKey)
}

NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo *create_NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo_initWithNSString_withNSString_withNSString_(NSString *masterTable, NSString *deletedTable, NSString *foreignKey) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo, initWithNSString_withNSString_withNSString_, masterTable, deletedTable, foreignKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDatabase_SyncUpdateInfo)

@implementation NetSqlcipherDatabaseSQLiteDatabase_CursorFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetSqlcipherCursor;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newCursorWithNetSqlcipherDatabaseSQLiteDatabase:withNetSqlcipherDatabaseSQLiteCursorDriver:withNSString:withNetSqlcipherDatabaseSQLiteQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newCursor", "LNetSqlcipherDatabaseSQLiteDatabase;LNetSqlcipherDatabaseSQLiteCursorDriver;LNSString;LNetSqlcipherDatabaseSQLiteQuery;", "LNetSqlcipherDatabaseSQLiteDatabase;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_CursorFactory = { "CursorFactory", "net.sqlcipher.database", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_CursorFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteDatabase_CursorFactory)

@implementation NetSqlcipherDatabaseSQLiteDatabase_2

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)outer$
                                             withByteArray:(IOSByteArray *)capture$0 {
  NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(self, outer$, capture$0);
  return self;
}

- (void)run {
  if (val$keyMaterial_ != nil && val$keyMaterial_->size_ > 0) {
    NetSqlcipherDatabaseSQLiteDatabase_keyWithByteArray_(this$0_, val$keyMaterial_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$keyMaterial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withByteArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetSqlcipherDatabaseSQLiteDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$keyMaterial_", "[B", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;", "openDatabaseInternalWithCharArray:withNetSqlcipherDatabaseSQLiteDatabaseHook:" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_2 = { "", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_2;
}

@end

void NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase_2 *self, NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$keyMaterial_, capture$0);
  NSObject_init(self);
}

NetSqlcipherDatabaseSQLiteDatabase_2 *new_NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase_2, initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_, outer$, capture$0)
}

NetSqlcipherDatabaseSQLiteDatabase_2 *create_NetSqlcipherDatabaseSQLiteDatabase_2_initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSByteArray *capture$0) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase_2, initWithNetSqlcipherDatabaseSQLiteDatabase_withByteArray_, outer$, capture$0)
}

@implementation NetSqlcipherDatabaseSQLiteDatabase_3

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)outer$
                                             withCharArray:(IOSCharArray *)capture$0 {
  NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(self, outer$, capture$0);
  return self;
}

- (void)run {
  if (val$password_ != nil) {
    NetSqlcipherDatabaseSQLiteDatabase_key_mutf8WithCharArray_(this$0_, val$password_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$password_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withCharArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetSqlcipherDatabaseSQLiteDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$password_", "[C", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;", "openDatabaseInternalWithCharArray:withNetSqlcipherDatabaseSQLiteDatabaseHook:" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteDatabase_3 = { "", "net.sqlcipher.database", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteDatabase_3;
}

@end

void NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase_3 *self, NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$password_, capture$0);
  NSObject_init(self);
}

NetSqlcipherDatabaseSQLiteDatabase_3 *new_NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteDatabase_3, initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_, outer$, capture$0)
}

NetSqlcipherDatabaseSQLiteDatabase_3 *create_NetSqlcipherDatabaseSQLiteDatabase_3_initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_(NetSqlcipherDatabaseSQLiteDatabase *outer$, IOSCharArray *capture$0) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteDatabase_3, initWithNetSqlcipherDatabaseSQLiteDatabase_withCharArray_, outer$, capture$0)
}
