//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidOsParcel.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherAbstractWindowedCursor.h"
#include "NetSqlcipherCursor.h"
#include "NetSqlcipherDatabaseSQLiteAbortException.h"
#include "NetSqlcipherDatabaseSQLiteConstraintException.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteDatabaseCorruptException.h"
#include "NetSqlcipherDatabaseSQLiteDiskIOException.h"
#include "NetSqlcipherDatabaseSQLiteException.h"
#include "NetSqlcipherDatabaseSQLiteFullException.h"
#include "NetSqlcipherDatabaseSQLiteProgram.h"
#include "NetSqlcipherDatabaseSQLiteStatement.h"
#include "NetSqlcipherDatabaseUtils.h"
#include "NetSqlcipherSQLException.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/CollationKey.h"
#include "java/text/Collator.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface NetSqlcipherDatabaseUtils ()

+ (void)readExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply
                                      withNSString:(NSString *)msg
                                           withInt:(jint)code;

+ (IOSCharArray *)encodeHexWithByteArray:(IOSByteArray *)data
                           withCharArray:(IOSCharArray *)toDigits;

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr;

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name;

@end

inline NSString *NetSqlcipherDatabaseUtils_get_TAG();
static NSString *NetSqlcipherDatabaseUtils_TAG = @"DatabaseUtils";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseUtils, TAG, NSString *)

inline jboolean NetSqlcipherDatabaseUtils_get_DEBUG();
#define NetSqlcipherDatabaseUtils_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseUtils, DEBUG, jboolean)

inline jboolean NetSqlcipherDatabaseUtils_get_LOCAL_LOGV();
#define NetSqlcipherDatabaseUtils_LOCAL_LOGV false
J2OBJC_STATIC_FIELD_CONSTANT(NetSqlcipherDatabaseUtils, LOCAL_LOGV, jboolean)

inline IOSObjectArray *NetSqlcipherDatabaseUtils_get_countProjection();
static IOSObjectArray *NetSqlcipherDatabaseUtils_countProjection;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseUtils, countProjection, IOSObjectArray *)

inline IOSCharArray *NetSqlcipherDatabaseUtils_get_HEX_DIGITS_LOWER();
static IOSCharArray *NetSqlcipherDatabaseUtils_HEX_DIGITS_LOWER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetSqlcipherDatabaseUtils, HEX_DIGITS_LOWER, IOSCharArray *)

inline JavaTextCollator *NetSqlcipherDatabaseUtils_get_mColl();
inline JavaTextCollator *NetSqlcipherDatabaseUtils_set_mColl(JavaTextCollator *value);
static JavaTextCollator *NetSqlcipherDatabaseUtils_mColl;
J2OBJC_STATIC_FIELD_OBJ(NetSqlcipherDatabaseUtils, mColl, JavaTextCollator *)

__attribute__((unused)) static void NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_withNSString_withInt_(AndroidOsParcel *reply, NSString *msg, jint code);

__attribute__((unused)) static IOSCharArray *NetSqlcipherDatabaseUtils_encodeHexWithByteArray_withCharArray_(IOSByteArray *data, IOSCharArray *toDigits);

__attribute__((unused)) static jint NetSqlcipherDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr);

__attribute__((unused)) static IOSByteArray *NetSqlcipherDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name);

@interface NetSqlcipherDatabaseUtils_InsertHelper () {
 @public
  NetSqlcipherDatabaseSQLiteDatabase *mDb_;
  NSString *mTableName_;
  JavaUtilHashMap *mColumns_;
  NSString *mInsertSQL_;
  NetSqlcipherDatabaseSQLiteStatement *mInsertStatement_;
  NetSqlcipherDatabaseSQLiteStatement *mReplaceStatement_;
  NetSqlcipherDatabaseSQLiteStatement *mPreparedStatement_;
}

- (void)buildSQL;

- (NetSqlcipherDatabaseSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace;

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace;

@end

J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mDb_, NetSqlcipherDatabaseSQLiteDatabase *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mTableName_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mColumns_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mInsertSQL_, NSString *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mInsertStatement_, NetSqlcipherDatabaseSQLiteStatement *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mReplaceStatement_, NetSqlcipherDatabaseSQLiteStatement *)
J2OBJC_FIELD_SETTER(NetSqlcipherDatabaseUtils_InsertHelper, mPreparedStatement_, NetSqlcipherDatabaseSQLiteStatement *)

__attribute__((unused)) static void NetSqlcipherDatabaseUtils_InsertHelper_buildSQL(NetSqlcipherDatabaseUtils_InsertHelper *self);

__attribute__((unused)) static NetSqlcipherDatabaseSQLiteStatement *NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(NetSqlcipherDatabaseUtils_InsertHelper *self, jboolean allowReplace);

__attribute__((unused)) static jlong NetSqlcipherDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(NetSqlcipherDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace);

J2OBJC_INITIALIZED_DEFN(NetSqlcipherDatabaseUtils)

@implementation NetSqlcipherDatabaseUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetSqlcipherDatabaseUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)writeExceptionToParcelWithAndroidOsParcel:(AndroidOsParcel *)reply
                            withJavaLangException:(JavaLangException *)e {
  NetSqlcipherDatabaseUtils_writeExceptionToParcelWithAndroidOsParcel_withJavaLangException_(reply, e);
}

+ (void)readExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply {
  NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_(reply);
}

+ (void)readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply {
  NetSqlcipherDatabaseUtils_readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel_(reply);
}

+ (void)readExceptionFromParcelWithAndroidOsParcel:(AndroidOsParcel *)reply
                                      withNSString:(NSString *)msg
                                           withInt:(jint)code {
  NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_withNSString_withInt_(reply, msg, code);
}

+ (void)bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram:(NetSqlcipherDatabaseSQLiteProgram *)prog
                                                         withInt:(jint)index
                                                          withId:(id)value {
  NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(prog, index, value);
}

+ (jint)getTypeOfObjectWithId:(id)obj {
  return NetSqlcipherDatabaseUtils_getTypeOfObjectWithId_(obj);
}

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString {
  NetSqlcipherDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sb, sqlString);
}

+ (NSString *)sqlEscapeStringWithNSString:(NSString *)value {
  return NetSqlcipherDatabaseUtils_sqlEscapeStringWithNSString_(value);
}

+ (void)appendValueToSqlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                           withId:(id)value {
  NetSqlcipherDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(sql, value);
}

+ (NSString *)concatenateWhereWithNSString:(NSString *)a
                              withNSString:(NSString *)b {
  return NetSqlcipherDatabaseUtils_concatenateWhereWithNSString_withNSString_(a, b);
}

+ (NSString *)getCollationKeyWithNSString:(NSString *)name {
  return NetSqlcipherDatabaseUtils_getCollationKeyWithNSString_(name);
}

+ (NSString *)getHexCollationKeyWithNSString:(NSString *)name {
  return NetSqlcipherDatabaseUtils_getHexCollationKeyWithNSString_(name);
}

+ (IOSCharArray *)encodeHexWithByteArray:(IOSByteArray *)data
                           withCharArray:(IOSCharArray *)toDigits {
  return NetSqlcipherDatabaseUtils_encodeHexWithByteArray_withCharArray_(data, toDigits);
}

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr {
  return NetSqlcipherDatabaseUtils_getKeyLenWithByteArray_(arr);
}

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name {
  return NetSqlcipherDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
}

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor {
  NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_(cursor);
}

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                   withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCursorWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCursorToStringWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor {
  return NetSqlcipherDatabaseUtils_dumpCursorToStringWithNetSqlcipherCursor_(cursor);
}

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor {
  NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_(cursor);
}

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                       withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCurrentRowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                   withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCurrentRowToStringWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor {
  return NetSqlcipherDatabaseUtils_dumpCurrentRowToStringWithNetSqlcipherCursor_(cursor);
}

+ (void)cursorStringToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values {
  NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorStringToInsertHelperWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                            withNSString:(NSString *)field
              withNetSqlcipherDatabaseUtils_InsertHelper:(NetSqlcipherDatabaseUtils_InsertHelper *)inserter
                                                 withInt:(jint)index {
  NetSqlcipherDatabaseUtils_cursorStringToInsertHelperWithNetSqlcipherCursor_withNSString_withNetSqlcipherDatabaseUtils_InsertHelper_withInt_(cursor, field, inserter, index);
}

+ (void)cursorStringToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key {
  NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorIntToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                          withNSString:(NSString *)field
                       withAndroidContentContentValues:(AndroidContentContentValues *)values {
  NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorIntToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                          withNSString:(NSString *)field
                       withAndroidContentContentValues:(AndroidContentContentValues *)values
                                          withNSString:(NSString *)key {
  NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorLongToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                           withNSString:(NSString *)field
                        withAndroidContentContentValues:(AndroidContentContentValues *)values {
  NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorLongToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                           withNSString:(NSString *)field
                        withAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withNSString:(NSString *)key {
  NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorDoubleToCursorValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                            withNSString:(NSString *)field
                         withAndroidContentContentValues:(AndroidContentContentValues *)values {
  NetSqlcipherDatabaseUtils_cursorDoubleToCursorValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorDoubleToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key {
  NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorRowToContentValuesWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                       withAndroidContentContentValues:(AndroidContentContentValues *)values {
  NetSqlcipherDatabaseUtils_cursorRowToContentValuesWithNetSqlcipherCursor_withAndroidContentContentValues_(cursor, values);
}

+ (jlong)queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                                  withNSString:(NSString *)table {
  return NetSqlcipherDatabaseUtils_queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(db, table);
}

+ (jlong)longForQueryWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                               withNSString:(NSString *)query
                                          withNSStringArray:(IOSObjectArray *)selectionArgs {
  return NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (jlong)longForQueryWithNetSqlcipherDatabaseSQLiteStatement:(NetSqlcipherDatabaseSQLiteStatement *)prog
                                           withNSStringArray:(IOSObjectArray *)selectionArgs {
  return NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (NSString *)stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                                      withNSString:(NSString *)query
                                                 withNSStringArray:(IOSObjectArray *)selectionArgs {
  return NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (NSString *)stringForQueryWithNetSqlcipherDatabaseSQLiteStatement:(NetSqlcipherDatabaseSQLiteStatement *)prog
                                                  withNSStringArray:(IOSObjectArray *)selectionArgs {
  return NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (void)cursorStringToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorStringToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorLongToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                 withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                    withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorLongToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorShortToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                  withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                     withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorShortToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorIntToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                   withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorIntToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                  withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                     withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column {
  NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorFillWindowWithNetSqlcipherCursor:(id<NetSqlcipherCursor>)cursor
                                       withInt:(jint)position
               withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  NetSqlcipherDatabaseUtils_cursorFillWindowWithNetSqlcipherCursor_withInt_withAndroidDatabaseCursorWindow_(cursor, position, window);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 3, 5, -1, -1, -1 },
    { NULL, "V", 0x1a, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 14, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 25, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 30, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 32, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 41, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 42, 43, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 46, 47, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 46, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 49, 47, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 53, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 55, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 56, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 57, 58, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeExceptionToParcelWithAndroidOsParcel:withJavaLangException:);
  methods[2].selector = @selector(readExceptionFromParcelWithAndroidOsParcel:);
  methods[3].selector = @selector(readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel:);
  methods[4].selector = @selector(readExceptionFromParcelWithAndroidOsParcel:withNSString:withInt:);
  methods[5].selector = @selector(bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram:withInt:withId:);
  methods[6].selector = @selector(getTypeOfObjectWithId:);
  methods[7].selector = @selector(appendEscapedSQLStringWithJavaLangStringBuilder:withNSString:);
  methods[8].selector = @selector(sqlEscapeStringWithNSString:);
  methods[9].selector = @selector(appendValueToSqlWithJavaLangStringBuilder:withId:);
  methods[10].selector = @selector(concatenateWhereWithNSString:withNSString:);
  methods[11].selector = @selector(getCollationKeyWithNSString:);
  methods[12].selector = @selector(getHexCollationKeyWithNSString:);
  methods[13].selector = @selector(encodeHexWithByteArray:withCharArray:);
  methods[14].selector = @selector(getKeyLenWithByteArray:);
  methods[15].selector = @selector(getCollationKeyInBytesWithNSString:);
  methods[16].selector = @selector(dumpCursorWithNetSqlcipherCursor:);
  methods[17].selector = @selector(dumpCursorWithNetSqlcipherCursor:withJavaIoPrintStream:);
  methods[18].selector = @selector(dumpCursorWithNetSqlcipherCursor:withJavaLangStringBuilder:);
  methods[19].selector = @selector(dumpCursorToStringWithNetSqlcipherCursor:);
  methods[20].selector = @selector(dumpCurrentRowWithNetSqlcipherCursor:);
  methods[21].selector = @selector(dumpCurrentRowWithNetSqlcipherCursor:withJavaIoPrintStream:);
  methods[22].selector = @selector(dumpCurrentRowWithNetSqlcipherCursor:withJavaLangStringBuilder:);
  methods[23].selector = @selector(dumpCurrentRowToStringWithNetSqlcipherCursor:);
  methods[24].selector = @selector(cursorStringToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:);
  methods[25].selector = @selector(cursorStringToInsertHelperWithNetSqlcipherCursor:withNSString:withNetSqlcipherDatabaseUtils_InsertHelper:withInt:);
  methods[26].selector = @selector(cursorStringToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[27].selector = @selector(cursorIntToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:);
  methods[28].selector = @selector(cursorIntToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[29].selector = @selector(cursorLongToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:);
  methods[30].selector = @selector(cursorLongToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[31].selector = @selector(cursorDoubleToCursorValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:);
  methods[32].selector = @selector(cursorDoubleToContentValuesWithNetSqlcipherCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[33].selector = @selector(cursorRowToContentValuesWithNetSqlcipherCursor:withAndroidContentContentValues:);
  methods[34].selector = @selector(queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:);
  methods[35].selector = @selector(longForQueryWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:withNSStringArray:);
  methods[36].selector = @selector(longForQueryWithNetSqlcipherDatabaseSQLiteStatement:withNSStringArray:);
  methods[37].selector = @selector(stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:withNSStringArray:);
  methods[38].selector = @selector(stringForQueryWithNetSqlcipherDatabaseSQLiteStatement:withNSStringArray:);
  methods[39].selector = @selector(cursorStringToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[40].selector = @selector(cursorLongToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[41].selector = @selector(cursorShortToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[42].selector = @selector(cursorIntToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[43].selector = @selector(cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[44].selector = @selector(cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor:withAndroidContentContentValues:withNSString:);
  methods[45].selector = @selector(cursorFillWindowWithNetSqlcipherCursor:withInt:withAndroidDatabaseCursorWindow:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = NetSqlcipherDatabaseUtils_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "LOCAL_LOGV", "Z", .constantValue.asBOOL = NetSqlcipherDatabaseUtils_LOCAL_LOGV, 0x1a, -1, -1, -1, -1 },
    { "countProjection", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "HEX_DIGITS_LOWER", "[C", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "mColl", "LJavaTextCollator;", .constantValue.asLong = 0, 0xa, -1, 62, -1, -1 },
  };
  static const void *ptrTable[] = { "writeExceptionToParcel", "LAndroidOsParcel;LJavaLangException;", "readExceptionFromParcel", "LAndroidOsParcel;", "readExceptionWithFileNotFoundExceptionFromParcel", "LJavaIoFileNotFoundException;", "LAndroidOsParcel;LNSString;I", "bindObjectToProgram", "LNetSqlcipherDatabaseSQLiteProgram;ILNSObject;", "getTypeOfObject", "LNSObject;", "appendEscapedSQLString", "LJavaLangStringBuilder;LNSString;", "sqlEscapeString", "LNSString;", "appendValueToSql", "LJavaLangStringBuilder;LNSObject;", "concatenateWhere", "LNSString;LNSString;", "getCollationKey", "getHexCollationKey", "encodeHex", "[B[C", "getKeyLen", "[B", "getCollationKeyInBytes", "dumpCursor", "LNetSqlcipherCursor;", "LNetSqlcipherCursor;LJavaIoPrintStream;", "LNetSqlcipherCursor;LJavaLangStringBuilder;", "dumpCursorToString", "dumpCurrentRow", "dumpCurrentRowToString", "cursorStringToContentValues", "LNetSqlcipherCursor;LNSString;LAndroidContentContentValues;", "cursorStringToInsertHelper", "LNetSqlcipherCursor;LNSString;LNetSqlcipherDatabaseUtils_InsertHelper;I", "LNetSqlcipherCursor;LNSString;LAndroidContentContentValues;LNSString;", "cursorIntToContentValues", "cursorLongToContentValues", "cursorDoubleToCursorValues", "cursorDoubleToContentValues", "cursorRowToContentValues", "LNetSqlcipherCursor;LAndroidContentContentValues;", "queryNumEntries", "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;", "longForQuery", "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;[LNSString;", "LNetSqlcipherDatabaseSQLiteStatement;[LNSString;", "stringForQuery", "cursorStringToContentValuesIfPresent", "LNetSqlcipherCursor;LAndroidContentContentValues;LNSString;", "cursorLongToContentValuesIfPresent", "cursorShortToContentValuesIfPresent", "cursorIntToContentValuesIfPresent", "cursorFloatToContentValuesIfPresent", "cursorDoubleToContentValuesIfPresent", "cursorFillWindow", "LNetSqlcipherCursor;ILAndroidDatabaseCursorWindow;", &NetSqlcipherDatabaseUtils_TAG, &NetSqlcipherDatabaseUtils_countProjection, &NetSqlcipherDatabaseUtils_HEX_DIGITS_LOWER, &NetSqlcipherDatabaseUtils_mColl, "LNetSqlcipherDatabaseUtils_InsertHelper;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseUtils = { "DatabaseUtils", "net.sqlcipher", ptrTable, methods, fields, 7, 0x1, 46, 6, -1, 63, -1, -1, -1 };
  return &_NetSqlcipherDatabaseUtils;
}

+ (void)initialize {
  if (self == [NetSqlcipherDatabaseUtils class]) {
    JreStrongAssignAndConsume(&NetSqlcipherDatabaseUtils_countProjection, [IOSObjectArray newArrayWithObjects:(id[]){ @"count(*)" } count:1 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetSqlcipherDatabaseUtils_HEX_DIGITS_LOWER, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16]);
    JreStrongAssign(&NetSqlcipherDatabaseUtils_mColl, nil);
    J2OBJC_SET_INITIALIZED(NetSqlcipherDatabaseUtils)
  }
}

@end

void NetSqlcipherDatabaseUtils_init(NetSqlcipherDatabaseUtils *self) {
  NSObject_init(self);
}

NetSqlcipherDatabaseUtils *new_NetSqlcipherDatabaseUtils_init() {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseUtils, init)
}

NetSqlcipherDatabaseUtils *create_NetSqlcipherDatabaseUtils_init() {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseUtils, init)
}

void NetSqlcipherDatabaseUtils_writeExceptionToParcelWithAndroidOsParcel_withJavaLangException_(AndroidOsParcel *reply, JavaLangException *e) {
  NetSqlcipherDatabaseUtils_initialize();
  jint code = 0;
  jboolean logException = true;
  if ([e isKindOfClass:[JavaIoFileNotFoundException class]]) {
    code = 1;
    logException = false;
  }
  else if ([e isKindOfClass:[JavaLangIllegalArgumentException class]]) {
    code = 2;
  }
  else if ([e isKindOfClass:[JavaLangUnsupportedOperationException class]]) {
    code = 3;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteAbortException class]]) {
    code = 4;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteConstraintException class]]) {
    code = 5;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteDatabaseCorruptException class]]) {
    code = 6;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteFullException class]]) {
    code = 7;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteDiskIOException class]]) {
    code = 8;
  }
  else if ([e isKindOfClass:[NetSqlcipherDatabaseSQLiteException class]]) {
    code = 9;
  }
  else {
    [((AndroidOsParcel *) nil_chk(reply)) writeExceptionWithJavaLangException:e];
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseUtils_TAG, @"Writing exception to parcel", e);
    return;
  }
  [((AndroidOsParcel *) nil_chk(reply)) writeIntWithInt:code];
  [reply writeStringWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  if (logException) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseUtils_TAG, @"Writing exception to parcel", e);
  }
}

void NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_(AndroidOsParcel *reply) {
  NetSqlcipherDatabaseUtils_initialize();
  jint code = [((AndroidOsParcel *) nil_chk(reply)) readInt];
  if (code == 0) return;
  NSString *msg = [reply readString];
  NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_withNSString_withInt_(reply, msg, code);
}

void NetSqlcipherDatabaseUtils_readExceptionWithFileNotFoundExceptionFromParcelWithAndroidOsParcel_(AndroidOsParcel *reply) {
  NetSqlcipherDatabaseUtils_initialize();
  jint code = [((AndroidOsParcel *) nil_chk(reply)) readInt];
  if (code == 0) return;
  NSString *msg = [reply readString];
  if (code == 1) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(msg);
  }
  else {
    NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_withNSString_withInt_(reply, msg, code);
  }
}

void NetSqlcipherDatabaseUtils_readExceptionFromParcelWithAndroidOsParcel_withNSString_withInt_(AndroidOsParcel *reply, NSString *msg, jint code) {
  NetSqlcipherDatabaseUtils_initialize();
  switch (code) {
    case 2:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(msg);
    case 3:
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(msg);
    case 4:
    @throw create_NetSqlcipherDatabaseSQLiteAbortException_initWithNSString_(msg);
    case 5:
    @throw create_NetSqlcipherDatabaseSQLiteConstraintException_initWithNSString_(msg);
    case 6:
    @throw create_NetSqlcipherDatabaseSQLiteDatabaseCorruptException_initWithNSString_(msg);
    case 7:
    @throw create_NetSqlcipherDatabaseSQLiteFullException_initWithNSString_(msg);
    case 8:
    @throw create_NetSqlcipherDatabaseSQLiteDiskIOException_initWithNSString_(msg);
    case 9:
    @throw create_NetSqlcipherDatabaseSQLiteException_initWithNSString_(msg);
    default:
    [((AndroidOsParcel *) nil_chk(reply)) readExceptionWithInt:code withNSString:msg];
  }
}

void NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(NetSqlcipherDatabaseSQLiteProgram *prog, jint index, id value) {
  NetSqlcipherDatabaseUtils_initialize();
  if (value == nil) {
    [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindNullWithInt:index];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]] || [value isKindOfClass:[JavaLangFloat class]]) {
    [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindDoubleWithInt:index withDouble:[((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue]];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:[((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue]];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:1];
    }
    else {
      [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:0];
    }
  }
  else if ([value isKindOfClass:[IOSByteArray class]]) {
    [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindBlobWithInt:index withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
  }
  else {
    [((NetSqlcipherDatabaseSQLiteProgram *) nil_chk(prog)) bindStringWithInt:index withNSString:[value description]];
  }
}

jint NetSqlcipherDatabaseUtils_getTypeOfObjectWithId_(id obj) {
  NetSqlcipherDatabaseUtils_initialize();
  if (obj == nil) {
    return 0;
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    return 4;
  }
  else if ([obj isKindOfClass:[JavaLangFloat class]] || [obj isKindOfClass:[JavaLangDouble class]]) {
    return 2;
  }
  else if ([obj isKindOfClass:[JavaLangLong class]] || [obj isKindOfClass:[JavaLangInteger class]]) {
    return 1;
  }
  else {
    return 3;
  }
}

void NetSqlcipherDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString) {
  NetSqlcipherDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\''];
  if ([((NSString *) nil_chk(sqlString)) java_indexOf:'\''] != -1) {
    jint length = [sqlString java_length];
    for (jint i = 0; i < length; i++) {
      jchar c = [sqlString charAtWithInt:i];
      if (c == '\'') {
        [sb appendWithChar:'\''];
      }
      [sb appendWithChar:c];
    }
  }
  else [sb appendWithNSString:sqlString];
  [sb appendWithChar:'\''];
}

NSString *NetSqlcipherDatabaseUtils_sqlEscapeStringWithNSString_(NSString *value) {
  NetSqlcipherDatabaseUtils_initialize();
  JavaLangStringBuilder *escaper = create_JavaLangStringBuilder_init();
  NetSqlcipherDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(escaper, value);
  return [escaper description];
}

void NetSqlcipherDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sql, id value) {
  NetSqlcipherDatabaseUtils_initialize();
  if (value == nil) {
    [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"NULL"];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'1'];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'0'];
    }
  }
  else {
    NetSqlcipherDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sql, [value description]);
  }
}

NSString *NetSqlcipherDatabaseUtils_concatenateWhereWithNSString_withNSString_(NSString *a, NSString *b) {
  NetSqlcipherDatabaseUtils_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(a)) {
    return b;
  }
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(b)) {
    return a;
  }
  return JreStrcat("C$$$C", '(', a, @") AND (", b, ')');
}

NSString *NetSqlcipherDatabaseUtils_getCollationKeyWithNSString_(NSString *name) {
  NetSqlcipherDatabaseUtils_initialize();
  IOSByteArray *arr = NetSqlcipherDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
  @try {
    return [NSString java_stringWithBytes:arr offset:0 length:NetSqlcipherDatabaseUtils_getKeyLenWithByteArray_(arr) charsetName:@"ISO8859_1"];
  }
  @catch (JavaLangException *ex) {
    return @"";
  }
}

NSString *NetSqlcipherDatabaseUtils_getHexCollationKeyWithNSString_(NSString *name) {
  NetSqlcipherDatabaseUtils_initialize();
  IOSByteArray *arr = NetSqlcipherDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
  IOSCharArray *keys = NetSqlcipherDatabaseUtils_encodeHexWithByteArray_withCharArray_(arr, NetSqlcipherDatabaseUtils_HEX_DIGITS_LOWER);
  return [NSString java_stringWithCharacters:keys offset:0 length:NetSqlcipherDatabaseUtils_getKeyLenWithByteArray_(arr) * 2];
}

IOSCharArray *NetSqlcipherDatabaseUtils_encodeHexWithByteArray_withCharArray_(IOSByteArray *data, IOSCharArray *toDigits) {
  NetSqlcipherDatabaseUtils_initialize();
  jint l = ((IOSByteArray *) nil_chk(data))->size_;
  IOSCharArray *out = [IOSCharArray arrayWithLength:JreLShift32(l, 1)];
  for (jint i = 0, j = 0; i < l; i++) {
    *IOSCharArray_GetRef(out, j++) = IOSCharArray_Get(nil_chk(toDigits), JreURShift32(((jint) 0xF0 & IOSByteArray_Get(data, i)), 4));
    *IOSCharArray_GetRef(out, j++) = IOSCharArray_Get(toDigits, (jint) 0x0F & IOSByteArray_Get(data, i));
  }
  return out;
}

jint NetSqlcipherDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr) {
  NetSqlcipherDatabaseUtils_initialize();
  if (IOSByteArray_Get(arr, ((IOSByteArray *) nil_chk(arr))->size_ - 1) != 0) {
    return arr->size_;
  }
  else {
    return arr->size_ - 1;
  }
}

IOSByteArray *NetSqlcipherDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name) {
  NetSqlcipherDatabaseUtils_initialize();
  if (NetSqlcipherDatabaseUtils_mColl == nil) {
    JreStrongAssign(&NetSqlcipherDatabaseUtils_mColl, JavaTextCollator_getInstance());
    [((JavaTextCollator *) nil_chk(NetSqlcipherDatabaseUtils_mColl)) setStrengthWithInt:JavaTextCollator_PRIMARY];
  }
  return [((JavaTextCollationKey *) nil_chk([((JavaTextCollator *) nil_chk(NetSqlcipherDatabaseUtils_mColl)) getCollationKeyWithNSString:name])) toByteArray];
}

void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaIoPrintStream_(id<NetSqlcipherCursor> cursor, JavaIoPrintStream *stream) {
  NetSqlcipherDatabaseUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$@", @">>>>> Dumping cursor ", cursor)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaIoPrintStream_(cursor, stream);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [stream printlnWithNSString:@"<<<<<"];
}

void NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaLangStringBuilder_(id<NetSqlcipherCursor> cursor, JavaLangStringBuilder *sb) {
  NetSqlcipherDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$@C", @">>>>> Dumping cursor ", cursor, 0x000a)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaLangStringBuilder_(cursor, sb);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [sb appendWithNSString:@"<<<<<\n"];
}

NSString *NetSqlcipherDatabaseUtils_dumpCursorToStringWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor) {
  NetSqlcipherDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  NetSqlcipherDatabaseUtils_dumpCursorWithNetSqlcipherCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaIoPrintStream_(id<NetSqlcipherCursor> cursor, JavaIoPrintStream *stream) {
  NetSqlcipherDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("I$", [cursor getPosition], @" {")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (NetSqlcipherDatabaseSQLiteException *e) {
      value = @"<unprintable>";
    }
    [stream printlnWithNSString:JreStrcat("$$C$", @"   ", IOSObjectArray_Get(cols, i), '=', value)];
  }
  [stream printlnWithNSString:@"}"];
}

void NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaLangStringBuilder_(id<NetSqlcipherCursor> cursor, JavaLangStringBuilder *sb) {
  NetSqlcipherDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("I$", [cursor getPosition], @" {\n")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (NetSqlcipherDatabaseSQLiteException *e) {
      value = @"<unprintable>";
    }
    [sb appendWithNSString:JreStrcat("$$C$C", @"   ", IOSObjectArray_Get(cols, i), '=', value, 0x000a)];
  }
  [sb appendWithNSString:@"}\n"];
}

NSString *NetSqlcipherDatabaseUtils_dumpCurrentRowToStringWithNetSqlcipherCursor_(id<NetSqlcipherCursor> cursor) {
  NetSqlcipherDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  NetSqlcipherDatabaseUtils_dumpCurrentRowWithNetSqlcipherCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void NetSqlcipherDatabaseUtils_cursorStringToInsertHelperWithNetSqlcipherCursor_withNSString_withNetSqlcipherDatabaseUtils_InsertHelper_withInt_(id<NetSqlcipherCursor> cursor, NSString *field, NetSqlcipherDatabaseUtils_InsertHelper *inserter, jint index) {
  NetSqlcipherDatabaseUtils_initialize();
  [((NetSqlcipherDatabaseUtils_InsertHelper *) nil_chk(inserter)) bindWithInt:index withNSString:[((id<NetSqlcipherCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void NetSqlcipherDatabaseUtils_cursorStringToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  NetSqlcipherDatabaseUtils_initialize();
  [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withNSString:[((id<NetSqlcipherCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void NetSqlcipherDatabaseUtils_cursorIntToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  NetSqlcipherDatabaseUtils_initialize();
  jint colIndex = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:nil];
  }
}

void NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void NetSqlcipherDatabaseUtils_cursorLongToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  NetSqlcipherDatabaseUtils_initialize();
  jint colIndex = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    JavaLangLong *value = JavaLangLong_valueOfWithLong_([cursor getLongWithInt:colIndex]);
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:value];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:nil];
  }
}

void NetSqlcipherDatabaseUtils_cursorDoubleToCursorValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesWithNetSqlcipherCursor_withNSString_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  NetSqlcipherDatabaseUtils_initialize();
  jint colIndex = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:nil];
  }
}

void NetSqlcipherDatabaseUtils_cursorRowToContentValuesWithNetSqlcipherCursor_withAndroidContentContentValues_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherAbstractWindowedCursor *awc = ([cursor isKindOfClass:[NetSqlcipherAbstractWindowedCursor class]]) ? (NetSqlcipherAbstractWindowedCursor *) cast_chk(cursor, [NetSqlcipherAbstractWindowedCursor class]) : nil;
  IOSObjectArray *columns = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < length; i++) {
    if (awc != nil && [awc isBlobWithInt:i]) {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withByteArray:[cursor getBlobWithInt:i]];
    }
    else {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withNSString:[cursor getStringWithInt:i]];
    }
  }
}

jlong NetSqlcipherDatabaseUtils_queryNumEntriesWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *table) {
  NetSqlcipherDatabaseUtils_initialize();
  id<NetSqlcipherCursor> cursor = [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) queryWithNSString:table withNSStringArray:NetSqlcipherDatabaseUtils_countProjection withNSString:nil withNSStringArray:nil withNSString:nil withNSString:nil withNSString:nil];
  @try {
    [((id<NetSqlcipherCursor>) nil_chk(cursor)) moveToFirst];
    return [cursor getLongWithInt:0];
  }
  @finally {
    [cursor close];
  }
}

jlong NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseSQLiteStatement *prog = [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(prog)) close];
  }
}

jlong NetSqlcipherDatabaseUtils_longForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(NetSqlcipherDatabaseSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  NetSqlcipherDatabaseUtils_initialize();
  if (selectionArgs != nil) {
    jint size = selectionArgs->size_;
    for (jint i = 0; i < size; i++) {
      NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(prog, i + 1, IOSObjectArray_Get(selectionArgs, i));
    }
  }
  jlong value = [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(prog)) simpleQueryForLong];
  return value;
}

NSString *NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_withNSStringArray_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  NetSqlcipherDatabaseUtils_initialize();
  NetSqlcipherDatabaseSQLiteStatement *prog = [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(prog)) close];
  }
}

NSString *NetSqlcipherDatabaseUtils_stringForQueryWithNetSqlcipherDatabaseSQLiteStatement_withNSStringArray_(NetSqlcipherDatabaseSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  NetSqlcipherDatabaseUtils_initialize();
  if (selectionArgs != nil) {
    jint size = selectionArgs->size_;
    for (jint i = 0; i < size; i++) {
      NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(prog, i + 1, IOSObjectArray_Get(selectionArgs, i));
    }
  }
  NSString *value = [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(prog)) simpleQueryForString];
  return value;
}

void NetSqlcipherDatabaseUtils_cursorStringToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withNSString:[cursor getStringWithInt:index]];
  }
}

void NetSqlcipherDatabaseUtils_cursorLongToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangLong:JavaLangLong_valueOfWithLong_([cursor getLongWithInt:index])];
  }
}

void NetSqlcipherDatabaseUtils_cursorShortToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangShort:JavaLangShort_valueOfWithShort_([cursor getShortWithInt:index])];
  }
}

void NetSqlcipherDatabaseUtils_cursorIntToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:index])];
  }
}

void NetSqlcipherDatabaseUtils_cursorFloatToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangFloat:JavaLangFloat_valueOfWithFloat_([cursor getFloatWithInt:index])];
  }
}

void NetSqlcipherDatabaseUtils_cursorDoubleToContentValuesIfPresentWithNetSqlcipherCursor_withAndroidContentContentValues_withNSString_(id<NetSqlcipherCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  NetSqlcipherDatabaseUtils_initialize();
  jint index = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:column];
  if (![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:index])];
  }
}

void NetSqlcipherDatabaseUtils_cursorFillWindowWithNetSqlcipherCursor_withInt_withAndroidDatabaseCursorWindow_(id<NetSqlcipherCursor> cursor, jint position, AndroidDatabaseCursorWindow *window) {
  NetSqlcipherDatabaseUtils_initialize();
  if (position < 0 || position >= [((id<NetSqlcipherCursor>) nil_chk(cursor)) getCount]) {
    return;
  }
  jint oldPos = [((id<NetSqlcipherCursor>) nil_chk(cursor)) getPosition];
  jint numColumns = [cursor getColumnCount];
  [((AndroidDatabaseCursorWindow *) nil_chk(window)) clear];
  [window setStartPositionWithInt:position];
  [window setNumColumnsWithInt:numColumns];
  if ([cursor moveToPositionWithInt:position]) {
    do {
      if (![window allocRow]) {
        break;
      }
      for (jint i = 0; i < numColumns; i++) {
        jint type = [cursor getTypeWithInt:i];
        jboolean success;
        switch (type) {
          case NetSqlcipherCursor_FIELD_TYPE_NULL:
          success = [window putNullWithInt:position withInt:i];
          break;
          case NetSqlcipherCursor_FIELD_TYPE_INTEGER:
          success = [window putLongWithLong:[cursor getLongWithInt:i] withInt:position withInt:i];
          break;
          case NetSqlcipherCursor_FIELD_TYPE_FLOAT:
          success = [window putDoubleWithDouble:[cursor getDoubleWithInt:i] withInt:position withInt:i];
          break;
          case NetSqlcipherCursor_FIELD_TYPE_BLOB:
          {
            IOSByteArray *value = [cursor getBlobWithInt:i];
            success = value != nil ? [window putBlobWithByteArray:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
          default:
          case NetSqlcipherCursor_FIELD_TYPE_STRING:
          {
            NSString *value = [cursor getStringWithInt:i];
            success = value != nil ? [window putStringWithNSString:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
        }
        if (!success) {
          [window freeLastRow];
          break;
        }
      }
      position += 1;
    }
    while ([cursor moveToNext]);
  }
  [cursor moveToPositionWithInt:oldPos];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseUtils)

@implementation NetSqlcipherDatabaseUtils_InsertHelper

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)tableName {
  NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, db, tableName);
  return self;
}

- (void)buildSQL {
  NetSqlcipherDatabaseUtils_InsertHelper_buildSQL(self);
}

- (NetSqlcipherDatabaseSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace {
  return NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
}

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace {
  return NetSqlcipherDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, allowReplace);
}

- (jint)getColumnIndexWithNSString:(NSString *)key {
  NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false);
  JavaLangInteger *index = [((JavaUtilHashMap *) nil_chk(mColumns_)) getWithId:key];
  if (index == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", key, @"' is invalid"));
  }
  return [index intValue];
}

- (void)bindWithInt:(jint)index
         withDouble:(jdouble)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
          withFloat:(jfloat)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
           withLong:(jlong)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
            withInt:(jint)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
        withBoolean:(jboolean)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value ? 1 : 0];
}

- (void)bindNullWithInt:(jint)index {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
}

- (void)bindWithInt:(jint)index
      withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindBlobWithInt:index withByteArray:value];
  }
}

- (void)bindWithInt:(jint)index
       withNSString:(NSString *)value {
  if (value == nil) {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) bindStringWithInt:index withNSString:value];
  }
}

- (jlong)insertWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return NetSqlcipherDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, false);
}

- (jlong)execute {
  if (mPreparedStatement_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"you must prepare this inserter before calling execute");
  }
  @try {
    return [mPreparedStatement_ executeInsert];
  }
  @catch (NetSqlcipherSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseUtils_TAG, JreStrcat("$$", @"Error executing InsertHelper with table ", mTableName_), e);
    return -1;
  }
  @finally {
    JreStrongAssign(&mPreparedStatement_, nil);
  }
}

- (void)prepareForInsert {
  JreStrongAssign(&mPreparedStatement_, NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false));
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (void)prepareForReplace {
  JreStrongAssign(&mPreparedStatement_, NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, true));
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (jlong)replaceWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return NetSqlcipherDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, true);
}

- (void)close {
  if (mInsertStatement_ != nil) {
    [mInsertStatement_ close];
    JreStrongAssign(&mInsertStatement_, nil);
  }
  if (mReplaceStatement_ != nil) {
    [mReplaceStatement_ close];
    JreStrongAssign(&mReplaceStatement_, nil);
  }
  JreStrongAssign(&mInsertSQL_, nil);
  JreStrongAssign(&mColumns_, nil);
}

- (void)dealloc {
  RELEASE_(mDb_);
  RELEASE_(mTableName_);
  RELEASE_(mColumns_);
  RELEASE_(mInsertSQL_);
  RELEASE_(mInsertStatement_);
  RELEASE_(mReplaceStatement_);
  RELEASE_(mPreparedStatement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNetSqlcipherDatabaseSQLiteStatement;", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x22, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:);
  methods[1].selector = @selector(buildSQL);
  methods[2].selector = @selector(getStatementWithBoolean:);
  methods[3].selector = @selector(insertInternalWithAndroidContentContentValues:withBoolean:);
  methods[4].selector = @selector(getColumnIndexWithNSString:);
  methods[5].selector = @selector(bindWithInt:withDouble:);
  methods[6].selector = @selector(bindWithInt:withFloat:);
  methods[7].selector = @selector(bindWithInt:withLong:);
  methods[8].selector = @selector(bindWithInt:withInt:);
  methods[9].selector = @selector(bindWithInt:withBoolean:);
  methods[10].selector = @selector(bindNullWithInt:);
  methods[11].selector = @selector(bindWithInt:withByteArray:);
  methods[12].selector = @selector(bindWithInt:withNSString:);
  methods[13].selector = @selector(insertWithAndroidContentContentValues:);
  methods[14].selector = @selector(execute);
  methods[15].selector = @selector(prepareForInsert);
  methods[16].selector = @selector(prepareForReplace);
  methods[17].selector = @selector(replaceWithAndroidContentContentValues:);
  methods[18].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDb_", "LNetSqlcipherDatabaseSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTableName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "mInsertSQL_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsertStatement_", "LNetSqlcipherDatabaseSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReplaceStatement_", "LNetSqlcipherDatabaseSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreparedStatement_", "LNetSqlcipherDatabaseSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_COLUMNNAME_INDEX", "I", .constantValue.asInt = NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX, 0x19, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_DEFAULT_INDEX", "I", .constantValue.asInt = NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;", "LNetSqlcipherSQLException;", "getStatement", "Z", "insertInternal", "LAndroidContentContentValues;Z", "getColumnIndex", "LNSString;", "bind", "ID", "IF", "IJ", "II", "IZ", "bindNull", "I", "I[B", "ILNSString;", "insert", "LAndroidContentContentValues;", "replace", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LNetSqlcipherDatabaseUtils;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseUtils_InsertHelper = { "InsertHelper", "net.sqlcipher", ptrTable, methods, fields, 7, 0x9, 19, 9, 22, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseUtils_InsertHelper;
}

@end

void NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseUtils_InsertHelper *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName) {
  NSObject_init(self);
  JreStrongAssign(&self->mInsertSQL_, nil);
  JreStrongAssign(&self->mInsertStatement_, nil);
  JreStrongAssign(&self->mReplaceStatement_, nil);
  JreStrongAssign(&self->mPreparedStatement_, nil);
  JreStrongAssign(&self->mDb_, db);
  JreStrongAssign(&self->mTableName_, tableName);
}

NetSqlcipherDatabaseUtils_InsertHelper *new_NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseUtils_InsertHelper, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_, db, tableName)
}

NetSqlcipherDatabaseUtils_InsertHelper *create_NetSqlcipherDatabaseUtils_InsertHelper_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseUtils_InsertHelper, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_, db, tableName)
}

void NetSqlcipherDatabaseUtils_InsertHelper_buildSQL(NetSqlcipherDatabaseUtils_InsertHelper *self) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(128);
  [sb appendWithNSString:@"INSERT INTO "];
  [sb appendWithNSString:self->mTableName_];
  [sb appendWithNSString:@" ("];
  JavaLangStringBuilder *sbv = create_JavaLangStringBuilder_initWithInt_(128);
  [sbv appendWithNSString:@"VALUES ("];
  jint i = 1;
  id<NetSqlcipherCursor> cur = nil;
  @try {
    cur = [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(self->mDb_)) rawQueryWithNSString:JreStrcat("$$C", @"PRAGMA table_info(", self->mTableName_, ')') withNSStringArray:nil];
    JreStrongAssignAndConsume(&self->mColumns_, new_JavaUtilHashMap_initWithInt_([((id<NetSqlcipherCursor>) nil_chk(cur)) getCount]));
    while ([cur moveToNext]) {
      NSString *columnName = [cur getStringWithInt:NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX];
      NSString *defaultValue = [cur getStringWithInt:NetSqlcipherDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX];
      [((JavaUtilHashMap *) nil_chk(self->mColumns_)) putWithId:columnName withId:JavaLangInteger_valueOfWithInt_(i)];
      [sb appendWithNSString:@"'"];
      [sb appendWithNSString:columnName];
      [sb appendWithNSString:@"'"];
      if (defaultValue == nil) {
        [sbv appendWithNSString:@"?"];
      }
      else {
        [sbv appendWithNSString:@"COALESCE(?, "];
        [sbv appendWithNSString:defaultValue];
        [sbv appendWithNSString:@")"];
      }
      [sb appendWithNSString:i == [cur getCount] ? @") " : @", "];
      [sbv appendWithNSString:i == [cur getCount] ? @");" : @", "];
      ++i;
    }
  }
  @finally {
    if (cur != nil) [cur close];
  }
  [sb appendWithJavaLangCharSequence:sbv];
  JreStrongAssign(&self->mInsertSQL_, [sb description]);
}

NetSqlcipherDatabaseSQLiteStatement *NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(NetSqlcipherDatabaseUtils_InsertHelper *self, jboolean allowReplace) {
  if (allowReplace) {
    if (self->mReplaceStatement_ == nil) {
      if (self->mInsertSQL_ == nil) NetSqlcipherDatabaseUtils_InsertHelper_buildSQL(self);
      NSString *replaceSQL = JreStrcat("$$", @"INSERT OR REPLACE", [((NSString *) nil_chk(self->mInsertSQL_)) java_substring:6]);
      JreStrongAssign(&self->mReplaceStatement_, [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:replaceSQL]);
    }
    return self->mReplaceStatement_;
  }
  else {
    if (self->mInsertStatement_ == nil) {
      if (self->mInsertSQL_ == nil) NetSqlcipherDatabaseUtils_InsertHelper_buildSQL(self);
      JreStrongAssign(&self->mInsertStatement_, [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:self->mInsertSQL_]);
    }
    return self->mInsertStatement_;
  }
}

jlong NetSqlcipherDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(NetSqlcipherDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace) {
  @synchronized(self) {
    @try {
      NetSqlcipherDatabaseSQLiteStatement *stmt = NetSqlcipherDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
      [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(stmt)) clearBindings];
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([((AndroidContentContentValues *) nil_chk(values)) valueSet])) {
        NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        jint i = [self getColumnIndexWithNSString:key];
        NetSqlcipherDatabaseUtils_bindObjectToProgramWithNetSqlcipherDatabaseSQLiteProgram_withInt_withId_(stmt, i, [e getValue]);
      }
      return [stmt executeInsert];
    }
    @catch (NetSqlcipherSQLException *e) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(NetSqlcipherDatabaseUtils_TAG, JreStrcat("$@$$", @"Error inserting ", values, @" into table  ", self->mTableName_), e);
      return -1;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseUtils_InsertHelper)
