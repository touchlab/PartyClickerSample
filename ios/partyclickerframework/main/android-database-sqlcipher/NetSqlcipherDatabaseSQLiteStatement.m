//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseSQLiteDatabase.h"
#include "NetSqlcipherDatabaseSQLiteProgram.h"
#include "NetSqlcipherDatabaseSQLiteStatement.h"
#include "android/os/SystemClock.h"
#include "java/lang/IllegalStateException.h"

@interface NetSqlcipherDatabaseSQLiteStatement ()

- (void)native_execute;

- (jlong)native_1x1_long;

- (NSString *)native_1x1_string;

@end

void NetSqlcipherDatabaseSQLiteStatement_native_execute(NetSqlcipherDatabaseSQLiteStatement *self);

jlong NetSqlcipherDatabaseSQLiteStatement_native_1x1_long(NetSqlcipherDatabaseSQLiteStatement *self);

NSString *NetSqlcipherDatabaseSQLiteStatement_native_1x1_string(NetSqlcipherDatabaseSQLiteStatement *self);

@implementation NetSqlcipherDatabaseSQLiteStatement

- (instancetype)initWithNetSqlcipherDatabaseSQLiteDatabase:(NetSqlcipherDatabaseSQLiteDatabase *)db
                                              withNSString:(NSString *)sql {
  NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, db, sql);
  return self;
}

- (void)execute {
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"database ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) getPath], @" already closed"));
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  [self acquireReference];
  @try {
    NetSqlcipherDatabaseSQLiteStatement_native_execute(self);
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (jlong)executeInsert {
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"database ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) getPath], @" already closed"));
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  [self acquireReference];
  @try {
    NetSqlcipherDatabaseSQLiteStatement_native_execute(self);
    return ([((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lastChangeCount] > 0) ? [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lastInsertRow] : -1;
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (jint)executeUpdateDelete {
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"database ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) getPath], @" already closed"));
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  [self acquireReference];
  @try {
    NetSqlcipherDatabaseSQLiteStatement_native_execute(self);
    return [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lastChangeCount];
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (jlong)simpleQueryForLong {
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"database ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) getPath], @" already closed"));
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  [self acquireReference];
  @try {
    jlong retValue = NetSqlcipherDatabaseSQLiteStatement_native_1x1_long(self);
    return retValue;
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (NSString *)simpleQueryForString {
  if (![((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) isOpen]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"database ", [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) getPath], @" already closed"));
  }
  jlong timeStart = AndroidOsSystemClock_uptimeMillis();
  [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) lock];
  [self acquireReference];
  @try {
    NSString *retValue = NetSqlcipherDatabaseSQLiteStatement_native_1x1_string(self);
    return retValue;
  }
  @finally {
    [self releaseReference];
    [((NetSqlcipherDatabaseSQLiteDatabase *) nil_chk(mDatabase_)) unlock];
  }
}

- (void)native_execute {
  NetSqlcipherDatabaseSQLiteStatement_native_execute(self);
}

- (jlong)native_1x1_long {
  return NetSqlcipherDatabaseSQLiteStatement_native_1x1_long(self);
}

- (NSString *)native_1x1_string {
  return NetSqlcipherDatabaseSQLiteStatement_native_1x1_string(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x112, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x112, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x112, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteDatabase:withNSString:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(executeInsert);
  methods[3].selector = @selector(executeUpdateDelete);
  methods[4].selector = @selector(simpleQueryForLong);
  methods[5].selector = @selector(simpleQueryForString);
  methods[6].selector = @selector(native_execute);
  methods[7].selector = @selector(native_1x1_long);
  methods[8].selector = @selector(native_1x1_string);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteDatabase;LNSString;" };
  static const J2ObjcClassInfo _NetSqlcipherDatabaseSQLiteStatement = { "SQLiteStatement", "net.sqlcipher.database", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_NetSqlcipherDatabaseSQLiteStatement;
}

@end

void NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteStatement *self, NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql) {
  NetSqlcipherDatabaseSQLiteProgram_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(self, db, sql);
}

NetSqlcipherDatabaseSQLiteStatement *new_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql) {
  J2OBJC_NEW_IMPL(NetSqlcipherDatabaseSQLiteStatement, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_, db, sql)
}

NetSqlcipherDatabaseSQLiteStatement *create_NetSqlcipherDatabaseSQLiteStatement_initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_(NetSqlcipherDatabaseSQLiteDatabase *db, NSString *sql) {
  J2OBJC_CREATE_IMPL(NetSqlcipherDatabaseSQLiteStatement, initWithNetSqlcipherDatabaseSQLiteDatabase_withNSString_, db, sql)
}

JNIEXPORT void Java_net_sqlcipher_database_SQLiteStatement_native_1execute(JNIEnv *_env_, jobject self);

void NetSqlcipherDatabaseSQLiteStatement_native_execute(NetSqlcipherDatabaseSQLiteStatement *self) {
  Java_net_sqlcipher_database_SQLiteStatement_native_1execute(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jlong Java_net_sqlcipher_database_SQLiteStatement_native_11x1_1long(JNIEnv *_env_, jobject self);

jlong NetSqlcipherDatabaseSQLiteStatement_native_1x1_long(NetSqlcipherDatabaseSQLiteStatement *self) {
  return Java_net_sqlcipher_database_SQLiteStatement_native_11x1_1long(&J2ObjC_JNIEnv, self);
}

JNIEXPORT jstring Java_net_sqlcipher_database_SQLiteStatement_native_11x1_1string(JNIEnv *_env_, jobject self);

NSString *NetSqlcipherDatabaseSQLiteStatement_native_1x1_string(NetSqlcipherDatabaseSQLiteStatement *self) {
  return (NSString *) Java_net_sqlcipher_database_SQLiteStatement_native_11x1_1string(&J2ObjC_JNIEnv, self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetSqlcipherDatabaseSQLiteStatement)
