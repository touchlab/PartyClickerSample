//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContext.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteOpenHelper.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "ComSquareupSqldelightRowMapper.h"
#include "ComSquareupSqldelightSqlDelightStatement.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PDParty.h"
#include "PDPartyIntf.h"
#include "PDPartyModel.h"
#include "PDPerson.h"
#include "PDPersonModel.h"
#include "PDSqldelightOpenHelper.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface PDSqldelightOpenHelper ()

- (id<JavaUtilList>)allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement:(ComSquareupSqldelightSqlDelightStatement *)query;

@end

inline NSString *PDSqldelightOpenHelper_get_DATABASE_FILE_NAME();
static NSString *PDSqldelightOpenHelper_DATABASE_FILE_NAME = @"sqldelight";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PDSqldelightOpenHelper, DATABASE_FILE_NAME, NSString *)

inline jint PDSqldelightOpenHelper_get_BASELINE();
#define PDSqldelightOpenHelper_BASELINE 1
J2OBJC_STATIC_FIELD_CONSTANT(PDSqldelightOpenHelper, BASELINE, jint)

inline jint PDSqldelightOpenHelper_get_CURRENT_VERSION();
#define PDSqldelightOpenHelper_CURRENT_VERSION 1
J2OBJC_STATIC_FIELD_CONSTANT(PDSqldelightOpenHelper, CURRENT_VERSION, jint)

__attribute__((unused)) static id<JavaUtilList> PDSqldelightOpenHelper_allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement_(PDSqldelightOpenHelper *self, ComSquareupSqldelightSqlDelightStatement *query);

@implementation PDSqldelightOpenHelper

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context {
  PDSqldelightOpenHelper_initWithAndroidContentContext_(self, context);
  return self;
}

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) execSQLWithNSString:PDPartyModel_CREATE_TABLE];
  [db execSQLWithNSString:PDPersonModel_CREATE_TABLE];
}

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
}

- (id<JavaUtilList>)allParties {
  ComSquareupSqldelightSqlDelightStatement *query = [((PDPartyModel_Factory *) nil_chk(JreLoadStatic(PDParty, FACTORY))) selectAll];
  return PDSqldelightOpenHelper_allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement_(self, query);
}

- (id<JavaUtilList>)allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement:(ComSquareupSqldelightSqlDelightStatement *)query {
  return PDSqldelightOpenHelper_allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement_(self, query);
}

- (id<PDPartyIntf>)loadPartyWithInt:(jint)id_ {
  ComSquareupSqldelightSqlDelightStatement *query = [((PDPartyModel_Factory *) nil_chk(JreLoadStatic(PDParty, FACTORY))) selectByIdWithLong:id_];
  return [((id<JavaUtilList>) nil_chk(PDSqldelightOpenHelper_allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement_(self, query))) getWithInt:0];
}

- (id<PDPartyIntf>)createPartyWithNSString:(NSString *)name {
  PDPartyModel_CreateParty *createParty = create_PDPartyModel_CreateParty_initWithAndroidDatabaseSqliteSQLiteDatabase_([self getWritableDatabase]);
  [createParty bindWithNSString:name withLong:JavaLangSystem_currentTimeMillis()];
  return [self loadPartyWithInt:(jint) [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(createParty->program_)) executeInsert]];
}

- (void)deletePartyWithPDPartyIntf:(id<PDPartyIntf>)party {
  PDPartyModel_DeleteParty *deleteParty = create_PDPartyModel_DeleteParty_initWithAndroidDatabaseSqliteSQLiteDatabase_([self getWritableDatabase]);
  [deleteParty bindWithLong:[((id<PDPartyIntf>) nil_chk(party)) id__]];
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(deleteParty->program_)) execute];
}

- (jint)countCurrentPartyWithInt:(jint)id_ {
  ComSquareupSqldelightSqlDelightStatement *query = [((PDPersonModel_Factory *) nil_chk(JreLoadStatic(PDPerson, FACTORY))) countPartyWithLong:id_];
  id<AndroidDatabaseCursor> cursor = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([self getWritableDatabase])) rawQueryWithNSString:((ComSquareupSqldelightSqlDelightStatement *) nil_chk(query))->statement_ withNSStringArray:query->args_];
  [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
  jint count = [((JavaLangLong *) nil_chk([((id<ComSquareupSqldelightRowMapper>) nil_chk([JreLoadStatic(PDPerson, FACTORY) countPartyMapper])) mapWithAndroidDatabaseCursor:cursor])) intValue];
  [cursor close];
  return count;
}

- (id<JavaUtilList>)allPeopleForPartyWithPDPartyIntf:(id<PDPartyIntf>)party {
  ComSquareupSqldelightSqlDelightStatement *query = [((PDPersonModel_Factory *) nil_chk(JreLoadStatic(PDPerson, FACTORY))) selectAllForPartyWithLong:[((id<PDPartyIntf>) nil_chk(party)) id__]];
  id<AndroidDatabaseCursor> cursor = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([self getWritableDatabase])) rawQueryWithNSString:((ComSquareupSqldelightSqlDelightStatement *) nil_chk(query))->statement_ withNSStringArray:query->args_];
  [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
  id<JavaUtilList> persons = create_JavaUtilArrayList_init();
  while (![cursor isAfterLast]) {
    [persons addWithId:[((PDPersonModel_Mapper *) nil_chk([JreLoadStatic(PDPerson, FACTORY) selectAllForPartyMapper])) mapWithAndroidDatabaseCursor:cursor]];
    [cursor moveToNext];
  }
  [cursor close];
  return persons;
}

- (void)addPersonWithPDPartyIntf:(id<PDPartyIntf>)party
                     withBoolean:(jboolean)coming {
  PDPersonModel_CreatePerson *createPerson = create_PDPersonModel_CreatePerson_initWithAndroidDatabaseSqliteSQLiteDatabase_([self getWritableDatabase]);
  [createPerson bindWithLong:JavaLangSystem_currentTimeMillis() withLong:coming ? 1 : -1 withLong:[((id<PDPartyIntf>) nil_chk(party)) id__]];
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(createPerson->program_)) execute];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LPDPartyIntf;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LPDPartyIntf;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 16, 14, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:);
  methods[1].selector = @selector(onCreateWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[2].selector = @selector(onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[3].selector = @selector(allParties);
  methods[4].selector = @selector(allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement:);
  methods[5].selector = @selector(loadPartyWithInt:);
  methods[6].selector = @selector(createPartyWithNSString:);
  methods[7].selector = @selector(deletePartyWithPDPartyIntf:);
  methods[8].selector = @selector(countCurrentPartyWithInt:);
  methods[9].selector = @selector(allPeopleForPartyWithPDPartyIntf:);
  methods[10].selector = @selector(addPersonWithPDPartyIntf:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATABASE_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "BASELINE", "I", .constantValue.asInt = PDSqldelightOpenHelper_BASELINE, 0x1a, -1, -1, -1, -1 },
    { "CURRENT_VERSION", "I", .constantValue.asInt = PDSqldelightOpenHelper_CURRENT_VERSION, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;", "onCreate", "LAndroidDatabaseSqliteSQLiteDatabase;", "onUpgrade", "LAndroidDatabaseSqliteSQLiteDatabase;II", "()Ljava/util/List<Lcom/kgalligan/partyclicker/data/PartyIntf;>;", "allPartiesFromQuery", "LComSquareupSqldelightSqlDelightStatement;", "(Lcom/squareup/sqldelight/SqlDelightStatement;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/PartyIntf;>;", "loadParty", "I", "createParty", "LNSString;", "deleteParty", "LPDPartyIntf;", "countCurrentParty", "allPeopleForParty", "(Lcom/kgalligan/partyclicker/data/PartyIntf;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/PersonIntf;>;", "addPerson", "LPDPartyIntf;Z", &PDSqldelightOpenHelper_DATABASE_FILE_NAME };
  static const J2ObjcClassInfo _PDSqldelightOpenHelper = { "SqldelightOpenHelper", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_PDSqldelightOpenHelper;
}

@end

void PDSqldelightOpenHelper_initWithAndroidContentContext_(PDSqldelightOpenHelper *self, AndroidContentContext *context) {
  AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(self, context, PDSqldelightOpenHelper_DATABASE_FILE_NAME, nil, PDSqldelightOpenHelper_CURRENT_VERSION);
}

PDSqldelightOpenHelper *new_PDSqldelightOpenHelper_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_NEW_IMPL(PDSqldelightOpenHelper, initWithAndroidContentContext_, context)
}

PDSqldelightOpenHelper *create_PDSqldelightOpenHelper_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_CREATE_IMPL(PDSqldelightOpenHelper, initWithAndroidContentContext_, context)
}

id<JavaUtilList> PDSqldelightOpenHelper_allPartiesFromQueryWithComSquareupSqldelightSqlDelightStatement_(PDSqldelightOpenHelper *self, ComSquareupSqldelightSqlDelightStatement *query) {
  id<JavaUtilList> parties = create_JavaUtilArrayList_init();
  id<AndroidDatabaseCursor> cursor = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([self getWritableDatabase])) rawQueryWithNSString:((ComSquareupSqldelightSqlDelightStatement *) nil_chk(query))->statement_ withNSStringArray:query->args_];
  [((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst];
  while (![cursor isAfterLast]) {
    [parties addWithId:[((PDPartyModel_Mapper *) nil_chk([((PDPartyModel_Factory *) nil_chk(JreLoadStatic(PDParty, FACTORY))) selectAllMapper])) mapWithAndroidDatabaseCursor:cursor]];
    [cursor moveToNext];
  }
  [cursor close];
  return parties;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDSqldelightOpenHelper)
