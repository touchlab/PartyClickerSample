//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoRxRxBase.h"
#include "OrgGreenrobotGreendaoRxRxUtils.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "java/util/concurrent/Callable.h"

@implementation OrgGreenrobotGreendaoRxRxBase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoRxRxBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler {
  OrgGreenrobotGreendaoRxRxBase_initWithRxScheduler_(self, scheduler);
  return self;
}

- (RxScheduler *)getScheduler {
  return scheduler_;
}

- (RxObservable *)wrapWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return [self wrapWithRxObservable:OrgGreenrobotGreendaoRxRxUtils_fromCallableWithJavaUtilConcurrentCallable_(callable)];
}

- (RxObservable *)wrapWithRxObservable:(RxObservable *)observable {
  if (scheduler_ != nil) {
    return [((RxObservable *) nil_chk(observable)) subscribeOnWithRxScheduler:scheduler_];
  }
  else {
    return observable;
  }
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "LRxObservable;", 0x4, 1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithRxScheduler:);
  methods[2].selector = @selector(getScheduler);
  methods[3].selector = @selector(wrapWithJavaUtilConcurrentCallable:);
  methods[4].selector = @selector(wrapWithRxObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;", "wrap", "LJavaUtilConcurrentCallable;", "<R:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TR;>;)Lrx/Observable<TR;>;", "LRxObservable;", "<R:Ljava/lang/Object;>(Lrx/Observable<TR;>;)Lrx/Observable<TR;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxBase = { "RxBase", "org.greenrobot.greendao.rx", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoRxRxBase;
}

@end

void OrgGreenrobotGreendaoRxRxBase_init(OrgGreenrobotGreendaoRxRxBase *self) {
  NSObject_init(self);
  JreStrongAssign(&self->scheduler_, nil);
}

OrgGreenrobotGreendaoRxRxBase *new_OrgGreenrobotGreendaoRxRxBase_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxBase, init)
}

OrgGreenrobotGreendaoRxRxBase *create_OrgGreenrobotGreendaoRxRxBase_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxBase, init)
}

void OrgGreenrobotGreendaoRxRxBase_initWithRxScheduler_(OrgGreenrobotGreendaoRxRxBase *self, RxScheduler *scheduler) {
  NSObject_init(self);
  JreStrongAssign(&self->scheduler_, scheduler);
}

OrgGreenrobotGreendaoRxRxBase *new_OrgGreenrobotGreendaoRxRxBase_initWithRxScheduler_(RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxBase, initWithRxScheduler_, scheduler)
}

OrgGreenrobotGreendaoRxRxBase *create_OrgGreenrobotGreendaoRxRxBase_initWithRxScheduler_(RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxBase, initWithRxScheduler_, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoRxRxBase)
