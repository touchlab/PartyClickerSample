//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidDatabaseDataSetObserver.h"
#include "AndroidOsBundle.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoInternalFastCursor.h"
#include "java/lang/UnsupportedOperationException.h"

@interface OrgGreenrobotGreendaoInternalFastCursor () {
 @public
  AndroidDatabaseCursorWindow *window_;
  jint position_;
  jint count_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalFastCursor, window_, AndroidDatabaseCursorWindow *)

@implementation OrgGreenrobotGreendaoInternalFastCursor

- (instancetype)initWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  OrgGreenrobotGreendaoInternalFastCursor_initWithAndroidDatabaseCursorWindow_(self, window);
  return self;
}

- (jint)getCount {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getNumRows];
}

- (jint)getPosition {
  return position_;
}

- (jboolean)moveWithInt:(jint)offset {
  return [self moveToPositionWithInt:position_ + offset];
}

- (jboolean)moveToPositionWithInt:(jint)position {
  if (position >= 0 && position < count_) {
    self->position_ = position;
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)moveToFirst {
  position_ = 0;
  return count_ > 0;
}

- (jboolean)moveToLast {
  if (count_ > 0) {
    position_ = count_ - 1;
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)moveToNext {
  if (position_ < count_ - 1) {
    position_++;
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)moveToPrevious {
  if (position_ > 0) {
    position_--;
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)isFirst {
  return position_ == 0;
}

- (jboolean)isLast {
  return position_ == count_ - 1;
}

- (jboolean)isBeforeFirst {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isAfterLast {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getColumnNameWithInt:(jint)columnIndex {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)getColumnNames {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getColumnCount {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getBlobWithInt:position_ withInt:columnIndex];
}

- (NSString *)getStringWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getStringWithInt:position_ withInt:columnIndex];
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jshort)getShortWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getShortWithInt:position_ withInt:columnIndex];
}

- (jint)getIntWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getIntWithInt:position_ withInt:columnIndex];
}

- (jlong)getLongWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getLongWithInt:position_ withInt:columnIndex];
}

- (jfloat)getFloatWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getFloatWithInt:position_ withInt:columnIndex];
}

- (jdouble)getDoubleWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) getDoubleWithInt:position_ withInt:columnIndex];
}

- (jboolean)isNullWithInt:(jint)columnIndex {
  return [((AndroidDatabaseCursorWindow *) nil_chk(window_)) isNullWithInt:position_ withInt:columnIndex];
}

- (void)deactivate {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)requery {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)close {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isClosed {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)getWantsAllOnMoveCalls {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (AndroidOsBundle *)getExtras {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getTypeWithInt:(jint)columnIndex {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(window_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseCursorWindow:);
  methods[1].selector = @selector(getCount);
  methods[2].selector = @selector(getPosition);
  methods[3].selector = @selector(moveWithInt:);
  methods[4].selector = @selector(moveToPositionWithInt:);
  methods[5].selector = @selector(moveToFirst);
  methods[6].selector = @selector(moveToLast);
  methods[7].selector = @selector(moveToNext);
  methods[8].selector = @selector(moveToPrevious);
  methods[9].selector = @selector(isFirst);
  methods[10].selector = @selector(isLast);
  methods[11].selector = @selector(isBeforeFirst);
  methods[12].selector = @selector(isAfterLast);
  methods[13].selector = @selector(getColumnIndexWithNSString:);
  methods[14].selector = @selector(getColumnIndexOrThrowWithNSString:);
  methods[15].selector = @selector(getColumnNameWithInt:);
  methods[16].selector = @selector(getColumnNames);
  methods[17].selector = @selector(getColumnCount);
  methods[18].selector = @selector(getBlobWithInt:);
  methods[19].selector = @selector(getStringWithInt:);
  methods[20].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[21].selector = @selector(getShortWithInt:);
  methods[22].selector = @selector(getIntWithInt:);
  methods[23].selector = @selector(getLongWithInt:);
  methods[24].selector = @selector(getFloatWithInt:);
  methods[25].selector = @selector(getDoubleWithInt:);
  methods[26].selector = @selector(isNullWithInt:);
  methods[27].selector = @selector(deactivate);
  methods[28].selector = @selector(requery);
  methods[29].selector = @selector(close);
  methods[30].selector = @selector(isClosed);
  methods[31].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[32].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[33].selector = @selector(getWantsAllOnMoveCalls);
  methods[34].selector = @selector(getExtras);
  methods[35].selector = @selector(respondWithAndroidOsBundle:);
  methods[36].selector = @selector(getTypeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "window_", "LAndroidDatabaseCursorWindow;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseCursorWindow;", "move", "I", "moveToPosition", "getColumnIndex", "LNSString;", "getColumnIndexOrThrow", "LJavaLangIllegalArgumentException;", "getColumnName", "getBlob", "getString", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "getShort", "getInt", "getLong", "getFloat", "getDouble", "isNull", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver", "respond", "LAndroidOsBundle;", "getType" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoInternalFastCursor = { "FastCursor", "org.greenrobot.greendao.internal", ptrTable, methods, fields, 7, 0x11, 37, 3, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoInternalFastCursor;
}

@end

void OrgGreenrobotGreendaoInternalFastCursor_initWithAndroidDatabaseCursorWindow_(OrgGreenrobotGreendaoInternalFastCursor *self, AndroidDatabaseCursorWindow *window) {
  NSObject_init(self);
  JreStrongAssign(&self->window_, window);
  self->count_ = [((AndroidDatabaseCursorWindow *) nil_chk(window)) getNumRows];
}

OrgGreenrobotGreendaoInternalFastCursor *new_OrgGreenrobotGreendaoInternalFastCursor_initWithAndroidDatabaseCursorWindow_(AndroidDatabaseCursorWindow *window) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoInternalFastCursor, initWithAndroidDatabaseCursorWindow_, window)
}

OrgGreenrobotGreendaoInternalFastCursor *create_OrgGreenrobotGreendaoInternalFastCursor_initWithAndroidDatabaseCursorWindow_(AndroidDatabaseCursorWindow *window) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoInternalFastCursor, initWithAndroidDatabaseCursorWindow_, window)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoInternalFastCursor)
