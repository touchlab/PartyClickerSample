//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDaoSession.h"
#include "OrgGreenrobotGreendaoRxRxBase.h"
#include "OrgGreenrobotGreendaoRxRxTransaction.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "java/lang/Runnable.h"
#include "java/lang/Void.h"
#include "java/util/concurrent/Callable.h"

@interface OrgGreenrobotGreendaoRxRxTransaction () {
 @public
  OrgGreenrobotGreendaoAbstractDaoSession *daoSession_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoRxRxTransaction, daoSession_, OrgGreenrobotGreendaoAbstractDaoSession *)

@interface OrgGreenrobotGreendaoRxRxTransaction_1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgGreenrobotGreendaoRxRxTransaction *this$0_;
  id<JavaLangRunnable> val$runnable_;
}

- (instancetype)initWithOrgGreenrobotGreendaoRxRxTransaction:(OrgGreenrobotGreendaoRxRxTransaction *)outer$
                                        withJavaLangRunnable:(id<JavaLangRunnable>)capture$0;

- (JavaLangVoid *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGreenrobotGreendaoRxRxTransaction_1)

__attribute__((unused)) static void OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction_1 *self, OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0);

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxTransaction_1 *new_OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxTransaction_1 *create_OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0);

@interface OrgGreenrobotGreendaoRxRxTransaction_2 : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgGreenrobotGreendaoRxRxTransaction *this$0_;
  id<JavaUtilConcurrentCallable> val$callable_;
}

- (instancetype)initWithOrgGreenrobotGreendaoRxRxTransaction:(OrgGreenrobotGreendaoRxRxTransaction *)outer$
                              withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0;

- (id)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGreenrobotGreendaoRxRxTransaction_2)

__attribute__((unused)) static void OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction_2 *self, OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0);

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxTransaction_2 *new_OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgGreenrobotGreendaoRxRxTransaction_2 *create_OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0);

@implementation OrgGreenrobotGreendaoRxRxTransaction

- (instancetype)initWithOrgGreenrobotGreendaoAbstractDaoSession:(OrgGreenrobotGreendaoAbstractDaoSession *)daoSession {
  OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_(self, daoSession);
  return self;
}

- (instancetype)initWithOrgGreenrobotGreendaoAbstractDaoSession:(OrgGreenrobotGreendaoAbstractDaoSession *)daoSession
                                                withRxScheduler:(RxScheduler *)scheduler {
  OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_(self, daoSession, scheduler);
  return self;
}

- (RxObservable *)runWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return [self wrapWithJavaUtilConcurrentCallable:create_OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(self, runnable)];
}

- (RxObservable *)callWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return [self wrapWithJavaUtilConcurrentCallable:create_OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(self, callable)];
}

- (OrgGreenrobotGreendaoAbstractDaoSession *)getDaoSession {
  return daoSession_;
}

- (void)dealloc {
  RELEASE_(daoSession_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LRxObservable;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAbstractDaoSession;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoAbstractDaoSession:);
  methods[1].selector = @selector(initWithOrgGreenrobotGreendaoAbstractDaoSession:withRxScheduler:);
  methods[2].selector = @selector(runWithJavaLangRunnable:);
  methods[3].selector = @selector(callWithJavaUtilConcurrentCallable:);
  methods[4].selector = @selector(getDaoSession);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "daoSession_", "LOrgGreenrobotGreendaoAbstractDaoSession;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoAbstractDaoSession;", "LOrgGreenrobotGreendaoAbstractDaoSession;LRxScheduler;", "run", "LJavaLangRunnable;", "(Ljava/lang/Runnable;)Lrx/Observable<Ljava/lang/Void;>;", "call", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Lrx/Observable<TT;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxTransaction = { "RxTransaction", "org.greenrobot.greendao.rx", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoRxRxTransaction;
}

@end

void OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_(OrgGreenrobotGreendaoRxRxTransaction *self, OrgGreenrobotGreendaoAbstractDaoSession *daoSession) {
  OrgGreenrobotGreendaoRxRxBase_init(self);
  JreStrongAssign(&self->daoSession_, daoSession);
}

OrgGreenrobotGreendaoRxRxTransaction *new_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_(OrgGreenrobotGreendaoAbstractDaoSession *daoSession) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxTransaction, initWithOrgGreenrobotGreendaoAbstractDaoSession_, daoSession)
}

OrgGreenrobotGreendaoRxRxTransaction *create_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_(OrgGreenrobotGreendaoAbstractDaoSession *daoSession) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxTransaction, initWithOrgGreenrobotGreendaoAbstractDaoSession_, daoSession)
}

void OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_(OrgGreenrobotGreendaoRxRxTransaction *self, OrgGreenrobotGreendaoAbstractDaoSession *daoSession, RxScheduler *scheduler) {
  OrgGreenrobotGreendaoRxRxBase_initWithRxScheduler_(self, scheduler);
  JreStrongAssign(&self->daoSession_, daoSession);
}

OrgGreenrobotGreendaoRxRxTransaction *new_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_(OrgGreenrobotGreendaoAbstractDaoSession *daoSession, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxTransaction, initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_, daoSession, scheduler)
}

OrgGreenrobotGreendaoRxRxTransaction *create_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_(OrgGreenrobotGreendaoAbstractDaoSession *daoSession, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxTransaction, initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_, daoSession, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoRxRxTransaction)

@implementation OrgGreenrobotGreendaoRxRxTransaction_1

- (instancetype)initWithOrgGreenrobotGreendaoRxRxTransaction:(OrgGreenrobotGreendaoRxRxTransaction *)outer$
                                        withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(self, outer$, capture$0);
  return self;
}

- (JavaLangVoid *)call {
  [((OrgGreenrobotGreendaoAbstractDaoSession *) nil_chk(this$0_->daoSession_)) runInTxWithJavaLangRunnable:val$runnable_];
  return nil;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$runnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoRxRxTransaction:withJavaLangRunnable:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgGreenrobotGreendaoRxRxTransaction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$runnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LOrgGreenrobotGreendaoRxRxTransaction;", "runWithJavaLangRunnable:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxTransaction_1 = { "", "org.greenrobot.greendao.rx", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, 3, -1 };
  return &_OrgGreenrobotGreendaoRxRxTransaction_1;
}

@end

void OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction_1 *self, OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$runnable_, capture$0);
  NSObject_init(self);
}

OrgGreenrobotGreendaoRxRxTransaction_1 *new_OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxTransaction_1, initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_, outer$, capture$0)
}

OrgGreenrobotGreendaoRxRxTransaction_1 *create_OrgGreenrobotGreendaoRxRxTransaction_1_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxTransaction_1, initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaLangRunnable_, outer$, capture$0)
}

@implementation OrgGreenrobotGreendaoRxRxTransaction_2

- (instancetype)initWithOrgGreenrobotGreendaoRxRxTransaction:(OrgGreenrobotGreendaoRxRxTransaction *)outer$
                              withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0 {
  OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(self, outer$, capture$0);
  return self;
}

- (id)call {
  return [((OrgGreenrobotGreendaoAbstractDaoSession *) nil_chk(this$0_->daoSession_)) callInTxWithJavaUtilConcurrentCallable:val$callable_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoRxRxTransaction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgGreenrobotGreendaoRxRxTransaction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "()TT;", "Ljava/util/concurrent/Callable<TT;>;", "LOrgGreenrobotGreendaoRxRxTransaction;", "callWithJavaUtilConcurrentCallable:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<TT;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoRxRxTransaction_2 = { "", "org.greenrobot.greendao.rx", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, 5, -1 };
  return &_OrgGreenrobotGreendaoRxRxTransaction_2;
}

@end

void OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction_2 *self, OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$callable_, capture$0);
  NSObject_init(self);
}

OrgGreenrobotGreendaoRxRxTransaction_2 *new_OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoRxRxTransaction_2, initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_, outer$, capture$0)
}

OrgGreenrobotGreendaoRxRxTransaction_2 *create_OrgGreenrobotGreendaoRxRxTransaction_2_initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_(OrgGreenrobotGreendaoRxRxTransaction *outer$, id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoRxRxTransaction_2, initWithOrgGreenrobotGreendaoRxRxTransaction_withJavaUtilConcurrentCallable_, outer$, capture$0)
}
