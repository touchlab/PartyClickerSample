//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoAbstractDaoSession.h"
#include "OrgGreenrobotGreendaoAsyncAsyncSession.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoQueryQueryBuilder.h"
#include "OrgGreenrobotGreendaoRxRxTransaction.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/Callable.h"

@interface OrgGreenrobotGreendaoAbstractDaoSession () {
 @public
  id<OrgGreenrobotGreendaoDatabaseDatabase> db_;
  id<JavaUtilMap> entityToDao_;
  volatile_id rxTxPlain_;
  volatile_id rxTxIo_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDaoSession, db_, id<OrgGreenrobotGreendaoDatabaseDatabase>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDaoSession, entityToDao_, id<JavaUtilMap>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDaoSession, rxTxPlain_, OrgGreenrobotGreendaoRxRxTransaction *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAbstractDaoSession, rxTxIo_, OrgGreenrobotGreendaoRxRxTransaction *)

@implementation OrgGreenrobotGreendaoAbstractDaoSession

- (instancetype)initWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db {
  OrgGreenrobotGreendaoAbstractDaoSession_initWithOrgGreenrobotGreendaoDatabaseDatabase_(self, db);
  return self;
}

- (void)registerDaoWithIOSClass:(IOSClass *)entityClass
withOrgGreenrobotGreendaoAbstractDao:(OrgGreenrobotGreendaoAbstractDao *)dao {
  [((id<JavaUtilMap>) nil_chk(entityToDao_)) putWithId:entityClass withId:dao];
}

- (jlong)insertWithId:(id)entity {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:[nil_chk(entity) java_getClass]];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) insertWithId:entity];
}

- (jlong)insertOrReplaceWithId:(id)entity {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:[nil_chk(entity) java_getClass]];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) insertOrReplaceWithId:entity];
}

- (void)refreshWithId:(id)entity {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:[nil_chk(entity) java_getClass]];
  [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) refreshWithId:entity];
}

- (void)updateWithId:(id)entity {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:[nil_chk(entity) java_getClass]];
  [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) updateWithId:entity];
}

- (void)delete__WithId:(id)entity {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:[nil_chk(entity) java_getClass]];
  [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) delete__WithId:entity];
}

- (void)deleteAllWithIOSClass:(IOSClass *)entityClass {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:entityClass];
  [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) deleteAll];
}

- (id)load__WithIOSClass:(IOSClass *)entityClass
                  withId:(id)key {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:entityClass];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) load__WithId:key];
}

- (id<JavaUtilList>)loadAllWithIOSClass:(IOSClass *)entityClass {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:entityClass];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) loadAll];
}

- (id<JavaUtilList>)queryRawWithIOSClass:(IOSClass *)entityClass
                            withNSString:(NSString *)where
                       withNSStringArray:(IOSObjectArray *)selectionArgs {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:entityClass];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) queryRawWithNSString:where withNSStringArray:selectionArgs];
}

- (OrgGreenrobotGreendaoQueryQueryBuilder *)queryBuilderWithIOSClass:(IOSClass *)entityClass {
  OrgGreenrobotGreendaoAbstractDao *dao = [self getDaoWithIOSClass:entityClass];
  return [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(dao)) queryBuilder];
}

- (OrgGreenrobotGreendaoAbstractDao *)getDaoWithIOSClass:(IOSClass *)entityClass {
  OrgGreenrobotGreendaoAbstractDao *dao = [((id<JavaUtilMap>) nil_chk(entityToDao_)) getWithId:entityClass];
  if (dao == nil) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("$@", @"No DAO registered for ", entityClass));
  }
  return dao;
}

- (void)runInTxWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) beginTransaction];
  @try {
    [((id<JavaLangRunnable>) nil_chk(runnable)) run];
    [db_ setTransactionSuccessful];
  }
  @finally {
    [db_ endTransaction];
  }
}

- (id)callInTxWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) beginTransaction];
  @try {
    id result = [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
    [db_ setTransactionSuccessful];
    return result;
  }
  @finally {
    [db_ endTransaction];
  }
}

- (id)callInTxNoExceptionWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db_)) beginTransaction];
  @try {
    id result;
    @try {
      result = [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
    }
    @catch (JavaLangException *e) {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_withNSException_(@"Callable failed", e);
    }
    [db_ setTransactionSuccessful];
    return result;
  }
  @finally {
    [db_ endTransaction];
  }
}

- (id<OrgGreenrobotGreendaoDatabaseDatabase>)getDatabase {
  return db_;
}

- (id<JavaUtilCollection>)getAllDaos {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(entityToDao_)) values]);
}

- (OrgGreenrobotGreendaoAsyncAsyncSession *)startAsyncSession {
  return create_OrgGreenrobotGreendaoAsyncAsyncSession_initWithOrgGreenrobotGreendaoAbstractDaoSession_(self);
}

- (OrgGreenrobotGreendaoRxRxTransaction *)rxTxPlain {
  if (JreLoadVolatileId(&rxTxPlain_) == nil) {
    JreVolatileStrongAssign(&rxTxPlain_, create_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_(self));
  }
  return JreLoadVolatileId(&rxTxPlain_);
}

- (OrgGreenrobotGreendaoRxRxTransaction *)rxTx {
  if (JreLoadVolatileId(&rxTxIo_) == nil) {
    JreVolatileStrongAssign(&rxTxIo_, create_OrgGreenrobotGreendaoRxRxTransaction_initWithOrgGreenrobotGreendaoAbstractDaoSession_withRxScheduler_(self, RxSchedulersSchedulers_io()));
  }
  return JreLoadVolatileId(&rxTxIo_);
}

- (void)__javaClone:(OrgGreenrobotGreendaoAbstractDaoSession *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&rxTxPlain_, &original->rxTxPlain_);
  JreCloneVolatileStrong(&rxTxIo_, &original->rxTxIo_);
}

- (void)dealloc {
  RELEASE_(db_);
  RELEASE_(entityToDao_);
  JreReleaseVolatile(&rxTxPlain_);
  JreReleaseVolatile(&rxTxIo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "J", 0x1, 7, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 11, 5, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 18, 13, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x81, 20, 21, -1, 22, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryQueryBuilder;", 0x1, 23, 13, -1, 24, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAbstractDao;", 0x1, 25, 13, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 30, 31, 32, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 30, -1, 32, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoDatabaseDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAsyncAsyncSession;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoRxRxTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoRxRxTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoDatabaseDatabase:);
  methods[1].selector = @selector(registerDaoWithIOSClass:withOrgGreenrobotGreendaoAbstractDao:);
  methods[2].selector = @selector(insertWithId:);
  methods[3].selector = @selector(insertOrReplaceWithId:);
  methods[4].selector = @selector(refreshWithId:);
  methods[5].selector = @selector(updateWithId:);
  methods[6].selector = @selector(delete__WithId:);
  methods[7].selector = @selector(deleteAllWithIOSClass:);
  methods[8].selector = @selector(load__WithIOSClass:withId:);
  methods[9].selector = @selector(loadAllWithIOSClass:);
  methods[10].selector = @selector(queryRawWithIOSClass:withNSString:withNSStringArray:);
  methods[11].selector = @selector(queryBuilderWithIOSClass:);
  methods[12].selector = @selector(getDaoWithIOSClass:);
  methods[13].selector = @selector(runInTxWithJavaLangRunnable:);
  methods[14].selector = @selector(callInTxWithJavaUtilConcurrentCallable:);
  methods[15].selector = @selector(callInTxNoExceptionWithJavaUtilConcurrentCallable:);
  methods[16].selector = @selector(getDatabase);
  methods[17].selector = @selector(getAllDaos);
  methods[18].selector = @selector(startAsyncSession);
  methods[19].selector = @selector(rxTxPlain);
  methods[20].selector = @selector(rxTx);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "db_", "LOrgGreenrobotGreendaoDatabaseDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entityToDao_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "rxTxPlain_", "LOrgGreenrobotGreendaoRxRxTransaction;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "rxTxIo_", "LOrgGreenrobotGreendaoRxRxTransaction;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoDatabaseDatabase;", "registerDao", "LIOSClass;LOrgGreenrobotGreendaoAbstractDao;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lorg/greenrobot/greendao/AbstractDao<TT;*>;)V", "insert", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)J", "insertOrReplace", "refresh", "<T:Ljava/lang/Object;>(TT;)V", "update", "delete", "deleteAll", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)V", "load", "LIOSClass;LNSObject;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;TK;)TT;", "loadAll", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;", "queryRaw", "LIOSClass;LNSString;[LNSString;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List<TT;>;", "queryBuilder", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/greenrobot/greendao/query/QueryBuilder<TT;>;", "getDao", "(Ljava/lang/Class<+Ljava/lang/Object;>;)Lorg/greenrobot/greendao/AbstractDao<**>;", "runInTx", "LJavaLangRunnable;", "callInTx", "LJavaUtilConcurrentCallable;", "LJavaLangException;", "<V:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TV;>;)TV;", "callInTxNoException", "()Ljava/util/Collection<Lorg/greenrobot/greendao/AbstractDao<**>;>;", "Ljava/util/Map<Ljava/lang/Class<*>;Lorg/greenrobot/greendao/AbstractDao<**>;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoAbstractDaoSession = { "AbstractDaoSession", "org.greenrobot.greendao", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoAbstractDaoSession;
}

@end

void OrgGreenrobotGreendaoAbstractDaoSession_initWithOrgGreenrobotGreendaoDatabaseDatabase_(OrgGreenrobotGreendaoAbstractDaoSession *self, id<OrgGreenrobotGreendaoDatabaseDatabase> db) {
  NSObject_init(self);
  JreStrongAssign(&self->db_, db);
  JreStrongAssignAndConsume(&self->entityToDao_, new_JavaUtilHashMap_init());
}

OrgGreenrobotGreendaoAbstractDaoSession *new_OrgGreenrobotGreendaoAbstractDaoSession_initWithOrgGreenrobotGreendaoDatabaseDatabase_(id<OrgGreenrobotGreendaoDatabaseDatabase> db) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoAbstractDaoSession, initWithOrgGreenrobotGreendaoDatabaseDatabase_, db)
}

OrgGreenrobotGreendaoAbstractDaoSession *create_OrgGreenrobotGreendaoAbstractDaoSession_initWithOrgGreenrobotGreendaoDatabaseDatabase_(id<OrgGreenrobotGreendaoDatabaseDatabase> db) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoAbstractDaoSession, initWithOrgGreenrobotGreendaoDatabaseDatabase_, db)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoAbstractDaoSession)
