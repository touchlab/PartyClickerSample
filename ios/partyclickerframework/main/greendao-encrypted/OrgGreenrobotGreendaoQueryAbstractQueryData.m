//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoQueryAbstractQuery.h"
#include "OrgGreenrobotGreendaoQueryAbstractQueryData.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation OrgGreenrobotGreendaoQueryAbstractQueryData

- (instancetype)initWithOrgGreenrobotGreendaoAbstractDao:(OrgGreenrobotGreendaoAbstractDao *)dao
                                            withNSString:(NSString *)sql
                                       withNSStringArray:(IOSObjectArray *)initialValues {
  OrgGreenrobotGreendaoQueryAbstractQueryData_initWithOrgGreenrobotGreendaoAbstractDao_withNSString_withNSStringArray_(self, dao, sql, initialValues);
  return self;
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)forCurrentThreadWithOrgGreenrobotGreendaoQueryAbstractQuery:(OrgGreenrobotGreendaoQueryAbstractQuery *)query {
  if (JavaLangThread_currentThread() == ((OrgGreenrobotGreendaoQueryAbstractQuery *) nil_chk(query))->ownerThread_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(initialValues_, 0, query->parameters_, 0, ((IOSObjectArray *) nil_chk(initialValues_))->size_);
    return query;
  }
  else {
    return [self forCurrentThread];
  }
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)forCurrentThread {
  jlong threadId = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
  @synchronized(queriesForThreads_) {
    JavaLangRefWeakReference *queryRef = [((id<JavaUtilMap>) nil_chk(queriesForThreads_)) getWithId:JavaLangLong_valueOfWithLong_(threadId)];
    OrgGreenrobotGreendaoQueryAbstractQuery *query = queryRef != nil ? [queryRef get] : nil;
    if (query == nil) {
      [self gc];
      query = [self createQuery];
      [queriesForThreads_ putWithId:JavaLangLong_valueOfWithLong_(threadId) withId:create_JavaLangRefWeakReference_initWithId_(query)];
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(initialValues_, 0, query->parameters_, 0, ((IOSObjectArray *) nil_chk(initialValues_))->size_);
    }
    return query;
  }
}

- (OrgGreenrobotGreendaoQueryAbstractQuery *)createQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)gc {
  @synchronized(queriesForThreads_) {
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(queriesForThreads_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [iterator next];
      if ([((JavaLangRefWeakReference *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) get] == nil) {
        [iterator remove];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(sql_);
  RELEASE_(dao_);
  RELEASE_(initialValues_);
  RELEASE_(queriesForThreads_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x0, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoQueryAbstractQuery;", 0x404, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoAbstractDao:withNSString:withNSStringArray:);
  methods[1].selector = @selector(forCurrentThreadWithOrgGreenrobotGreendaoQueryAbstractQuery:);
  methods[2].selector = @selector(forCurrentThread);
  methods[3].selector = @selector(createQuery);
  methods[4].selector = @selector(gc);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sql_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "dao_", "LOrgGreenrobotGreendaoAbstractDao;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "initialValues_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queriesForThreads_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoAbstractDao;LNSString;[LNSString;", "(Lorg/greenrobot/greendao/AbstractDao<TT;*>;Ljava/lang/String;[Ljava/lang/String;)V", "forCurrentThread", "LOrgGreenrobotGreendaoQueryAbstractQuery;", "(TQ;)TQ;", "()TQ;", "Lorg/greenrobot/greendao/AbstractDao<TT;*>;", "Ljava/util/Map<Ljava/lang/Long;Ljava/lang/ref/WeakReference<TQ;>;>;", "<T:Ljava/lang/Object;Q:Lorg/greenrobot/greendao/query/AbstractQuery<TT;>;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoQueryAbstractQueryData = { "AbstractQueryData", "org.greenrobot.greendao.query", ptrTable, methods, fields, 7, 0x400, 5, 4, -1, -1, -1, 8, -1 };
  return &_OrgGreenrobotGreendaoQueryAbstractQueryData;
}

@end

void OrgGreenrobotGreendaoQueryAbstractQueryData_initWithOrgGreenrobotGreendaoAbstractDao_withNSString_withNSStringArray_(OrgGreenrobotGreendaoQueryAbstractQueryData *self, OrgGreenrobotGreendaoAbstractDao *dao, NSString *sql, IOSObjectArray *initialValues) {
  NSObject_init(self);
  JreStrongAssign(&self->dao_, dao);
  JreStrongAssign(&self->sql_, sql);
  JreStrongAssign(&self->initialValues_, initialValues);
  JreStrongAssignAndConsume(&self->queriesForThreads_, new_JavaUtilHashMap_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoQueryAbstractQueryData)
