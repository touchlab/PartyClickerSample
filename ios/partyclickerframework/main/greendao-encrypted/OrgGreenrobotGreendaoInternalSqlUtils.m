//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoInternalSqlUtils.h"
#include "OrgGreenrobotGreendaoProperty.h"
#include "java/lang/StringBuilder.h"

inline IOSCharArray *OrgGreenrobotGreendaoInternalSqlUtils_get_HEX_ARRAY();
static IOSCharArray *OrgGreenrobotGreendaoInternalSqlUtils_HEX_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgGreenrobotGreendaoInternalSqlUtils, HEX_ARRAY, IOSCharArray *)

J2OBJC_INITIALIZED_DEFN(OrgGreenrobotGreendaoInternalSqlUtils)

@implementation OrgGreenrobotGreendaoInternalSqlUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoInternalSqlUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangStringBuilder *)appendPropertyWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                      withNSString:(NSString *)tablePrefix
                                 withOrgGreenrobotGreendaoProperty:(OrgGreenrobotGreendaoProperty *)property {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendPropertyWithJavaLangStringBuilder_withNSString_withOrgGreenrobotGreendaoProperty_(builder, tablePrefix, property);
}

+ (JavaLangStringBuilder *)appendColumnWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                    withNSString:(NSString *)column {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_(builder, column);
}

+ (JavaLangStringBuilder *)appendColumnWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                    withNSString:(NSString *)tableAlias
                                                    withNSString:(NSString *)column {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_withNSString_(builder, tableAlias, column);
}

+ (JavaLangStringBuilder *)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                     withNSString:(NSString *)tableAlias
                                                withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, tableAlias, columns);
}

+ (JavaLangStringBuilder *)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(builder, columns);
}

+ (JavaLangStringBuilder *)appendPlaceholdersWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                               withInt:(jint)count {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendPlaceholdersWithJavaLangStringBuilder_withInt_(builder, count);
}

+ (JavaLangStringBuilder *)appendColumnsEqualPlaceholdersWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                                 withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqualPlaceholdersWithJavaLangStringBuilder_withNSStringArray_(builder, columns);
}

+ (JavaLangStringBuilder *)appendColumnsEqValueWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                            withNSString:(NSString *)tableAlias
                                                       withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, tableAlias, columns);
}

+ (NSString *)createSqlInsertWithNSString:(NSString *)insertInto
                             withNSString:(NSString *)tablename
                        withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlInsertWithNSString_withNSString_withNSStringArray_(insertInto, tablename, columns);
}

+ (NSString *)createSqlSelectWithNSString:(NSString *)tablename
                             withNSString:(NSString *)tableAlias
                        withNSStringArray:(IOSObjectArray *)columns
                              withBoolean:(jboolean)distinct {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectWithNSString_withNSString_withNSStringArray_withBoolean_(tablename, tableAlias, columns, distinct);
}

+ (NSString *)createSqlSelectCountStarWithNSString:(NSString *)tablename
                                      withNSString:(NSString *)tableAliasOrNull {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectCountStarWithNSString_withNSString_(tablename, tableAliasOrNull);
}

+ (NSString *)createSqlDeleteWithNSString:(NSString *)tablename
                        withNSStringArray:(IOSObjectArray *)columns {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlDeleteWithNSString_withNSStringArray_(tablename, columns);
}

+ (NSString *)createSqlUpdateWithNSString:(NSString *)tablename
                        withNSStringArray:(IOSObjectArray *)updateColumns
                        withNSStringArray:(IOSObjectArray *)whereColumns {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlUpdateWithNSString_withNSStringArray_withNSStringArray_(tablename, updateColumns, whereColumns);
}

+ (NSString *)createSqlCountWithNSString:(NSString *)tablename {
  return OrgGreenrobotGreendaoInternalSqlUtils_createSqlCountWithNSString_(tablename);
}

+ (NSString *)escapeBlobArgumentWithByteArray:(IOSByteArray *)bytes {
  return OrgGreenrobotGreendaoInternalSqlUtils_escapeBlobArgumentWithByteArray_(bytes);
}

+ (NSString *)toHexWithByteArray:(IOSByteArray *)bytes {
  return OrgGreenrobotGreendaoInternalSqlUtils_toHexWithByteArray_(bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 10, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x9, 11, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(appendPropertyWithJavaLangStringBuilder:withNSString:withOrgGreenrobotGreendaoProperty:);
  methods[2].selector = @selector(appendColumnWithJavaLangStringBuilder:withNSString:);
  methods[3].selector = @selector(appendColumnWithJavaLangStringBuilder:withNSString:withNSString:);
  methods[4].selector = @selector(appendColumnsWithJavaLangStringBuilder:withNSString:withNSStringArray:);
  methods[5].selector = @selector(appendColumnsWithJavaLangStringBuilder:withNSStringArray:);
  methods[6].selector = @selector(appendPlaceholdersWithJavaLangStringBuilder:withInt:);
  methods[7].selector = @selector(appendColumnsEqualPlaceholdersWithJavaLangStringBuilder:withNSStringArray:);
  methods[8].selector = @selector(appendColumnsEqValueWithJavaLangStringBuilder:withNSString:withNSStringArray:);
  methods[9].selector = @selector(createSqlInsertWithNSString:withNSString:withNSStringArray:);
  methods[10].selector = @selector(createSqlSelectWithNSString:withNSString:withNSStringArray:withBoolean:);
  methods[11].selector = @selector(createSqlSelectCountStarWithNSString:withNSString:);
  methods[12].selector = @selector(createSqlDeleteWithNSString:withNSStringArray:);
  methods[13].selector = @selector(createSqlUpdateWithNSString:withNSStringArray:withNSStringArray:);
  methods[14].selector = @selector(createSqlCountWithNSString:);
  methods[15].selector = @selector(escapeBlobArgumentWithByteArray:);
  methods[16].selector = @selector(toHexWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_ARRAY", "[C", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
  };
  static const void *ptrTable[] = { "appendProperty", "LJavaLangStringBuilder;LNSString;LOrgGreenrobotGreendaoProperty;", "appendColumn", "LJavaLangStringBuilder;LNSString;", "LJavaLangStringBuilder;LNSString;LNSString;", "appendColumns", "LJavaLangStringBuilder;LNSString;[LNSString;", "LJavaLangStringBuilder;[LNSString;", "appendPlaceholders", "LJavaLangStringBuilder;I", "appendColumnsEqualPlaceholders", "appendColumnsEqValue", "createSqlInsert", "LNSString;LNSString;[LNSString;", "createSqlSelect", "LNSString;LNSString;[LNSString;Z", "createSqlSelectCountStar", "LNSString;LNSString;", "createSqlDelete", "LNSString;[LNSString;", "createSqlUpdate", "LNSString;[LNSString;[LNSString;", "createSqlCount", "LNSString;", "escapeBlobArgument", "[B", "toHex", &OrgGreenrobotGreendaoInternalSqlUtils_HEX_ARRAY };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoInternalSqlUtils = { "SqlUtils", "org.greenrobot.greendao.internal", ptrTable, methods, fields, 7, 0x1, 17, 1, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoInternalSqlUtils;
}

+ (void)initialize {
  if (self == [OrgGreenrobotGreendaoInternalSqlUtils class]) {
    JreStrongAssign(&OrgGreenrobotGreendaoInternalSqlUtils_HEX_ARRAY, [@"0123456789ABCDEF" java_toCharArray]);
    J2OBJC_SET_INITIALIZED(OrgGreenrobotGreendaoInternalSqlUtils)
  }
}

@end

void OrgGreenrobotGreendaoInternalSqlUtils_init(OrgGreenrobotGreendaoInternalSqlUtils *self) {
  NSObject_init(self);
}

OrgGreenrobotGreendaoInternalSqlUtils *new_OrgGreenrobotGreendaoInternalSqlUtils_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoInternalSqlUtils, init)
}

OrgGreenrobotGreendaoInternalSqlUtils *create_OrgGreenrobotGreendaoInternalSqlUtils_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoInternalSqlUtils, init)
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendPropertyWithJavaLangStringBuilder_withNSString_withOrgGreenrobotGreendaoProperty_(JavaLangStringBuilder *builder, NSString *tablePrefix, OrgGreenrobotGreendaoProperty *property) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  if (tablePrefix != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:tablePrefix])) appendWithChar:'.'];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'"'])) appendWithNSString:((OrgGreenrobotGreendaoProperty *) nil_chk(property))->columnName_])) appendWithChar:'"'];
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *builder, NSString *column) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'"'])) appendWithNSString:column])) appendWithChar:'"'];
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *builder, NSString *tableAlias, NSString *column) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:tableAlias])) appendWithNSString:@".\""])) appendWithNSString:column])) appendWithChar:'"'];
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSString_withNSStringArray_(JavaLangStringBuilder *builder, NSString *tableAlias, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < length; i++) {
    OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_withNSString_(builder, tableAlias, IOSObjectArray_Get(columns, i));
    if (i < length - 1) {
      [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:','];
    }
  }
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *builder, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < length; i++) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'"'])) appendWithNSString:IOSObjectArray_Get(columns, i)])) appendWithChar:'"'];
    if (i < length - 1) {
      [builder appendWithChar:','];
    }
  }
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendPlaceholdersWithJavaLangStringBuilder_withInt_(JavaLangStringBuilder *builder, jint count) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  for (jint i = 0; i < count; i++) {
    if (i < count - 1) {
      [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"?,"];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'?'];
    }
  }
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqualPlaceholdersWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *builder, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(columns))->size_; i++) {
    [((JavaLangStringBuilder *) nil_chk(OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_(builder, IOSObjectArray_Get(columns, i)))) appendWithNSString:@"=?"];
    if (i < columns->size_ - 1) {
      [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:','];
    }
  }
  return builder;
}

JavaLangStringBuilder *OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(JavaLangStringBuilder *builder, NSString *tableAlias, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(columns))->size_; i++) {
    [((JavaLangStringBuilder *) nil_chk(OrgGreenrobotGreendaoInternalSqlUtils_appendColumnWithJavaLangStringBuilder_withNSString_withNSString_(builder, tableAlias, IOSObjectArray_Get(columns, i)))) appendWithNSString:@"=?"];
    if (i < columns->size_ - 1) {
      [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:','];
    }
  }
  return builder;
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlInsertWithNSString_withNSString_withNSStringArray_(NSString *insertInto, NSString *tablename, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(insertInto);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'"'])) appendWithNSString:tablename])) appendWithChar:'"'])) appendWithNSString:@" ("];
  OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(builder, columns);
  [builder appendWithNSString:@") VALUES ("];
  OrgGreenrobotGreendaoInternalSqlUtils_appendPlaceholdersWithJavaLangStringBuilder_withInt_(builder, ((IOSObjectArray *) nil_chk(columns))->size_);
  [builder appendWithChar:')'];
  return [builder description];
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectWithNSString_withNSString_withNSStringArray_withBoolean_(NSString *tablename, NSString *tableAlias, IOSObjectArray *columns, jboolean distinct) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  if (tableAlias == nil || [tableAlias java_length] < 0) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Table alias required");
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(distinct ? @"SELECT DISTINCT " : @"SELECT ");
  [((JavaLangStringBuilder *) nil_chk(OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, tableAlias, columns))) appendWithNSString:@" FROM "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'"'])) appendWithNSString:tablename])) appendWithChar:'"'])) appendWithChar:' '])) appendWithNSString:tableAlias])) appendWithChar:' '];
  return [builder description];
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlSelectCountStarWithNSString_withNSString_(NSString *tablename, NSString *tableAliasOrNull) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(@"SELECT COUNT(*) FROM ");
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'"'])) appendWithNSString:tablename])) appendWithChar:'"'])) appendWithChar:' '];
  if (tableAliasOrNull != nil) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:tableAliasOrNull])) appendWithChar:' '];
  }
  return [builder description];
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlDeleteWithNSString_withNSStringArray_(NSString *tablename, IOSObjectArray *columns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  NSString *quotedTablename = JreStrcat("C$C", '"', tablename, '"');
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(@"DELETE FROM ");
  [builder appendWithNSString:quotedTablename];
  if (columns != nil && columns->size_ > 0) {
    [builder appendWithNSString:@" WHERE "];
    OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, quotedTablename, columns);
  }
  return [builder description];
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlUpdateWithNSString_withNSStringArray_withNSStringArray_(NSString *tablename, IOSObjectArray *updateColumns, IOSObjectArray *whereColumns) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  NSString *quotedTablename = JreStrcat("C$C", '"', tablename, '"');
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(@"UPDATE ");
  [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:quotedTablename])) appendWithNSString:@" SET "];
  OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqualPlaceholdersWithJavaLangStringBuilder_withNSStringArray_(builder, updateColumns);
  [builder appendWithNSString:@" WHERE "];
  OrgGreenrobotGreendaoInternalSqlUtils_appendColumnsEqValueWithJavaLangStringBuilder_withNSString_withNSStringArray_(builder, quotedTablename, whereColumns);
  return [builder description];
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_createSqlCountWithNSString_(NSString *tablename) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  return JreStrcat("$$C", @"SELECT COUNT(*) FROM \"", tablename, '"');
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_escapeBlobArgumentWithByteArray_(IOSByteArray *bytes) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  return JreStrcat("$$C", @"X'", OrgGreenrobotGreendaoInternalSqlUtils_toHexWithByteArray_(bytes), '\'');
}

NSString *OrgGreenrobotGreendaoInternalSqlUtils_toHexWithByteArray_(IOSByteArray *bytes) {
  OrgGreenrobotGreendaoInternalSqlUtils_initialize();
  IOSCharArray *hexChars = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 2];
  for (jint i = 0; i < bytes->size_; i++) {
    jint byteValue = IOSByteArray_Get(bytes, i) & (jint) 0xFF;
    *IOSCharArray_GetRef(hexChars, i * 2) = IOSCharArray_Get(nil_chk(OrgGreenrobotGreendaoInternalSqlUtils_HEX_ARRAY), JreURShift32(byteValue, 4));
    *IOSCharArray_GetRef(hexChars, i * 2 + 1) = IOSCharArray_Get(OrgGreenrobotGreendaoInternalSqlUtils_HEX_ARRAY, byteValue & (jint) 0x0F);
  }
  return [NSString java_stringWithCharacters:hexChars];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoInternalSqlUtils)
