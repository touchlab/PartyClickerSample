//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetSqlcipherDatabaseSQLiteStatement.h"
#include "OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement.h"

@interface OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement () {
 @public
  NetSqlcipherDatabaseSQLiteStatement *delegate_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement, delegate_, NetSqlcipherDatabaseSQLiteStatement *)

@implementation OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement

- (instancetype)initWithNetSqlcipherDatabaseSQLiteStatement:(NetSqlcipherDatabaseSQLiteStatement *)delegate {
  OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement_initWithNetSqlcipherDatabaseSQLiteStatement_(self, delegate);
  return self;
}

- (void)execute {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) execute];
}

- (jlong)simpleQueryForLong {
  return [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) simpleQueryForLong];
}

- (void)bindNullWithInt:(jint)index {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) bindNullWithInt:index];
}

- (jlong)executeInsert {
  return [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) executeInsert];
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) bindStringWithInt:index withNSString:value];
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) bindBlobWithInt:index withByteArray:value];
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) bindLongWithInt:index withLong:value];
}

- (void)clearBindings {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) clearBindings];
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) bindDoubleWithInt:index withDouble:value];
}

- (void)close {
  [((NetSqlcipherDatabaseSQLiteStatement *) nil_chk(delegate_)) close];
}

- (id)getRawStatement {
  return delegate_;
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetSqlcipherDatabaseSQLiteStatement:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(simpleQueryForLong);
  methods[3].selector = @selector(bindNullWithInt:);
  methods[4].selector = @selector(executeInsert);
  methods[5].selector = @selector(bindStringWithInt:withNSString:);
  methods[6].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[7].selector = @selector(bindLongWithInt:withLong:);
  methods[8].selector = @selector(clearBindings);
  methods[9].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[10].selector = @selector(close);
  methods[11].selector = @selector(getRawStatement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LNetSqlcipherDatabaseSQLiteStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetSqlcipherDatabaseSQLiteStatement;", "bindNull", "I", "bindString", "ILNSString;", "bindBlob", "I[B", "bindLong", "IJ", "bindDouble", "ID" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement = { "EncryptedDatabaseStatement", "org.greenrobot.greendao.database", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement;
}

@end

void OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement_initWithNetSqlcipherDatabaseSQLiteStatement_(OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement *self, NetSqlcipherDatabaseSQLiteStatement *delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, delegate);
}

OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement *new_OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement_initWithNetSqlcipherDatabaseSQLiteStatement_(NetSqlcipherDatabaseSQLiteStatement *delegate) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement, initWithNetSqlcipherDatabaseSQLiteStatement_, delegate)
}

OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement *create_OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement_initWithNetSqlcipherDatabaseSQLiteStatement_(NetSqlcipherDatabaseSQLiteStatement *delegate) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement, initWithNetSqlcipherDatabaseSQLiteStatement_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoDatabaseEncryptedDatabaseStatement)
