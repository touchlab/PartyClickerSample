//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement.h"

@interface OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement () {
 @public
  AndroidDatabaseSqliteSQLiteStatement *delegate_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement, delegate_, AndroidDatabaseSqliteSQLiteStatement *)

@implementation OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement

- (instancetype)initWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)delegate {
  OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(self, delegate);
  return self;
}

- (void)execute {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) execute];
}

- (jlong)simpleQueryForLong {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) simpleQueryForLong];
}

- (void)bindNullWithInt:(jint)index {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) bindNullWithInt:index];
}

- (jlong)executeInsert {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) executeInsert];
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) bindStringWithInt:index withNSString:value];
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) bindBlobWithInt:index withByteArray:value];
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) bindLongWithInt:index withLong:value];
}

- (void)clearBindings {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) clearBindings];
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) bindDoubleWithInt:index withDouble:value];
}

- (void)close {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(delegate_)) close];
}

- (id)getRawStatement {
  return delegate_;
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteStatement:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(simpleQueryForLong);
  methods[3].selector = @selector(bindNullWithInt:);
  methods[4].selector = @selector(executeInsert);
  methods[5].selector = @selector(bindStringWithInt:withNSString:);
  methods[6].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[7].selector = @selector(bindLongWithInt:withLong:);
  methods[8].selector = @selector(clearBindings);
  methods[9].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[10].selector = @selector(close);
  methods[11].selector = @selector(getRawStatement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteStatement;", "bindNull", "I", "bindString", "ILNSString;", "bindBlob", "I[B", "bindLong", "IJ", "bindDouble", "ID" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement = { "StandardDatabaseStatement", "org.greenrobot.greendao.database", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement;
}

@end

void OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement *self, AndroidDatabaseSqliteSQLiteStatement *delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, delegate);
}

OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement *new_OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *delegate) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement, initWithAndroidDatabaseSqliteSQLiteStatement_, delegate)
}

OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement *create_OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *delegate) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement, initWithAndroidDatabaseSqliteSQLiteStatement_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoDatabaseStandardDatabaseStatement)
