//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScope.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeType.h"
#include "OrgGreenrobotGreendaoInternalDaoConfig.h"
#include "OrgGreenrobotGreendaoInternalTableStatements.h"
#include "OrgGreenrobotGreendaoProperty.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgGreenrobotGreendaoInternalDaoConfig () {
 @public
  id<OrgGreenrobotGreendaoIdentityscopeIdentityScope> identityScope_;
}

+ (IOSObjectArray *)reflectPropertiesWithIOSClass:(IOSClass *)daoClass;

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoInternalDaoConfig, identityScope_, id<OrgGreenrobotGreendaoIdentityscopeIdentityScope>)

__attribute__((unused)) static IOSObjectArray *OrgGreenrobotGreendaoInternalDaoConfig_reflectPropertiesWithIOSClass_(IOSClass *daoClass);

@implementation OrgGreenrobotGreendaoInternalDaoConfig

- (instancetype)initWithOrgGreenrobotGreendaoDatabaseDatabase:(id<OrgGreenrobotGreendaoDatabaseDatabase>)db
                                                 withIOSClass:(IOSClass *)daoClass {
  OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_(self, db, daoClass);
  return self;
}

+ (IOSObjectArray *)reflectPropertiesWithIOSClass:(IOSClass *)daoClass {
  return OrgGreenrobotGreendaoInternalDaoConfig_reflectPropertiesWithIOSClass_(daoClass);
}

- (instancetype)initWithOrgGreenrobotGreendaoInternalDaoConfig:(OrgGreenrobotGreendaoInternalDaoConfig *)source {
  OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoInternalDaoConfig_(self, source);
  return self;
}

- (OrgGreenrobotGreendaoInternalDaoConfig *)java_clone {
  return create_OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoInternalDaoConfig_(self);
}

- (id<OrgGreenrobotGreendaoIdentityscopeIdentityScope>)getIdentityScope {
  return identityScope_;
}

- (void)clearIdentityScope {
  id<OrgGreenrobotGreendaoIdentityscopeIdentityScope> identityScope = self->identityScope_;
  if (identityScope != nil) {
    [identityScope clear];
  }
}

- (void)setIdentityScopeWithOrgGreenrobotGreendaoIdentityscopeIdentityScope:(id<OrgGreenrobotGreendaoIdentityscopeIdentityScope>)identityScope {
  JreStrongAssign(&self->identityScope_, identityScope);
}

- (void)initIdentityScopeWithOrgGreenrobotGreendaoIdentityscopeIdentityScopeType:(OrgGreenrobotGreendaoIdentityscopeIdentityScopeType *)type {
  if (type == JreLoadEnum(OrgGreenrobotGreendaoIdentityscopeIdentityScopeType, None)) {
    JreStrongAssign(&identityScope_, nil);
  }
  else if (type == JreLoadEnum(OrgGreenrobotGreendaoIdentityscopeIdentityScopeType, Session)) {
    if (keyIsNumeric_) {
      JreStrongAssignAndConsume(&identityScope_, new_OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong_init());
    }
    else {
      JreStrongAssignAndConsume(&identityScope_, new_OrgGreenrobotGreendaoIdentityscopeIdentityScopeObject_init());
    }
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unsupported type: ", type));
  }
}

- (void)dealloc {
  RELEASE_(db_);
  RELEASE_(tablename_);
  RELEASE_(properties_);
  RELEASE_(allColumns_);
  RELEASE_(pkColumns_);
  RELEASE_(nonPkColumns_);
  RELEASE_(pkProperty_);
  RELEASE_(statements_);
  RELEASE_(identityScope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "[LOrgGreenrobotGreendaoProperty;", 0xa, 2, 3, 4, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoInternalDaoConfig;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoIdentityscopeIdentityScope;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgGreenrobotGreendaoDatabaseDatabase:withIOSClass:);
  methods[1].selector = @selector(reflectPropertiesWithIOSClass:);
  methods[2].selector = @selector(initWithOrgGreenrobotGreendaoInternalDaoConfig:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(getIdentityScope);
  methods[5].selector = @selector(clearIdentityScope);
  methods[6].selector = @selector(setIdentityScopeWithOrgGreenrobotGreendaoIdentityscopeIdentityScope:);
  methods[7].selector = @selector(initIdentityScopeWithOrgGreenrobotGreendaoIdentityscopeIdentityScopeType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "db_", "LOrgGreenrobotGreendaoDatabaseDatabase;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tablename_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "properties_", "[LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "allColumns_", "[LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "pkColumns_", "[LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "nonPkColumns_", "[LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "pkProperty_", "LOrgGreenrobotGreendaoProperty;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "keyIsNumeric_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "statements_", "LOrgGreenrobotGreendaoInternalTableStatements;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "identityScope_", "LOrgGreenrobotGreendaoIdentityscopeIdentityScope;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "LOrgGreenrobotGreendaoDatabaseDatabase;LIOSClass;", "(Lorg/greenrobot/greendao/database/Database;Ljava/lang/Class<+Lorg/greenrobot/greendao/AbstractDao<**>;>;)V", "reflectProperties", "LIOSClass;", "LJavaLangClassNotFoundException;LJavaLangIllegalArgumentException;LJavaLangIllegalAccessException;", "(Ljava/lang/Class<+Lorg/greenrobot/greendao/AbstractDao<**>;>;)[Lorg/greenrobot/greendao/Property;", "LOrgGreenrobotGreendaoInternalDaoConfig;", "clone", "()Lorg/greenrobot/greendao/identityscope/IdentityScope<**>;", "setIdentityScope", "LOrgGreenrobotGreendaoIdentityscopeIdentityScope;", "(Lorg/greenrobot/greendao/identityscope/IdentityScope<**>;)V", "initIdentityScope", "LOrgGreenrobotGreendaoIdentityscopeIdentityScopeType;", "Lorg/greenrobot/greendao/identityscope/IdentityScope<**>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoInternalDaoConfig = { "DaoConfig", "org.greenrobot.greendao.internal", ptrTable, methods, fields, 7, 0x11, 8, 10, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoInternalDaoConfig;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_(OrgGreenrobotGreendaoInternalDaoConfig *self, id<OrgGreenrobotGreendaoDatabaseDatabase> db, IOSClass *daoClass) {
  NSObject_init(self);
  JreStrongAssign(&self->db_, db);
  @try {
    JreStrongAssign(&self->tablename_, (NSString *) cast_chk([((JavaLangReflectField *) nil_chk([((IOSClass *) nil_chk(daoClass)) getField:@"TABLENAME"])) getWithId:nil], [NSString class]));
    IOSObjectArray *properties = OrgGreenrobotGreendaoInternalDaoConfig_reflectPropertiesWithIOSClass_(daoClass);
    JreStrongAssign(&self->properties_, properties);
    JreStrongAssignAndConsume(&self->allColumns_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(properties))->size_ type:NSString_class_()]);
    id<JavaUtilList> pkColumnList = create_JavaUtilArrayList_init();
    id<JavaUtilList> nonPkColumnList = create_JavaUtilArrayList_init();
    OrgGreenrobotGreendaoProperty *lastPkProperty = nil;
    for (jint i = 0; i < properties->size_; i++) {
      OrgGreenrobotGreendaoProperty *property = IOSObjectArray_Get(properties, i);
      NSString *name = ((OrgGreenrobotGreendaoProperty *) nil_chk(property))->columnName_;
      IOSObjectArray_Set(self->allColumns_, i, name);
      if (property->primaryKey_) {
        [pkColumnList addWithId:name];
        lastPkProperty = property;
      }
      else {
        [nonPkColumnList addWithId:name];
      }
    }
    IOSObjectArray *nonPkColumnsArray = [IOSObjectArray arrayWithLength:[nonPkColumnList size] type:NSString_class_()];
    JreStrongAssign(&self->nonPkColumns_, [nonPkColumnList toArrayWithNSObjectArray:nonPkColumnsArray]);
    IOSObjectArray *pkColumnsArray = [IOSObjectArray arrayWithLength:[pkColumnList size] type:NSString_class_()];
    JreStrongAssign(&self->pkColumns_, [pkColumnList toArrayWithNSObjectArray:pkColumnsArray]);
    JreStrongAssign(&self->pkProperty_, ((IOSObjectArray *) nil_chk(self->pkColumns_))->size_ == 1 ? lastPkProperty : nil);
    JreStrongAssignAndConsume(&self->statements_, new_OrgGreenrobotGreendaoInternalTableStatements_initWithOrgGreenrobotGreendaoDatabaseDatabase_withNSString_withNSStringArray_withNSStringArray_(db, self->tablename_, self->allColumns_, self->pkColumns_));
    if (self->pkProperty_ != nil) {
      IOSClass *type = self->pkProperty_->type_;
      self->keyIsNumeric_ = ([((IOSClass *) nil_chk(type)) isEqual:[IOSClass longClass]] || [type isEqual:JavaLangLong_class_()] || [type isEqual:[IOSClass intClass]] || [type isEqual:JavaLangInteger_class_()] || [type isEqual:[IOSClass shortClass]] || [type isEqual:JavaLangShort_class_()] || [type isEqual:[IOSClass byteClass]] || [type isEqual:JavaLangByte_class_()]);
    }
    else {
      self->keyIsNumeric_ = false;
    }
  }
  @catch (JavaLangException *e) {
    @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_withNSException_(@"Could not init DAOConfig", e);
  }
}

OrgGreenrobotGreendaoInternalDaoConfig *new_OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, IOSClass *daoClass) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoInternalDaoConfig, initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_, db, daoClass)
}

OrgGreenrobotGreendaoInternalDaoConfig *create_OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_(id<OrgGreenrobotGreendaoDatabaseDatabase> db, IOSClass *daoClass) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoInternalDaoConfig, initWithOrgGreenrobotGreendaoDatabaseDatabase_withIOSClass_, db, daoClass)
}

IOSObjectArray *OrgGreenrobotGreendaoInternalDaoConfig_reflectPropertiesWithIOSClass_(IOSClass *daoClass) {
  OrgGreenrobotGreendaoInternalDaoConfig_initialize();
  IOSClass *propertiesClass = IOSClass_forName_(JreStrcat("$$", [((IOSClass *) nil_chk(daoClass)) getName], @"$Properties"));
  IOSObjectArray *fields = [((IOSClass *) nil_chk(propertiesClass)) getDeclaredFields];
  JavaUtilArrayList *propertyList = create_JavaUtilArrayList_init();
  jint modifierMask = JavaLangReflectModifier_STATIC | JavaLangReflectModifier_PUBLIC;
  {
    IOSObjectArray *a__ = fields;
    JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectField * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectField *field = *b__++;
      if (([((JavaLangReflectField *) nil_chk(field)) getModifiers] & modifierMask) == modifierMask) {
        id fieldValue = [field getWithId:nil];
        if ([fieldValue isKindOfClass:[OrgGreenrobotGreendaoProperty class]]) {
          [propertyList addWithId:(OrgGreenrobotGreendaoProperty *) cast_chk(fieldValue, [OrgGreenrobotGreendaoProperty class])];
        }
      }
    }
  }
  IOSObjectArray *properties = [IOSObjectArray arrayWithLength:[propertyList size] type:OrgGreenrobotGreendaoProperty_class_()];
  for (OrgGreenrobotGreendaoProperty * __strong property in propertyList) {
    if (IOSObjectArray_Get(properties, ((OrgGreenrobotGreendaoProperty *) nil_chk(property))->ordinal_) != nil) {
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Duplicate property ordinals");
    }
    IOSObjectArray_Set(properties, property->ordinal_, property);
  }
  return properties;
}

void OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoInternalDaoConfig *self, OrgGreenrobotGreendaoInternalDaoConfig *source) {
  NSObject_init(self);
  JreStrongAssign(&self->db_, ((OrgGreenrobotGreendaoInternalDaoConfig *) nil_chk(source))->db_);
  JreStrongAssign(&self->tablename_, source->tablename_);
  JreStrongAssign(&self->properties_, source->properties_);
  JreStrongAssign(&self->allColumns_, source->allColumns_);
  JreStrongAssign(&self->pkColumns_, source->pkColumns_);
  JreStrongAssign(&self->nonPkColumns_, source->nonPkColumns_);
  JreStrongAssign(&self->pkProperty_, source->pkProperty_);
  JreStrongAssign(&self->statements_, source->statements_);
  self->keyIsNumeric_ = source->keyIsNumeric_;
}

OrgGreenrobotGreendaoInternalDaoConfig *new_OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoInternalDaoConfig *source) {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoInternalDaoConfig, initWithOrgGreenrobotGreendaoInternalDaoConfig_, source)
}

OrgGreenrobotGreendaoInternalDaoConfig *create_OrgGreenrobotGreendaoInternalDaoConfig_initWithOrgGreenrobotGreendaoInternalDaoConfig_(OrgGreenrobotGreendaoInternalDaoConfig *source) {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoInternalDaoConfig, initWithOrgGreenrobotGreendaoInternalDaoConfig_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoInternalDaoConfig)
