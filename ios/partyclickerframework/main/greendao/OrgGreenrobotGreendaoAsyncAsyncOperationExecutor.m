//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "AndroidOsMessage.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoAbstractDao.h"
#include "OrgGreenrobotGreendaoAsyncAsyncOperation.h"
#include "OrgGreenrobotGreendaoAsyncAsyncOperationExecutor.h"
#include "OrgGreenrobotGreendaoAsyncAsyncOperationListener.h"
#include "OrgGreenrobotGreendaoDaoException.h"
#include "OrgGreenrobotGreendaoDaoLog.h"
#include "OrgGreenrobotGreendaoDatabaseDatabase.h"
#include "OrgGreenrobotGreendaoQueryQuery.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"

@interface OrgGreenrobotGreendaoAsyncAsyncOperationExecutor () {
 @public
  id<JavaUtilConcurrentBlockingQueue> queue_;
  volatile_jboolean executorRunning_;
  volatile_jint maxOperationCountToMerge_;
  volatile_id listener_;
  volatile_id listenerMainThread_;
  volatile_jint waitForMergeMillis_;
  jint countOperationsEnqueued_;
  jint countOperationsCompleted_;
  AndroidOsHandler *handlerMainThread_;
  jint lastSequenceNumber_;
}

- (void)mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation1
                         withOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation2;

- (void)handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation;

- (void)executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation;

- (void)executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation;

- (void)executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation;

- (void)executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation;

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, queue_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, listener_, id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, listenerMainThread_, id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, handlerMainThread_, AndroidOsHandler *)

inline id<JavaUtilConcurrentExecutorService> OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_get_executorService();
inline id<JavaUtilConcurrentExecutorService> OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_set_executorService(id<JavaUtilConcurrentExecutorService> value);
static id<JavaUtilConcurrentExecutorService> OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executorService;
J2OBJC_STATIC_FIELD_OBJ(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, executorService, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation_withOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation1, OrgGreenrobotGreendaoAsyncAsyncOperation *operation2);

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation);

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation);

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation);

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation);

__attribute__((unused)) static void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation);

J2OBJC_INITIALIZED_DEFN(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor)

@implementation OrgGreenrobotGreendaoAsyncAsyncOperationExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)enqueueWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  @synchronized(self) {
    ((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation))->sequenceNumber_ = ++lastSequenceNumber_;
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(queue_)) addWithId:operation];
    countOperationsEnqueued_++;
    if (!JreLoadVolatileBoolean(&executorRunning_)) {
      JreAssignVolatileBoolean(&executorRunning_, true);
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executorService)) executeWithJavaLangRunnable:self];
    }
  }
}

- (jint)getMaxOperationCountToMerge {
  return JreLoadVolatileInt(&maxOperationCountToMerge_);
}

- (void)setMaxOperationCountToMergeWithInt:(jint)maxOperationCountToMerge {
  JreAssignVolatileInt(&self->maxOperationCountToMerge_, maxOperationCountToMerge);
}

- (jint)getWaitForMergeMillis {
  return JreLoadVolatileInt(&waitForMergeMillis_);
}

- (void)setWaitForMergeMillisWithInt:(jint)waitForMergeMillis {
  JreAssignVolatileInt(&self->waitForMergeMillis_, waitForMergeMillis);
}

- (id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)getListener {
  return JreLoadVolatileId(&listener_);
}

- (void)setListenerWithOrgGreenrobotGreendaoAsyncAsyncOperationListener:(id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)listener {
  JreVolatileStrongAssign(&self->listener_, listener);
}

- (id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)getListenerMainThread {
  return JreLoadVolatileId(&listenerMainThread_);
}

- (void)setListenerMainThreadWithOrgGreenrobotGreendaoAsyncAsyncOperationListener:(id<OrgGreenrobotGreendaoAsyncAsyncOperationListener>)listenerMainThread {
  JreVolatileStrongAssign(&self->listenerMainThread_, listenerMainThread);
}

- (jboolean)isCompleted {
  @synchronized(self) {
    return countOperationsEnqueued_ == countOperationsCompleted_;
  }
}

- (void)waitForCompletion {
  @synchronized(self) {
    while (![self isCompleted]) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
        @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_withNSException_(@"Interrupted while waiting for all operations to complete", e);
      }
    }
  }
}

- (jboolean)waitForCompletionWithInt:(jint)maxMillis {
  @synchronized(self) {
    if (![self isCompleted]) {
      @try {
        [self java_waitWithLong:maxMillis];
      }
      @catch (JavaLangInterruptedException *e) {
        @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_withNSException_(@"Interrupted while waiting for all operations to complete", e);
      }
    }
    return [self isCompleted];
  }
}

- (void)run {
  @try {
    @try {
      while (true) {
        OrgGreenrobotGreendaoAsyncAsyncOperation *operation = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(queue_)) pollWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
        if (operation == nil) {
          @synchronized(self) {
            operation = [queue_ poll];
            if (operation == nil) {
              JreAssignVolatileBoolean(&executorRunning_, false);
              return;
            }
          }
        }
        if ([operation isMergeTx]) {
          OrgGreenrobotGreendaoAsyncAsyncOperation *operation2 = [queue_ pollWithLong:JreLoadVolatileInt(&waitForMergeMillis_) withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
          if (operation2 != nil) {
            if ([operation isMergeableWithWithOrgGreenrobotGreendaoAsyncAsyncOperation:operation2]) {
              OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation_withOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation, operation2);
            }
            else {
              OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
              OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation2);
            }
            continue;
          }
        }
        OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
      }
    }
    @catch (JavaLangInterruptedException *e) {
      OrgGreenrobotGreendaoDaoLog_wWithNSString_withNSException_(JreStrcat("$$", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @" was interruppted"), e);
    }
  }
  @finally {
    JreAssignVolatileBoolean(&executorRunning_, false);
  }
}

- (void)mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation1
                         withOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation2 {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation_withOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation1, operation2);
}

- (void)handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

- (void)executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

- (void)executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

- (void)executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

- (void)executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *)operation {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

- (jboolean)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
  id<OrgGreenrobotGreendaoAsyncAsyncOperationListener> listenerToCall = JreLoadVolatileId(&listenerMainThread_);
  if (listenerToCall != nil) {
    [listenerToCall onAsyncOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:(OrgGreenrobotGreendaoAsyncAsyncOperation *) cast_chk(((AndroidOsMessage *) nil_chk(msg))->obj_, [OrgGreenrobotGreendaoAsyncAsyncOperation class])];
  }
  return false;
}

- (void)__javaClone:(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&listener_, &original->listener_);
  JreCloneVolatileStrong(&listenerMainThread_, &original->listenerMainThread_);
}

- (void)dealloc {
  RELEASE_(queue_);
  JreReleaseVolatile(&listener_);
  JreReleaseVolatile(&listenerMainThread_);
  RELEASE_(handlerMainThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAsyncAsyncOperationListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgGreenrobotGreendaoAsyncAsyncOperationListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 1, 16, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(enqueueWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[2].selector = @selector(getMaxOperationCountToMerge);
  methods[3].selector = @selector(setMaxOperationCountToMergeWithInt:);
  methods[4].selector = @selector(getWaitForMergeMillis);
  methods[5].selector = @selector(setWaitForMergeMillisWithInt:);
  methods[6].selector = @selector(getListener);
  methods[7].selector = @selector(setListenerWithOrgGreenrobotGreendaoAsyncAsyncOperationListener:);
  methods[8].selector = @selector(getListenerMainThread);
  methods[9].selector = @selector(setListenerMainThreadWithOrgGreenrobotGreendaoAsyncAsyncOperationListener:);
  methods[10].selector = @selector(isCompleted);
  methods[11].selector = @selector(waitForCompletion);
  methods[12].selector = @selector(waitForCompletionWithInt:);
  methods[13].selector = @selector(run);
  methods[14].selector = @selector(mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation:withOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[15].selector = @selector(handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[16].selector = @selector(executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[17].selector = @selector(executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[18].selector = @selector(executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[19].selector = @selector(executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation:);
  methods[20].selector = @selector(handleMessageWithAndroidOsMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executorService", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0xa, -1, 19, -1, -1 },
    { "queue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "executorRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "maxOperationCountToMerge_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "listener_", "LOrgGreenrobotGreendaoAsyncAsyncOperationListener;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "listenerMainThread_", "LOrgGreenrobotGreendaoAsyncAsyncOperationListener;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "waitForMergeMillis_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "countOperationsEnqueued_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countOperationsCompleted_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handlerMainThread_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastSequenceNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "enqueue", "LOrgGreenrobotGreendaoAsyncAsyncOperation;", "setMaxOperationCountToMerge", "I", "setWaitForMergeMillis", "setListener", "LOrgGreenrobotGreendaoAsyncAsyncOperationListener;", "setListenerMainThread", "waitForCompletion", "mergeTxAndExecute", "LOrgGreenrobotGreendaoAsyncAsyncOperation;LOrgGreenrobotGreendaoAsyncAsyncOperation;", "handleOperationCompleted", "executeOperationAndPostCompleted", "executeOperation", "executeTransactionRunnable", "executeTransactionCallable", "LJavaLangException;", "handleMessage", "LAndroidOsMessage;", &OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executorService, "Ljava/util/concurrent/BlockingQueue<Lorg/greenrobot/greendao/async/AsyncOperation;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoAsyncAsyncOperationExecutor = { "AsyncOperationExecutor", "org.greenrobot.greendao.async", ptrTable, methods, fields, 7, 0x0, 21, 11, -1, -1, -1, -1, -1 };
  return &_OrgGreenrobotGreendaoAsyncAsyncOperationExecutor;
}

+ (void)initialize {
  if (self == [OrgGreenrobotGreendaoAsyncAsyncOperationExecutor class]) {
    JreStrongAssign(&OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executorService, JavaUtilConcurrentExecutors_newCachedThreadPool());
    J2OBJC_SET_INITIALIZED(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor)
  }
}

@end

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_init(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  JreAssignVolatileInt(&self->maxOperationCountToMerge_, 50);
  JreAssignVolatileInt(&self->waitForMergeMillis_, 50);
}

OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *new_OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, init)
}

OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *create_OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor, init)
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_mergeTxAndExecuteWithOrgGreenrobotGreendaoAsyncAsyncOperation_withOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation1, OrgGreenrobotGreendaoAsyncAsyncOperation *operation2) {
  JavaUtilArrayList *mergedOps = create_JavaUtilArrayList_init();
  [mergedOps addWithId:operation1];
  [mergedOps addWithId:operation2];
  id<OrgGreenrobotGreendaoDatabaseDatabase> db = [((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation1)) getDatabase];
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) beginTransaction];
  jboolean success = false;
  @try {
    for (jint i = 0; i < [mergedOps size]; i++) {
      OrgGreenrobotGreendaoAsyncAsyncOperation *operation = [mergedOps getWithInt:i];
      OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
      if ([((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation)) isFailed]) {
        break;
      }
      if (i == [mergedOps size] - 1) {
        OrgGreenrobotGreendaoAsyncAsyncOperation *peekedOp = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->queue_)) peek];
        if (i < JreLoadVolatileInt(&self->maxOperationCountToMerge_) && [operation isMergeableWithWithOrgGreenrobotGreendaoAsyncAsyncOperation:peekedOp]) {
          OrgGreenrobotGreendaoAsyncAsyncOperation *removedOp = [self->queue_ remove];
          if (removedOp != peekedOp) {
            @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(@"Internal error: peeked op did not match removed op");
          }
          [mergedOps addWithId:removedOp];
        }
        else {
          [db setTransactionSuccessful];
          success = true;
          break;
        }
      }
    }
  }
  @finally {
    @try {
      [db endTransaction];
    }
    @catch (JavaLangRuntimeException *e) {
      OrgGreenrobotGreendaoDaoLog_iWithNSString_withNSException_(JreStrcat("$Z", @"Async transaction could not be ended, success so far was: ", success), e);
      success = false;
    }
  }
  if (success) {
    jint mergedCount = [mergedOps size];
    for (OrgGreenrobotGreendaoAsyncAsyncOperation * __strong asyncOperation in mergedOps) {
      JreAssignVolatileInt(&((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(asyncOperation))->mergedOperationsCount_, mergedCount);
      OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, asyncOperation);
    }
  }
  else {
    OrgGreenrobotGreendaoDaoLog_iWithNSString_(@"Reverted merged transaction because one of the operations failed. Executing operations one by one instead...");
    for (OrgGreenrobotGreendaoAsyncAsyncOperation * __strong asyncOperation in mergedOps) {
      [((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(asyncOperation)) reset];
      OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, asyncOperation);
    }
  }
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation) {
  [((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation)) setCompleted];
  id<OrgGreenrobotGreendaoAsyncAsyncOperationListener> listenerToCall = JreLoadVolatileId(&self->listener_);
  if (listenerToCall != nil) {
    [listenerToCall onAsyncOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation:operation];
  }
  if (JreLoadVolatileId(&self->listenerMainThread_) != nil) {
    if (self->handlerMainThread_ == nil) {
      JreStrongAssignAndConsume(&self->handlerMainThread_, new_AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsLooper_getMainLooper(), self));
    }
    AndroidOsMessage *msg = [self->handlerMainThread_ obtainMessageWithInt:1 withId:operation];
    [((AndroidOsHandler *) nil_chk(self->handlerMainThread_)) sendMessageWithAndroidOsMessage:msg];
  }
  @synchronized(self) {
    self->countOperationsCompleted_++;
    if (self->countOperationsCompleted_ == self->countOperationsEnqueued_) {
      [self java_notifyAll];
    }
  }
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationAndPostCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation) {
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
  OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_handleOperationCompletedWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeOperationWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation) {
  JreAssignVolatileLong(&((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation))->timeStarted_, JavaLangSystem_currentTimeMillis());
  @try {
    switch ([operation->type_ ordinal]) {
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Delete:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) delete__WithId:operation->parameter_];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_DeleteInTxIterable:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) deleteInTxWithJavaLangIterable:(id<JavaLangIterable>) cast_check(operation->parameter_, JavaLangIterable_class_())];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_DeleteInTxArray:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) deleteInTxWithNSObjectArray:(IOSObjectArray *) cast_check(operation->parameter_, IOSClass_arrayType(NSObject_class_(), 1))];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Insert:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertWithId:operation->parameter_];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_InsertInTxIterable:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertInTxWithJavaLangIterable:(id<JavaLangIterable>) cast_check(operation->parameter_, JavaLangIterable_class_())];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_InsertInTxArray:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertInTxWithNSObjectArray:(IOSObjectArray *) cast_check(operation->parameter_, IOSClass_arrayType(NSObject_class_(), 1))];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_InsertOrReplace:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertOrReplaceWithId:operation->parameter_];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_InsertOrReplaceInTxIterable:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertOrReplaceInTxWithJavaLangIterable:(id<JavaLangIterable>) cast_check(operation->parameter_, JavaLangIterable_class_())];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_InsertOrReplaceInTxArray:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) insertOrReplaceInTxWithNSObjectArray:(IOSObjectArray *) cast_check(operation->parameter_, IOSClass_arrayType(NSObject_class_(), 1))];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Update:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) updateWithId:operation->parameter_];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_UpdateInTxIterable:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) updateInTxWithJavaLangIterable:(id<JavaLangIterable>) cast_check(operation->parameter_, JavaLangIterable_class_())];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_UpdateInTxArray:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) updateInTxWithNSObjectArray:(IOSObjectArray *) cast_check(operation->parameter_, IOSClass_arrayType(NSObject_class_(), 1))];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_TransactionRunnable:
      OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_TransactionCallable:
      OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(self, operation);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_QueryList:
      JreVolatileStrongAssign(&operation->result_, [((OrgGreenrobotGreendaoQueryQuery *) nil_chk([((OrgGreenrobotGreendaoQueryQuery *) nil_chk(((OrgGreenrobotGreendaoQueryQuery *) cast_chk(operation->parameter_, [OrgGreenrobotGreendaoQueryQuery class])))) forCurrentThread])) list]);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_QueryUnique:
      JreVolatileStrongAssign(&operation->result_, [((OrgGreenrobotGreendaoQueryQuery *) nil_chk([((OrgGreenrobotGreendaoQueryQuery *) nil_chk(((OrgGreenrobotGreendaoQueryQuery *) cast_chk(operation->parameter_, [OrgGreenrobotGreendaoQueryQuery class])))) forCurrentThread])) unique]);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_DeleteByKey:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) deleteByKeyWithId:operation->parameter_];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_DeleteAll:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) deleteAll];
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Load:
      JreVolatileStrongAssign(&operation->result_, [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) load__WithId:operation->parameter_]);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_LoadAll:
      JreVolatileStrongAssign(&operation->result_, [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) loadAll]);
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Count:
      JreVolatileStrongAssign(&operation->result_, JavaLangLong_valueOfWithLong_([((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) count]));
      break;
      case OrgGreenrobotGreendaoAsyncAsyncOperation_OperationType_Enum_Refresh:
      [((OrgGreenrobotGreendaoAbstractDao *) nil_chk(operation->dao_)) refreshWithId:operation->parameter_];
      break;
      default:
      @throw create_OrgGreenrobotGreendaoDaoException_initWithNSString_(JreStrcat("$@", @"Unsupported operation: ", operation->type_));
    }
  }
  @catch (NSException *th) {
    JreVolatileStrongAssign(&operation->throwable_, th);
  }
  JreAssignVolatileLong(&operation->timeCompleted_, JavaLangSystem_currentTimeMillis());
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionRunnableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation) {
  id<OrgGreenrobotGreendaoDatabaseDatabase> db = [((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation)) getDatabase];
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) beginTransaction];
  @try {
    [((id<JavaLangRunnable>) nil_chk(((id<JavaLangRunnable>) cast_check(operation->parameter_, JavaLangRunnable_class_())))) run];
    [db setTransactionSuccessful];
  }
  @finally {
    [db endTransaction];
  }
}

void OrgGreenrobotGreendaoAsyncAsyncOperationExecutor_executeTransactionCallableWithOrgGreenrobotGreendaoAsyncAsyncOperation_(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor *self, OrgGreenrobotGreendaoAsyncAsyncOperation *operation) {
  id<OrgGreenrobotGreendaoDatabaseDatabase> db = [((OrgGreenrobotGreendaoAsyncAsyncOperation *) nil_chk(operation)) getDatabase];
  [((id<OrgGreenrobotGreendaoDatabaseDatabase>) nil_chk(db)) beginTransaction];
  @try {
    JreVolatileStrongAssign(&operation->result_, [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(operation->parameter_, JavaUtilConcurrentCallable_class_())))) call]);
    [db setTransactionSuccessful];
  }
  @finally {
    [db endTransaction];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoAsyncAsyncOperationExecutor)
