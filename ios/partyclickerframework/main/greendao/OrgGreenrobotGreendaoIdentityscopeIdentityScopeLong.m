//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong.h"
#include "OrgGreenrobotGreendaoInternalLongHashMap.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@interface OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong () {
 @public
  OrgGreenrobotGreendaoInternalLongHashMap *map_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

@end

J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong, map_, OrgGreenrobotGreendaoInternalLongHashMap *)
J2OBJC_FIELD_SETTER(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong, lock_, JavaUtilConcurrentLocksReentrantLock *)

@implementation OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getWithId:(JavaLangLong *)key {
  return [self get2WithLong:[((JavaLangLong *) nil_chk(key)) longLongValue]];
}

- (id)getNoLockWithId:(JavaLangLong *)key {
  return [self get2NoLockWithLong:[((JavaLangLong *) nil_chk(key)) longLongValue]];
}

- (id)get2WithLong:(jlong)key {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  JavaLangRefReference *ref;
  @try {
    ref = [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) getWithLong:key];
  }
  @finally {
    [lock_ unlock];
  }
  if (ref != nil) {
    return [ref get];
  }
  else {
    return nil;
  }
}

- (id)get2NoLockWithLong:(jlong)key {
  JavaLangRefReference *ref = [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) getWithLong:key];
  if (ref != nil) {
    return [ref get];
  }
  else {
    return nil;
  }
}

- (void)putWithId:(JavaLangLong *)key
           withId:(id)entity {
  [self put2WithLong:[((JavaLangLong *) nil_chk(key)) longLongValue] withId:entity];
}

- (void)putNoLockWithId:(JavaLangLong *)key
                 withId:(id)entity {
  [self put2NoLockWithLong:[((JavaLangLong *) nil_chk(key)) longLongValue] withId:entity];
}

- (void)put2WithLong:(jlong)key
              withId:(id)entity {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) putWithLong:key withId:create_JavaLangRefWeakReference_initWithId_(entity)];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)put2NoLockWithLong:(jlong)key
                    withId:(id)entity {
  [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) putWithLong:key withId:create_JavaLangRefWeakReference_initWithId_(entity)];
}

- (jboolean)detachWithId:(JavaLangLong *)key
                  withId:(id)entity {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    if ([self getWithId:key] == entity && entity != nil) {
      [self removeWithId:key];
      return true;
    }
    else {
      return false;
    }
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)removeWithId:(JavaLangLong *)key {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) removeWithLong:[((JavaLangLong *) nil_chk(key)) longLongValue]];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)removeWithJavaLangIterable:(id<JavaLangIterable>)keys {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    for (JavaLangLong * __strong key in nil_chk(keys)) {
      [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) removeWithLong:[((JavaLangLong *) nil_chk(key)) longLongValue]];
    }
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)clear {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) clear];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)lock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
}

- (void)unlock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) unlock];
}

- (void)reserveRoomWithInt:(jint)count {
  [((OrgGreenrobotGreendaoInternalLongHashMap *) nil_chk(map_)) reserveRoomWithInt:count];
}

- (void)dealloc {
  RELEASE_(map_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 16, 9, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithId:);
  methods[2].selector = @selector(getNoLockWithId:);
  methods[3].selector = @selector(get2WithLong:);
  methods[4].selector = @selector(get2NoLockWithLong:);
  methods[5].selector = @selector(putWithId:withId:);
  methods[6].selector = @selector(putNoLockWithId:withId:);
  methods[7].selector = @selector(put2WithLong:withId:);
  methods[8].selector = @selector(put2NoLockWithLong:withId:);
  methods[9].selector = @selector(detachWithId:withId:);
  methods[10].selector = @selector(removeWithId:);
  methods[11].selector = @selector(removeWithJavaLangIterable:);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(lock);
  methods[14].selector = @selector(unlock);
  methods[15].selector = @selector(reserveRoomWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LOrgGreenrobotGreendaoInternalLongHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LJavaLangLong;", "(Ljava/lang/Long;)TT;", "getNoLock", "get2", "J", "(J)TT;", "get2NoLock", "put", "LJavaLangLong;LNSObject;", "(Ljava/lang/Long;TT;)V", "putNoLock", "put2", "JLNSObject;", "(JTT;)V", "put2NoLock", "detach", "(Ljava/lang/Long;TT;)Z", "remove", "LJavaLangIterable;", "(Ljava/lang/Iterable<Ljava/lang/Long;>;)V", "reserveRoom", "I", "Lorg/greenrobot/greendao/internal/LongHashMap<Ljava/lang/ref/Reference<TT;>;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/greenrobot/greendao/identityscope/IdentityScope<Ljava/lang/Long;TT;>;" };
  static const J2ObjcClassInfo _OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong = { "IdentityScopeLong", "org.greenrobot.greendao.identityscope", ptrTable, methods, fields, 7, 0x1, 16, 2, -1, -1, -1, 24, -1 };
  return &_OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong;
}

@end

void OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong_init(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_OrgGreenrobotGreendaoInternalLongHashMap_init());
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
}

OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong *new_OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong_init() {
  J2OBJC_NEW_IMPL(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong, init)
}

OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong *create_OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong_init() {
  J2OBJC_CREATE_IMPL(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGreenrobotGreendaoIdentityscopeIdentityScopeLong)
